<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pengyin's Note</title><link>http://pengyin-shan.com/</link><description>This is Pengyin Shan's Note</description><atom:link href="http://pengyin-shan.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 21 Feb 2017 02:08:06 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>(In Chinese) 富爸爸穷爸爸-阅读摘抄</title><link>http://pengyin-shan.com/posts/2017/book/chinese-rich-data-poor-dad.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;即使只是为了生存下去我们也需要提高自己的财商。&lt;/li&gt;
&lt;li&gt;只有工作才能创造钱的思想是在财务上不成熟的人的思想&lt;/li&gt;
&lt;li&gt;金钱是一种思想，要赚更多的钱，必须改变思想&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

&lt;h2&gt;Part 1: 课程&lt;/h2&gt;
&lt;h4&gt;经常锻炼大脑&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不能说“我可付不起”的话，要说“我怎样才能付得起呢？”&lt;/li&gt;
&lt;li&gt;当遇到钱的问题时，&lt;code&gt;想办法解决&lt;/code&gt;而不是顺其自然&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;寻求完全的经济自立&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果能了解钱是如何运转的，你就有了驾驭它的力量，并开始积累财富。&lt;/p&gt;
&lt;h3&gt;第一课： 富人不为钱工作&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;穷人和中产阶级为钱而工作，富人让钱为他们工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;真正的学习需要&lt;code&gt;精力&lt;/code&gt;，&lt;code&gt;激情&lt;/code&gt;和&lt;code&gt;热切的愿望&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;出于恐惧心，为了寻求稳定，多数人成了&lt;code&gt;钱的奴隶&lt;/code&gt;，然后把怒气对准他们的老板&lt;/p&gt;
&lt;h4&gt;避开人一生中最大的陷阱&lt;/h4&gt;
&lt;h5&gt;低端工作=陷阱&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;穷人为了一点点钱而勤奋工作，兼有一种有工作的&lt;code&gt;虚幻安全感&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;真实地看待你的感情，以你&lt;code&gt;喜欢&lt;/code&gt;的方式运用头脑和感情，而不是与自己作对.&lt;/li&gt;
&lt;li&gt;一份工作不能长期的解决经济问题。工作只是试图用&lt;code&gt;暂时&lt;/code&gt;的办法来解决长期的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;感情与钱&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;要学会&lt;code&gt;支配钱&lt;/code&gt;，而不是害怕他&lt;/li&gt;
&lt;li&gt;造成贫穷和财务问题的主要原因是&lt;code&gt;恐惧和无知&lt;/code&gt;，而非经济环境，政府或富人&lt;/li&gt;
&lt;li&gt;要运用恐惧或贪婪为长期利益&lt;code&gt;牟利&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;人必须不停的与自己作斗争，通过&lt;code&gt;学习&lt;/code&gt;打开自己的心扉而不是封闭自己的头脑&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;学校毕业是继续学习的开端&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;让感情跟随&lt;code&gt;思想&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;自己赚钱&lt;/code&gt;而不是依赖雇主&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;第二课： 为什么教授财务知识&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;规则：必须明白负债和资产的区别，尽可能&lt;code&gt;购买资产&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;损益表&lt;/h4&gt;
&lt;p&gt;&lt;img alt="损益表" src="http://pengyin-shan.com/images/2017/books/qiongbaba/sunyibiao.png"&gt;&lt;/p&gt;
&lt;h4&gt;富人的现金流向图&lt;/h4&gt;
&lt;p&gt;&lt;img alt="现金图" src="http://pengyin-shan.com/images/2017/books/qiongbaba/xianjitu1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="现金图" src="http://pengyin-shan.com/images/2017/books/qiongbaba/xianjitu2.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;独立思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;过大而时髦的房子可能成为负债&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;大多数人&lt;code&gt;一生&lt;/code&gt;都在为一所他们并未真正拥有的房子而辛苦的工作&lt;/li&gt;
&lt;li&gt;总是要&lt;code&gt;先还清各期贷款&lt;/code&gt;后，才能以税后收入支付各种开支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;财产税&lt;/code&gt;可能很高&lt;/li&gt;
&lt;li&gt;将房子作为&lt;code&gt;主要资产&lt;/code&gt;反复进行投资，而不是投资于那些能带来收入的真正的资产上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大的损失是&lt;code&gt;机会损失&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结果:
1. 失去了用其他资产增值的时机
2. 本可以用来投资的资本将用于支付房子的各种高额，长期开支
3. 失去受教育的机会，不能成为‘成熟投资者’&lt;/p&gt;
&lt;h4&gt;富人的财务情况&lt;/h4&gt;
&lt;p&gt;&lt;img alt="富人财务" src="http://pengyin-shan.com/images/2017/books/qiongbaba/furencaiwu.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="穷人财务" src="http://pengyin-shan.com/images/2017/books/qiongbaba/qiongrencaiwu.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为普通中产阶级早年缺乏必要的财务知识，他们必须要回避风险， 而不是正确的去看待投资机会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;普通中产阶级为雇主、股东工作，为政府工作，为银行工作&lt;/p&gt;
&lt;h4&gt;三个步骤&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;从资产项（而不是工资）得到的&lt;code&gt;现金流与支出等量&lt;/code&gt;(不依赖工资）&lt;/li&gt;
&lt;li&gt;把支出控制在资产所能够产生的现金流之下，从而使用多余现金&lt;code&gt;再投资&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;重复&lt;/code&gt;第2步这种再投资过程&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;富人&lt;code&gt;买入资产&lt;/code&gt;
穷人只有支出
中产阶级买他们以为是资产的负债&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;第三课：关注自己的事业&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;存在财务问题的人经常是一生为别人工作的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;在拥有职业的同时应该拥有自己的事业&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;事业是围绕着你的&lt;code&gt;资产&lt;/code&gt;，而不是你的收入&lt;/li&gt;
&lt;li&gt;只有把增加的收入用于购买&lt;code&gt;可产生收入的资产&lt;/code&gt;时，才能获得真正的财务安全&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;汽车并不是真正的资产&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;1 打下资产基础&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;支出稳定在&lt;code&gt;低水平&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;减少&lt;code&gt;借款&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;勤劳工作&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;2 获取真正的资产&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不需要我到场就可以正常运作的&lt;code&gt;业务&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;股票&lt;/li&gt;
&lt;li&gt;债券
4.共同基金&lt;/li&gt;
&lt;li&gt;产生收入的房地产&lt;/li&gt;
&lt;li&gt;票据（借据）&lt;/li&gt;
&lt;li&gt;专利权， 如音乐，手稿，专利&lt;/li&gt;
&lt;li&gt;其他有价值，可产生收入，或可能增值并有很好的流通市场的东西&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;富人&lt;strong&gt;最后才买奢侈品&lt;/strong&gt;， 先建立资产&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;第四课： 税收的历史和公司的力量&lt;/h3&gt;
&lt;p&gt;富人并未被征税，而是中产阶级在为穷人支付税金&lt;/p&gt;
&lt;h4&gt;真正的资本家利用他们的财务知识逃避税收&lt;/h4&gt;
&lt;h5&gt;公司&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;公司可以只是一些符合法律要求的&lt;code&gt;文件&lt;/code&gt;，在政府&lt;code&gt;注册&lt;/code&gt;后就被放在了律师的办公室里&lt;/li&gt;
&lt;li&gt;公司所得税率&lt;code&gt;低于&lt;/code&gt;个人收入所得税率&lt;/li&gt;
&lt;li&gt;公司的某些支出可以在税前获得&lt;code&gt;抵减&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;吃亏的人一定是&lt;code&gt;无知者&lt;/code&gt;，他们不会用合理合法的避税手段，也不了解法律&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;钱越多，需要的知识也就越多&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;让钱为我工作而不是我为钱工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;精于&lt;code&gt;计算&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;了解&lt;code&gt;法律&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;财务的构成&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;会计&lt;/code&gt; - 财务知识 - 读懂财务报表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;投资战略&lt;/code&gt; - 钱生钱的科学 - 投资与创造&lt;/li&gt;
&lt;li&gt;&lt;code&gt;了解市场&lt;/code&gt; - 供给与需求的科学 - 决定投资的意义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;法律&lt;/code&gt;：税收优惠，在诉讼中获得保护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="拥有公司" src="http://pengyin-shan.com/images/2017/books/qiongbaba/yongyougongsi.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目标一： 拥有一个由自己资产组成的&lt;strong&gt;公司&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;第五课：富人的投资&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;过分的&lt;code&gt;畏惧和自我怀疑&lt;/code&gt;是浪费我们才能的最大因素 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;努力提高自己的财商&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;财商&lt;/code&gt;： 抓住机会，然后将机会转变成数以百万级的美元&lt;/li&gt;
&lt;li&gt;富人更富有&lt;code&gt;创造性&lt;/code&gt;，愿意经过精心筹划后再去冒险&lt;/li&gt;
&lt;li&gt;应用&lt;code&gt;财务智慧&lt;/code&gt;，创造性解决财务问题&lt;/li&gt;
&lt;li&gt;不断学习和提高财商的原因是因为市场会有景气和萧条的交替，要&lt;code&gt;欢迎变化&lt;/code&gt;而不是沉溺于过去。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;最重要的资产是&lt;strong&gt;头脑&lt;/strong&gt;而不是金钱。如果受到良好训练，就可以迅速创造大量财富&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;开发理财天赋&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果投资机会太复杂而我不能弄明白，我就不会去投资&lt;/li&gt;
&lt;li&gt;过于‘保险’的投资常常过于安全，太安全会导致低收益&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;越‘老练’就会得到越多的机会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果你清楚自己在做什么，那就不是在赌博&lt;/li&gt;
&lt;li&gt;如果把钱投入一笔交易然后只是祈祷，那就是在赌博&lt;/li&gt;
&lt;li&gt;运用&lt;code&gt;知识&lt;/code&gt;来&lt;code&gt;降低风险&lt;/code&gt;，减少意外的发生&lt;/li&gt;
&lt;li&gt;财商可以提高&lt;code&gt;应付意外事件&lt;/code&gt;发生的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;做创造投资机会的投资者&lt;/h4&gt;
&lt;h5&gt;三种技能要求&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;如何寻找其他人都忽视的&lt;code&gt;机会&lt;/code&gt; - 买破房子并装修然后卖掉&lt;/li&gt;
&lt;li&gt;如何&lt;code&gt;增加资金&lt;/code&gt; - 寻找不需要银行就能融资的方法 - 投资不是买入，而是一个收集信息的过程&lt;/li&gt;
&lt;li&gt;如何&lt;code&gt;组织&lt;/code&gt;精明的人们&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;第六课：不要为金钱而工作&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分人需要学习并掌握不止一项技能，才能是收入获得显著增长&lt;/p&gt;
&lt;p&gt;富人能使自己活得更长一些，而贫穷的人只能早早死去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在寻找工作时要看看能从中&lt;code&gt;学到什么&lt;/code&gt;，而不是只看能挣到多少&lt;/li&gt;
&lt;li&gt;要对人生有&lt;code&gt;长远的眼光&lt;/code&gt;，从长远看教育比金钱更有价值&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;要学习&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;要学习&lt;code&gt;营销技能&lt;/code&gt;，最好进入一家拥有&lt;code&gt;连锁营销&lt;/code&gt;系统或称为&lt;code&gt;多层次市场&lt;/code&gt;的公司&lt;/li&gt;
&lt;li&gt;要研究一个企业&lt;code&gt;所有的部门&lt;/code&gt;，并对如何经营一家企业有一个整体的认识，能知道不同部门之间的相互关系&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;必要的管理素质&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;对&lt;code&gt;现金流&lt;/code&gt;的管理&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;系统&lt;/code&gt;（本人，时间和家庭）的管理&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;人员&lt;/code&gt;的管理&lt;/li&gt;
&lt;li&gt;最重要：&lt;code&gt;销售与市场营销&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;销售与市场营销&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;如果过度依赖专业特长，可能会出现工资增长，但选择机会消失的情况&lt;/li&gt;
&lt;li&gt;在处理&lt;code&gt;人际交往，商务谈判和控制被拒绝时的恐慌心理&lt;/code&gt;方面做得越好，生活就会越轻松。&lt;/li&gt;
&lt;li&gt;成为好老师，好学生&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;目标二：学习销售饼提高处理人际关系的能力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

&lt;h2&gt;Part2 : 开端&lt;/h2&gt;
&lt;h3&gt;克服困难&lt;/h3&gt;
&lt;h4&gt;不能拥有充足资产的五个原因&lt;/h4&gt;
&lt;h5&gt;1. 恐惧心理 - 可能损失金钱&lt;/h5&gt;
&lt;p&gt;恐惧心理是正常的，每个人仍有机会变得富有&lt;/p&gt;
&lt;p&gt;对于大多数人来说，他们在财务上不能获胜的原因是因为对他们而言损失金钱所造成的痛苦远远大于致富所带来的乐趣.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面对损失并将它变成盈利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要为了&lt;code&gt;盈利&lt;/code&gt;而理财，而不是为了避免损失而理财&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成功的投资者拥有&lt;code&gt;盈利的投资组合&lt;/code&gt;，而不是一个安全而平衡的投资组合&lt;/li&gt;
&lt;li&gt;要&lt;code&gt;集中于一点&lt;/code&gt;，在这点上不断取得进展， 而不是‘分散风险’&lt;/li&gt;
&lt;li&gt;&lt;code&gt;尽早起步&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;2. 顾虑与愤世嫉俗&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;不要总是对自己产生怀疑&lt;/li&gt;
&lt;li&gt;不要让谣言和杞人忧天式的怀疑加剧我们的恐惧心理和对自己的疑虑&lt;/li&gt;
&lt;li&gt;成功者&lt;code&gt;分析现实&lt;/code&gt;，分析使人心明眼亮 (在油价准备上涨时购买石油公司的股份)，失败者抱怨&lt;/li&gt;
&lt;li&gt;注意能得到的&lt;code&gt;巨大收益&lt;/code&gt;，而不是细节上的麻烦&lt;/li&gt;
&lt;li&gt;寻找好的&lt;code&gt;代管理者&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;避免‘买家反悔’心理，不要说‘我不想要’，把握实现财务自由的机会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;3. 懒惰&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;忙碌的人常常是最懒惰的人&lt;/li&gt;
&lt;li&gt;应该‘贪婪'一点，勇于追求并得到自己想要的生活&lt;/li&gt;
&lt;li&gt;负罪感比欲望要糟&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我怎样才能支付这个？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;4. 不良习惯&lt;/h5&gt;
&lt;p&gt;1.先&lt;code&gt;支付自己&lt;/code&gt;
2.思考如何赚到&lt;code&gt;额外的钱&lt;/code&gt;支付政府的征税者&lt;/p&gt;
&lt;h5&gt;5. 自负&lt;/h5&gt;
&lt;p&gt;1.不要掩饰自己在某一方面欠缺知识
2.马上开始&lt;code&gt;教育自己&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h2&gt;Part3: 开始行动&lt;/h2&gt;
&lt;h3&gt;第九章： 开始行动&lt;/h3&gt;
&lt;h4&gt;十个步骤唤醒财务天赋&lt;/h4&gt;
&lt;h5&gt;1 精神的力量&lt;/h5&gt;
&lt;p&gt;不想要一生都工作，想要金钱为我工作&lt;/p&gt;
&lt;h5&gt;2 每天作出自己的选择&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;选择自己的将来是&lt;code&gt;富裕&lt;/code&gt;、贫穷还是一般的机会&lt;/li&gt;
&lt;li&gt;选择如何利用自己的&lt;code&gt;时间&lt;/code&gt;，&lt;code&gt;金钱&lt;/code&gt;和&lt;code&gt;知识&lt;/code&gt;实现目标 &lt;/li&gt;
&lt;li&gt;每天保持&lt;code&gt;学习&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;投资于&lt;code&gt;教育&lt;/code&gt;，首先投资与学习自己所要投资项目的有关知识&lt;/li&gt;
&lt;li&gt;参加&lt;code&gt;检讨会/讲座&lt;/code&gt;，可能会花一些钱，但是能在将来获得回报。每年至少要参加两次这样的培训。&lt;/li&gt;
&lt;li&gt;阅读或听有经验的人说过的话。&lt;em&gt;不要放弃吸收更多新思想和可能性的机会，不要傲慢&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;长远眼光&lt;/code&gt;看待自己的财富，先&lt;code&gt;教育自己&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;3 慎重的选择朋友&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;注意&lt;strong&gt;有钱&lt;/strong&gt;的朋友是如何谈论&lt;code&gt;金钱&lt;/code&gt;的，向他们学习&lt;/li&gt;
&lt;li&gt;注意&lt;strong&gt;贫穷&lt;/strong&gt;的朋友是如何谈论金钱的，学到什么事情不能做&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要听&lt;code&gt;胆小&lt;/code&gt;的人说的话&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要注意倾听双方的意见，保持开放的心态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;坚持自己&lt;/code&gt;的选择，不盲目从众 - 群体可能会反应迟钝&lt;/li&gt;
&lt;li&gt;精明的投资者不会抱怨市场机会不对，而是马上去寻找下一个机会&lt;/li&gt;
&lt;li&gt;购买一项&lt;code&gt;不大流行&lt;/code&gt;的投资：盈利是在&lt;code&gt;购买&lt;/code&gt;时就已获得，而不是在出售时获得的&lt;/li&gt;
&lt;li&gt;寻找&lt;code&gt;内幕信息&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;4 掌握一种模式，然后再学习一种新的模式 - 快速学习&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;当一种赚钱方法不那么管用时，快速学习另一种新的&lt;/li&gt;
&lt;li&gt;时间变化很快，所以必须快速学习&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;5 首先支付自己 - 自律&lt;/h5&gt;
&lt;p&gt;&lt;img alt="支付自己" src="http://pengyin-shan.com/images/2017/books/qiongbaba/zhifuziji.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能控制自己 = 不能致富。不要得到薪水之后立刻出去购买新车或乘船旅游&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这是区分穷人和富人的首要因素&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要自信，学会忍耐财务压力&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在支付每月支出之前，先将钱安排在自己的资产项目上&lt;/strong&gt; - &lt;code&gt;需要胆量&lt;/code&gt;，&lt;code&gt;不随大流&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不要背上数额过大的债务包袱，保持自己的支出&lt;code&gt;低水平&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;先增加&lt;code&gt;资产&lt;/code&gt;,再用&lt;code&gt;资产中产生的现金流&lt;/code&gt;购买大房子或好车子&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h6&gt;当资金短缺时，去承受外在压力&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;不要动用储蓄或投资&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;利用这种压力想办法挣更多的钱&lt;/li&gt;
&lt;li&gt;致富并不以牺牲舒适生活为代价的支付账单&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;储蓄只能用于创造更多的钱，而不是用来支付账单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;6 寻求好建议 - 厚待经纪人&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;给专业人士优厚的报酬 - &lt;code&gt;专业人才&lt;/code&gt;的服务会创造财富,节省时间&lt;/li&gt;
&lt;li&gt;好的经纪人：&lt;code&gt;提供信息&lt;/code&gt;，&lt;code&gt;花时间教育我&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;经纪人是我在市场上的&lt;code&gt;眼睛&lt;/code&gt;和&lt;code&gt;耳朵&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;称职的经纪人&lt;/code&gt;: 了解他们个人的财产和税收支付情况，保证我们感兴趣的领域一样&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;对你的利益很关心&lt;/code&gt;的经纪人： 会教育你&lt;/li&gt;
&lt;li&gt;加强人力管理技能&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;7 重视收回投资后的资产，而不仅仅是投资回报率&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;投入 -&amp;gt; 盈利 -&amp;gt; 收回， 不要担心之后的市场。
2.可能会损失资金，但确保我可以负担得起损失资金&lt;/li&gt;
&lt;li&gt;明智的投资者看到一旦&lt;code&gt;收回投资&lt;/code&gt;后，因此&lt;code&gt;所拥有的资产&lt;/code&gt;如同白得&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;8 集中资产&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;集中资源于资产项而不是负债项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;要拥有&lt;code&gt;控制金钱&lt;/code&gt;的意志 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;以钱生钱&lt;/code&gt; 而不是随意购买奢侈品&lt;/li&gt;
&lt;li&gt;用消费欲激发财务天赋去进行投资&lt;/li&gt;
&lt;li&gt;不要借钱去获得想要的东西，而是把注意力集中在为自己创造金钱上&lt;/li&gt;
&lt;li&gt;成为金钱的主人，不要用金钱的力量对付自己&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;9 选择心目中的英雄&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;阅读书籍&lt;/code&gt;，模仿这些富人，如特朗普，巴菲特，彼得林奇，索罗斯，罗杰斯&lt;/li&gt;
&lt;li&gt;在交易时模仿他们的气势，行为，思考方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;10 给予外界&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;先予后给&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在需要什么时，首先想到给予&lt;/li&gt;
&lt;li&gt;例如在需要金钱时先给予别人金钱，然后为自己想要的东西付出成本&lt;/li&gt;
&lt;li&gt;想一想自己心里到底需要什么，然后为此先付出&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;第十章：如何去做&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;行动者总会击败不行动者，现在就行动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1 先思考&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;评估&lt;/code&gt;一下正在做的的事哪些是有效的，哪些是无效的&lt;/li&gt;
&lt;li&gt;找一些有效的事情去&lt;code&gt;做&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;2 寻找新的思想&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;去书店或上网寻找&lt;code&gt;新的投资理念/模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;行动起来&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;3 找一个做过你想做的事情的人共进午餐&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;向他/她&lt;code&gt;请教&lt;/code&gt;诀窍或做生意的技巧&lt;/li&gt;
&lt;li&gt;&lt;code&gt;行动起来&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;4 参加辅导班并购买相关磁带&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;可能会花费一些学习费用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;值得&lt;/code&gt;。学习并行动&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;5 提出多份报价&lt;/h4&gt;
&lt;h5&gt;在投资时：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;选看&lt;code&gt;多数&lt;/code&gt;报价：没有人知道是么是‘恰当的价格’，除非有另一处同样的交易作为参照。&lt;/li&gt;
&lt;li&gt;给出一个&lt;code&gt;一般性&lt;/code&gt;报价： 大部分的卖主要价过高&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;做买卖就是一场有趣的游戏
报价提出来，就会有人同意&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;使用‘回避条款’来做报价&lt;/h5&gt;
&lt;p&gt;在协议上加上‘需得到商业伙伴的同意’，然后利用这个来回避不需要的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不需要将买卖游戏搞得太复杂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;6 到市场上去&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一桩交易要获得盈利，必须具备两个条件：1. &lt;code&gt;廉价&lt;/code&gt; 2.&lt;code&gt;有变化&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;只有存在变化时，才能使廉价交易变成有利可图的机会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;不要一直坐在家里等电话&lt;/li&gt;
&lt;li&gt;房地产：每月在有可能的地区慢跑，散步或驾车10来分钟，发现投资机会&lt;/li&gt;
&lt;li&gt;注意观察，以及和附近的人交流&lt;/li&gt;
&lt;li&gt;股票： 彼得林奇《称雄华尔街》&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;7 不要被打折或降价轻易吸引/吓到&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;消费时不要急于在降价时储货&lt;/li&gt;
&lt;li&gt;股票下挫时不要轻易回调&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;8 关注适当的地方&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;注意关键盈利/亏损的&lt;code&gt;时间&lt;/code&gt;：不要白白等待（价格上涨/下跌）&lt;/li&gt;
&lt;li&gt;买下馅饼并把它切成小块：考虑&lt;code&gt;较大&lt;/code&gt;的生意。大部分人看到的都只是较小的东西&lt;/li&gt;
&lt;li&gt;即使投资规模很小，也要考虑大生意&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;9 温故而知新&lt;/h5&gt;
&lt;p&gt;学习各种成功认识的案例，包括过去和现在的&lt;/p&gt;&lt;/div&gt;</description><category>Business</category><category>Chinese</category><category>Finance</category><category>Reading Notes</category><guid>http://pengyin-shan.com/posts/2017/book/chinese-rich-data-poor-dad.html</guid><pubDate>Mon, 20 Feb 2017 05:00:00 GMT</pubDate></item><item><title>(In Chinese) 聪明人用方格笔记本-阅读摘抄</title><link>http://pengyin-shan.com/posts/2017/book/chinese-use-graph-ruled-notebook.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;进化笔记本：学习、工作、博弈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;笔记本三法则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;法则1： 使用方格笔记本&lt;/li&gt;
&lt;li&gt;法则2: 在笔记本上方的空白区域标出题目&lt;/li&gt;
&lt;li&gt;法则3: 用三分法记录： 事实-》解释-》行动&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;笔记本要求&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;看起来工整&lt;/li&gt;
&lt;li&gt;比A4纸d大&lt;/li&gt;
&lt;li&gt;颜色不超过三种&lt;/li&gt;
&lt;li&gt;每一页都有一个主题&lt;/li&gt;
&lt;li&gt;是黑板，白板板书内容的提炼&lt;/li&gt;
&lt;li&gt;留有空白区域&lt;/li&gt;
&lt;li&gt;画有许多图，表，画&lt;/li&gt;
&lt;li&gt;日后看笔记时依然可再现当时的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;笔记的生命线是‘再现性’，这是记笔记的终极目的。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;使用方格笔记本&lt;/h3&gt;
&lt;p&gt;&lt;img alt="使用指引" src="http://pengyin-shan.com/images/2017/books/notebook/guide.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="function1" src="http://pengyin-shan.com/images/2017/books/notebook/function1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="function2" src="http://pengyin-shan.com/images/2017/books/notebook/function2.png"&gt;&lt;/p&gt;
&lt;h4&gt;使用方格&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;行首对齐&lt;/li&gt;
&lt;li&gt;在行首空两三个字的地方写小标题&lt;/li&gt;
&lt;li&gt;在比小标题往后两三个字的地方写内容&lt;/li&gt;
&lt;li&gt;项目改变时空一行&lt;/li&gt;
&lt;li&gt;注意留出空隙，留出进行信息整理的空间&lt;/li&gt;
&lt;li&gt;左右相对的两页记录一个信息点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;学习需要有‘框架’。 框架 = 整理思路的书架&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;黄金三分法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;康奈尔笔记本： 板书／发现／总结&lt;/li&gt;
&lt;li&gt;咨询公司： 事实／解释／行动&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;东大录取生的笔记本&lt;/h5&gt;
&lt;p&gt;&lt;img alt="东大录取生的笔记本" src="http://pengyin-shan.com/images/2017/books/notebook/tokuyo-notebook.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左右两页作为一页使用。 &lt;/li&gt;
&lt;li&gt;右侧先空下，左侧记板书。&lt;/li&gt;
&lt;li&gt;右侧左边记点评和疑点，右侧右边记采取的行动和总结。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;康奈尔笔记本&lt;/h5&gt;
&lt;p&gt;&lt;img alt="康奈尔笔记本" src="http://pengyin-shan.com/images/2017/books/notebook/cornel-notebook.png"&gt;&lt;/p&gt;
&lt;h5&gt;埃森哲Point Sheet&lt;/h5&gt;
&lt;p&gt;&lt;img alt="埃森哲笔记本" src="http://pengyin-shan.com/images/2017/books/notebook/accenture-notebook.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左侧记录重点&lt;/li&gt;
&lt;li&gt;右侧记录采取的行动： 谁，在什么时间之前， 需要完成什么事&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;麦肯锡笔记本&lt;/h5&gt;
&lt;p&gt;&lt;img alt="麦肯锡笔记本" src="http://pengyin-shan.com/images/2017/books/notebook/McKinsey-notebook.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空：现在的情况&lt;/li&gt;
&lt;li&gt;雨：对此情况的解释&lt;/li&gt;
&lt;li&gt;伞：根据此解释而采取的行动&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;使用笔记本&lt;/h4&gt;
&lt;h5&gt;横向使用方格笔记本&lt;/h5&gt;
&lt;p&gt;由于人的眼睛时左右横向排列的，所以横向的视野比纵向的视野开阔&lt;/p&gt;
&lt;h5&gt;A4笔记本为根本&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;小笔记本无法总结想法&lt;/li&gt;
&lt;li&gt;A4笔记本符合国际标准&lt;/li&gt;
&lt;li&gt;会增强PPT的制作能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;使用的颜色控制在三种以内&lt;/h5&gt;
&lt;p&gt;咨询公司在记录时用单色（黑或蓝），检查或向客户反馈信息时用红色&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用蓝色笔提升创造力&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;像报纸那样标出‘题目’&lt;/h5&gt;
&lt;p&gt;&lt;img alt="题目" src="http://pengyin-shan.com/images/2017/books/notebook/title.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一句话表达这页的最重要的内容&lt;/li&gt;
&lt;li&gt;表达“论点、问题核心”，推断出“结论、应该怎么做”&lt;/li&gt;
&lt;li&gt;一页一主题&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;舒适的方格笔记本和笔&lt;/h5&gt;
&lt;p&gt;书写舒适会提高记笔记的积极性&lt;/p&gt;
&lt;h5&gt;大量书写，大量舍弃&lt;/h5&gt;
&lt;p&gt;10000页联系&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;学习笔记本&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;记忆， 思考，传达&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记忆性笔记本（学习笔记本）&lt;/li&gt;
&lt;li&gt;思考型笔记本（工作笔记本）&lt;/li&gt;
&lt;li&gt;传达型笔记本（提案、博弈笔记本）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="学习笔记本" src="http://pengyin-shan.com/images/2017/books/notebook/study-notebook.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="学习笔记本" src="http://pengyin-shan.com/images/2017/books/notebook/studynote1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="学习笔记本" src="http://pengyin-shan.com/images/2017/books/notebook/studynote2.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要照抄板书&lt;/li&gt;
&lt;li&gt;看黑板-》印在大脑中-》不看黑板，将印在大脑中的内容重现在笔记本上&lt;/li&gt;
&lt;li&gt;使用‘两页一主题’ 的方式使用学习笔记本：学习时新知识量很大&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;标题区&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;题目：这是一篇关于什么的讲义&lt;/li&gt;
&lt;li&gt;重点：记录需要掌握的主要内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;三等分内容区&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;左：板书区域&lt;/li&gt;
&lt;li&gt;中：老师点评，自己的所思所想区域&lt;/li&gt;
&lt;li&gt;右：解决疑问，总结概括区域&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;中部区域是重点&lt;/h5&gt;
&lt;p&gt;记录自己的疑问，想法，看能否在老师讲课后得到答案&lt;/p&gt;
&lt;h5&gt;使用自己的‘逻辑连接词’将‘发现’故事化&lt;/h5&gt;
&lt;h6&gt;使用适合自己的逻辑连接词&lt;/h6&gt;
&lt;p&gt;&lt;img alt="逻辑连接词" src="http://pengyin-shan.com/images/2017/books/notebook/logicword.png"&gt;&lt;/p&gt;
&lt;h6&gt;与三种箭头搭配使用&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;展开、总结、强调&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="三种箭头" src="http://pengyin-shan.com/images/2017/books/notebook/logicarrow.png"&gt;&lt;/p&gt;
&lt;h5&gt;灵活使用右侧的‘概括总结区域’&lt;/h5&gt;
&lt;p&gt;本区域要记下‘要点’和‘疑问点’，锻炼‘概括能力’和‘提问能力’&lt;/p&gt;
&lt;h5&gt;理解力&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;清楚地区分‘能够理解的地方’和‘不理解的地方’&lt;/li&gt;
&lt;li&gt;对于‘不理解的地方’，立刻采取行动解决疑问，如询问老师，上网搜索，或是询问相关知识领域的人&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;有意识地总结概括&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;右侧的总结区域写‘最想说的’，‘最重要的结论’&lt;/li&gt;
&lt;li&gt;顶部区域&lt;strong&gt;用三点&lt;/strong&gt;概括这些重要内容&lt;/li&gt;
&lt;li&gt;即‘总之’，‘重要的是这三点’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="三点" src="http://pengyin-shan.com/images/2017/books/notebook/threepoint.png"&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;工作笔记本&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;工作笔记本是为了‘舍弃’&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;商务工作的基本任务就是从庞杂的信息中迅速找出与结果相关的重要信息并经整理得出结论。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;需要不断练习&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;代谢不良的笔记本&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;按时间记录，而不是一页一主题&lt;/li&gt;
&lt;li&gt;杂乱的‘视觉突出效果’&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;在记笔记的同时，应该养成快速思考‘这个信息是否有必要记在笔记本上’的习惯&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;关键是‘从论点开始’&lt;/h4&gt;
&lt;p&gt;正确设定论点：&lt;strong&gt;询问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工作的第一步是向对方详细确认“问题是什么”。通过彻底的‘询问’，找出对方的问题点在哪里，看出解决问题的方向。&lt;/p&gt;
&lt;p&gt;&lt;img alt="确认论点" src="http://pengyin-shan.com/images/2017/books/notebook/querenlundian.png"&gt;&lt;/p&gt;
&lt;h4&gt;确认论点的三分钟&lt;/h4&gt;
&lt;h4&gt;情况一：当接受要求时，养成‘用三分钟确认论点’的习惯&lt;/h4&gt;
&lt;p&gt;应主动用三分钟确认：
1. 对方的想法是什么
2. 想表达的论点和重点是什么
3. 希望制作的大致轮廓和大致印象是什么&lt;/p&gt;
&lt;h4&gt;情况二：在笔记本的标题区域预先写好“论点”后再交给部下&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;告诉部下所期望完成的报告书的大体轮廓&lt;/li&gt;
&lt;li&gt;确认部下是否明白的你希望传达的意思&lt;/li&gt;
&lt;li&gt;可将论点细化为分论点&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;

&lt;h3&gt;提案笔记本&lt;/h3&gt;
&lt;p&gt;&lt;img alt="左" src="http://pengyin-shan.com/images/2017/books/notebook/left.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="右" src="http://pengyin-shan.com/images/2017/books/notebook/left.png"&gt;&lt;/p&gt;
&lt;p&gt;笔记本的终极目标是‘提案笔记本’,即‘能得出可靠结论的提案笔记本’。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最重要的是学会逻辑性思维&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每天坚持‘按逻辑性思维记笔记’，可以充分锻炼逻辑思维。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设定论点&lt;/strong&gt;是重中之重。要按照&lt;em&gt;事实-》解释-》行动及结论&lt;/em&gt;的顺序记笔记。&lt;/p&gt;
&lt;h4&gt;要基于事实思考问题&lt;/h4&gt;
&lt;h5&gt;所有资料都要用‘黄金三分法’&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;将一种模式贯彻到底&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;白色书写板
- 上方：会议主题
- 左侧：事实区域
- 右侧：意见区域&lt;/p&gt;
&lt;h5&gt;用不同颜色区分‘事实’和‘意见’&lt;/h5&gt;
&lt;p&gt;&lt;img alt="事实意见" src="http://pengyin-shan.com/images/2017/books/notebook/factopinion.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事实：蓝色笔 - 用自己眼睛看到的&lt;/li&gt;
&lt;li&gt;意见：黑色笔 - 自己心里的意见&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;加入固有名词，数词，动词&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;使用文章记笔记&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固有名词：表示特定人物、地点、事件、时期等的名词 （东京大学，丰田）&lt;/li&gt;
&lt;li&gt;数词：用数字表示时间、年份、人数等 （1192年，7个习惯）&lt;/li&gt;
&lt;li&gt;动词：表示动作的词语。关键在于眼前能否浮现出做动作的画面 （听，交谈，发邮件）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;使用‘逻辑连接词’，‘箭头，‘方形’解决‘五个为什么’问题&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连问‘五个为什么’&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="箭头方形" src="http://pengyin-shan.com/images/2017/books/notebook/arrow.png"&gt;&lt;/p&gt;
&lt;h5&gt;右侧的‘行动区域’&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;以‘行动’为出口&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;外资咨询顾问在分析事实，思考问题，制作提案文件等所有阶段都是以思考‘如何给顾客提出一个能达到理想结果的具体实施方案’为基础的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;最佳行动是‘有画面感’和‘真实的’&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="最佳行动" src="http://pengyin-shan.com/images/2017/books/notebook/bestaction.png"&gt;&lt;/p&gt;
&lt;h5&gt;标题区域写出结论&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;少即是多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将结论提炼为一个信息&lt;/p&gt;
&lt;h3&gt;博弈笔记本&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;将笔记本变为‘向他人传递想法的工具’&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目标：笔记 = PPT&lt;/p&gt;
&lt;h4&gt;三个要点&lt;/h4&gt;
&lt;h5&gt;1. 提案笔记本 = 一页报纸新闻&lt;/h5&gt;
&lt;p&gt;报纸的头版布局与方格笔记本的记录方法完全一样&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标出题目&lt;/li&gt;
&lt;li&gt;附上图表&lt;/li&gt;
&lt;li&gt;写出文章&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;2. 信息为先 - 先传达结论，图表第二&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;不能一上来就画图&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="信息为先" src="http://pengyin-shan.com/images/2017/books/notebook/infofirst.png"&gt;&lt;/p&gt;
&lt;h5&gt;3. 从希望达到的‘心理效果’逆向选择图表 - 4种&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;图表1：之前/之后的对比效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关键：设定‘比较参照物’&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先判断想传达信息的关键点，即‘重点内容’，逐个列在纸页左侧&lt;/li&gt;
&lt;li&gt;每个内容写一个之前/之后的对比&lt;/li&gt;
&lt;li&gt;写出结论&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="对比效果" src="http://pengyin-shan.com/images/2017/books/notebook/contrast.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图表2：瀑布效果 - 一目了然&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人对‘落差’有反应&lt;/p&gt;
&lt;p&gt;&lt;em&gt;台阶图：将数据图表化并加上‘瀑布效果’&lt;/em&gt;： 企业年度财报&lt;/p&gt;
&lt;p&gt;关键：‘只强调重点’&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绘制一个变化前起点/变化后终点数据的图表&lt;/li&gt;
&lt;li&gt;使用台阶条形图表示这个图表 （台阶不要过多，3个最好）&lt;/li&gt;
&lt;li&gt;得出‘关键信息’和‘结论’&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="瀑布效果" src="http://pengyin-shan.com/images/2017/books/notebook/waterfall.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图表3：金字塔效果 - 制定计划/目标/方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人对‘顶点’有反应&lt;/p&gt;
&lt;p&gt;关键：‘从上到下’展开&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一层：明确目标&lt;/li&gt;
&lt;li&gt;第二层：实现目标的3个重点&lt;/li&gt;
&lt;li&gt;第三层： 完成三个重点应采取的行动&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="金字塔效果" src="http://pengyin-shan.com/images/2017/books/notebook/pyramid.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图表四：高楼效果 - 呈现故事&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;条形图展示‘高低落差’：人对‘高低差’很敏感&lt;/p&gt;
&lt;p&gt;关键：将焦点放在‘有意义的差距’上&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;画出条形图&lt;/li&gt;
&lt;li&gt;强调条形图中的差距&lt;/li&gt;
&lt;li&gt;在右侧写出具体解释&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="高楼效果" src="http://pengyin-shan.com/images/2017/books/notebook/building.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Chinese</category><category>Note Taking</category><category>Reading Notes</category><guid>http://pengyin-shan.com/posts/2017/book/chinese-use-graph-ruled-notebook.html</guid><pubDate>Wed, 08 Feb 2017 05:00:00 GMT</pubDate></item><item><title>(In Chinese) 自控力阅读摘抄 (Kindle 导出)</title><link>http://pengyin-shan.com/posts/2017/book/chinese-zi-kong-li-highlight.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h3&gt;自控力 (凯利•麦格尼格尔, Kelly McGonigal)&lt;/h3&gt;
&lt;p&gt;提高自控力的最有效途径在于，弄清自己如何失控、为何失控。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 154-155.
&lt;/p&gt;&lt;hr&gt;
于你打算拖到明天或是下辈子再做的事，你得学着“说要”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 230-231.
&lt;hr&gt;
要想在需要“说不”时“说不”，在需要“说好”时“说好”，你还得有第三种力量：那就是牢记自己真正想要的是什么。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 233-234.&lt;hr&gt;意志力就是驾驭“我要做”、“我不要”和“我想要”这三种力量
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 237-238.&lt;hr&gt;
现代人大脑里前额皮质的主要作用是让人选择做“更难的事”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 273-274.&lt;hr&gt;
”“我不要”和“我想要”三种力量（见图1-1）。前额皮质的左边区域负责“我要做”的力量。它能帮你处理枯燥、困难或充满压力的工作。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 276-278.&lt;hr&gt;
第三个区域位于前额皮质中间靠下的位置。它会记录你的目标和欲望，决定你“想要什么”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 282-282.&lt;hr&gt;
我们有能力去选择“更难的事”，也会有冲动去做“容易的事”。我们需要阻止这种冲动，但冲动本身也是一种想法。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 312-313.&lt;hr&gt;
由于我们的祖先曾得益于甜食，我们仍然保持嗜甜的本能。幸亏，自控系统能让我们离糖果罐远远的。即使当我们头脑发热的时候，我们也能克制冲动。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 323-324.&lt;hr&gt;
意志力挑战就是两个自我的对抗
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 332-332.&lt;hr&gt;
你可以给冲动的自我起个名字
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 333-334.&lt;hr&gt;
在他们占上风的时候，你就能意识到他们的存在。这还能帮你唤醒那个明智的自己，唤醒意志力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 335-335.&lt;hr&gt;
果没有了欲望，人们就会变得沮丧；如果没有了恐惧，人们就没法保护自己、远离伤害。在意志力挑战中获胜的关键，在于学会利用原始本能，而不是反抗这些本能
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 344-345.&lt;hr&gt;
自控力是人类最与众不同的特征之一。此外，人类还拥有自我意识。当我们做一件事的时候，我们能意识到自己在做什么，也知道我们为什么这样做。但愿我们还能知道，在做这件事情之前我们需要做些什么，这样我们就会三思而后行
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 353-355.&lt;hr&gt;
如果没有自我意识，自控系统将毫无用武之地。在作决定的时候，你必须意识到自己此刻需要意志力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 357-358.&lt;hr&gt;
注意力分散的人更容易向诱惑屈服
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 366-367.&lt;hr&gt;
如果你想有更强的自控力，就得有更多的自我意识。首先你得知道，什么样的决定需要意志力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 373-374.&lt;hr&gt;
至少选一天，把你作的决定都记下来。在这一天结束的时候，回想你作的决定，分析哪些有利于你实现目标，哪些会消磨你的意志。坚持记录你的决定，还有助于减少在注意力分散时作决定，同时增强你的意志力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 377-379.&lt;hr&gt;
用这一周的时间观察一下，你究竟是怎样屈服于冲动的。你甚至不用设定一个自控目标，只需要看看你能否及早意识到自己在做什么，什么样的想法、感受和情况最容易让你有冲动，想些什么或暗示什么最容易让你放弃冲动。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 392-394.&lt;hr&gt;
如果你每天都让大脑学数学，它就会越来越擅长数学。如果你让它忧虑，它就会越来越忧虑。如果你让它专注，它就会越来越专注
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 400-401.&lt;hr&gt;
你的大脑不仅会觉得越来越容易，也会根据你的要求重新塑型。就像通过锻炼能增加肌肉一样，通过一定的训练，大脑中某些区域的密度会变大，会聚集更多的灰质。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 401-403.&lt;hr&gt;
如果成年人坚持每天玩25分钟记忆力游戏，大脑里控制注意力和记忆力的区域就会连接得更紧密。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 404-405.&lt;hr&gt;
你可以在家里布满陷阱，来挑战“我不要”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 407-407.&lt;hr&gt;
你可以在家里布满陷阱，来挑战“我不要”。比如，你可以在放袜子的抽屉里放块巧克力，在锻炼用的自行车旁边放上一杯酒，把高中时喜欢的女孩照片贴在冰箱上。你还可以设置一些“我要做”的障碍。比如，你可以偶尔要求自己喝杯大麦茶、做20次双脚跳，或者提前一点纳税
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 407-409.&lt;hr&gt;
你可以在家里布满陷阱，来挑战“我不要”。比如，你可以在放袜子的抽屉里放块巧克力，在锻炼用的自行车旁边放上一杯酒，把高中时喜欢的女孩照片贴在冰箱上。你还可以设置一些“我要做”的障碍。比如，你可以偶尔要求自己喝杯大麦茶、做20次双脚跳，或者提前一点纳税。 你还可以做一件更简单、更无痛的事——冥想。神经学家发现，如果你经常让大脑冥想，它不仅会变得擅长冥想，还会提升你的自控力，提升你集中注意力、管理压力、克制冲动和认识自我的能力。一段时间之后，你的大脑就会变成调试良好的意志力机器。在你的前额皮质和影响自我意识的区域里，大脑灰质都会增多。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 407-412.&lt;hr&gt;
你还可以做一件更简单、更无痛的事——冥想。神经学家发现，如果你经常让大脑冥想，它不仅会变得擅长冥想，还会提升你的自控力，提升你集中注意力、管理压力、克制冲动和认识自我的能力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 410-411.&lt;hr&gt;
经过仅仅3个小时的冥想练习，他们的注意力和自控力就有大幅提高
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 416-416.&lt;hr&gt;
想让更多的血液流进前额皮质，就像提重物能让更多的血液流进肌肉一样。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 420-420.&lt;hr&gt;
专心呼吸是一种简单有效的冥想技巧，它不但能训练大脑，还能增强意志力。它能减轻你的压力，指导大脑处理内在的干扰（比如冲动、担忧、欲望）和外在的诱惑（比如声音、画面、气味）。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 423-425.&lt;hr&gt;
1．原地不动，安静坐好。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 427-428.&lt;hr&gt;
．注意你的呼吸
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 431-431.&lt;hr&gt;
。注意你的呼吸。吸气时在脑海中默念“吸”，呼气时在脑海中默念“呼”。当你发现自己有点走神的时候，重新将注意力集中到呼吸上。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 433-434.&lt;hr&gt;
3．感受呼吸，弄清自己是怎么走神的。 几分钟后，你就可以不再默念“呼”、“吸”了。试着专注于呼吸本身。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 435-437.&lt;hr&gt;
当你发现自己在想别的事情时，重新将注意力集中到呼吸上。如果你觉得很难重新集中注意力，就在心里多默念几遍“呼”和“吸”。这部分的训练能锻炼你的自我意识和自控能力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 438-440.&lt;hr&gt;
刚开始的时候，你每天锻炼5分钟就行。习惯成自然之后，请试着每天做10～15分钟。如果你觉得有负担，那就减少到5分钟
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 440-441.&lt;hr&gt;
你每天都会有一段固定的时间冥想
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 442-442.&lt;hr&gt;
冥想不是让你什么都不想，而是让你不要太分心，不要忘了最初的目标
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 455-456.&lt;hr&gt;
核心思想：意志力实际上是“我要做”、“我不要”和“我想要”这三种力量。它们协同努力，让我们变成更好的自己。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 463-464.&lt;hr&gt;
记录你的意志力选择。至少选一天，注意观察你做的关于意志力的决定。 　　·　5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。当你开始走神的时候，重新集中注意力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 470-472.&lt;hr&gt;
当你遇到真正的意志力挑战时，你的身体一定能感觉到。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 485-485.&lt;hr&gt;
其实你更应该问：“我的身体到底在做什么？”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 489-489.&lt;hr&gt;
只有在大脑和身体同时作用的瞬间，你才有力量克服冲动
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 489-490.&lt;hr&gt;
应激反应是一种管理能量的本能，这种本能决定了你将如何利用有限的体力和脑力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 520-521.&lt;hr&gt;
意志力，就是选择去做最重要的事情的能力，即便那是件困难的事
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 538-538.&lt;hr&gt;
你会意识到，奶酪蛋糕威胁了你的长期目标，因此你要不惜一切代价处理好这个威胁。这就是你的意志力本能。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 540-541.&lt;hr&gt;
但自控力告诉我们，问题出在我们自己身上，是我们的思想、欲望、情绪和冲动出了问题。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 548-549.&lt;hr&gt;
需要保护自己，也就是需要所谓的自控力。最有效的做法就是先让自己放慢速度，而不是给自己加速（比如应激反应）。“三思而后行”反应就是让你慢下来。当你意识到内在冲突的时候，大脑和身体会做出反应，帮助你放慢速度、抑制冲动。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 560-562.&lt;hr&gt;
这种自我监测系统分布在大脑的各个部分，连接着前额皮质中的自控区域，也连接着记录身体感觉、想法和情绪的其他区域。这个系统的重要功能之一就是阻止你作出错误的决定
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 565-566.&lt;hr&gt;
。但是，“三思而后行”反应并不会向肌肉输送能量，它只能调整大脑状态。你自控的时候，大脑的能量供应会增加，从而帮助前额皮质发挥意志力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 569-570.&lt;hr&gt;
心理学家把心率变异度称为身体的意志力“储备”，也就是一个衡量自控力的生理学指标。如果你的心率变异度高，那么无论在何种诱惑面前，你的意志力都会更强。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 599-600.&lt;hr&gt;
以植物为原材料的、未经加工的食物有助于提高心率变异度，垃圾食品则会降低心率变异度）或是住在哪里（糟糕的空气质量会降低心率变异度）。任何给你的身心带来压力的东西都会影响自控力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 602-604.&lt;hr&gt;
将呼吸频率降低到每分钟4～6次，也就是每次呼吸用10～15秒时间，比平常呼吸要慢一些
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 610-611.&lt;hr&gt;
放慢呼吸能激活前额皮质、提高心率变异度，有助于你的身心从压力状态调整到自控力状态。这样训练几分钟之后，你就会感到平静、有控制感，能够克制欲望、迎接挑战。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 611-613.&lt;hr&gt;
算你平常的呼吸频率，然后放慢呼吸，但不要憋气（这样只会让你更紧张）
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 614-615.&lt;hr&gt;
当呼吸频率下降到每分钟12次以下时，心率变异度就会稳步提高
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 617-617.&lt;hr&gt;
坚持这个练习能增加你的抗压性，帮助你作好意志力储备
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 618-618.&lt;hr&gt;
心率变异度训练项目”还能帮助警察、股票交易员和客户服务人员提高自控力，降低心理压力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 620-621.&lt;hr&gt;
对起步者来说，锻炼对意志力的效果是立竿见影的
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 644-645.&lt;hr&gt;
锻炼能提高心率变异度的基准线，从而改善自控力的生理基础
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 646-647.&lt;hr&gt;
炼身体像冥想一样，能让你的大脑更充实、运转更迅速。前额皮质则是最大的受益者。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 648-649.&lt;hr&gt;
改善心情、缓解压力的最有效的锻炼是每次5分钟，而不是每次几小时
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 652-652.&lt;hr&gt;
如果你觉得锻炼太累了，或是没有时间锻炼，那么不妨将锻炼当做恢复体能和意志力的方法。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 684-685.&lt;hr&gt;
天5分钟的冥想训练帮助患者恢复了睡眠，让他们每天的有效睡眠时间增加了1个小时，这就大大降低了他们旧病复发的概率。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 704-705.&lt;hr&gt;
从压力和自控力中恢复的最佳途径就是放松。放松，即便只放松几分钟，都能激活副交感神经系统，舒缓交感神经系统，从而提高心率变异度。它还能把身体调整到修复和自愈状态、提高免疫功能、降低压力荷尔蒙分泌
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 748-750.&lt;hr&gt;
想要激发这种放松反应，你需要躺下来，用枕头垫着膝盖，腿稍稍抬起（或者，你可以选择任何一个你觉得舒服的姿势）。闭上眼睛，做几次深呼吸，感觉你的腹部有起伏。如果你觉得身体某处很紧张，你可以有意识地挤压或收缩肌肉，然后就不要再去管它了
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 757-759.&lt;hr&gt;
持这种状态5～10分钟，试着享受这种除了呼吸什么都不用想的状态。如果你担心会睡着，那就先设定好闹钟
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 760-761.&lt;hr&gt;
压力是意志力的死敌
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 770-771.&lt;hr&gt;
研究人员发现，人们早晨的意志力最强，然后意志力随着时间的推移逐渐减弱。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 839-840.&lt;hr&gt;
一旦时间过长，注意力训练就不仅会分散注意力，还会耗尽身体的能量。控制情绪不仅会导致情绪失控，还会促使人们购买他们本不需要的东西。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 850-852.&lt;hr&gt;
未来的企业家把最重要的事放在第一位
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 877-878.&lt;hr&gt;
一天中唯一可能专注自己事业的时候就是在上班之前。所以，她开始用起床后的1个小时筹划自己的公司，而不是做其他的事
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 886-887.&lt;hr&gt;
如果你觉得自己没有时间和精力去处理“我想要”做的事，那就把它安排在你意志力最强的时候做。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 889-889.&lt;hr&gt;
低血糖人群更可能墨守成规，更不喜欢为慈善事业捐款或帮助陌生人。似乎能量不足让我们变得更糟糕。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 906-907.&lt;hr&gt;
大脑来说，能量就是金钱。资源丰富的时候，大脑会支出能量；当资源减少时，它就会保存能量。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 931-931.&lt;hr&gt;
资源不足时，大脑会选择满足当下的需求；资源充足时，大脑则会转向选择长期的投资
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 950-950.&lt;hr&gt;
好的方法是保证你的身体有足够的食物供应，这样能给你更持久的能量。大多数心理学家和营养学家推荐低血糖饮食，因为它能让你的血糖稳定。低血糖食品包括瘦肉蛋白、坚果和豆类、粗纤维谷类和麦片、大多数的水果和蔬菜。基本上，只要是看起来处于自然状态的食物，以及没有大量添加糖类、脂肪和化学物品的食物都行
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 966-969.&lt;hr&gt;
——让人们控制自己以前不会去控制的小事，以此来训练自控力肌肉
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 976-977.&lt;hr&gt;
在一些小事上持续自控会提高整体的意志力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 982-982.&lt;hr&gt;
增强“我不要”的力量：不随便发誓（或者不说某些口头禅）、坐下的时候不跷脚、用不常用的手进行日常活动，比如吃饭和开门。 &lt;em&gt;　增强“我想要”的力量：每天都做一些事（但不是你已经在做的事），用来养成习惯或不再找借口。你可以给母亲打电话、冥想5分钟，或是每天在家里找出一件需要扔掉或再利用的东西。 &lt;/em&gt;　增强自我监控能力：认真记录一件你平常不关注的事，可以是你的支出、饮食，也可以是你花在上网和看电视上的时间
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 998-1002.&lt;hr&gt;
下一次你觉得自己“疲惫”得没法自控的时候，试着挑战一下自己，挺过第一波疲惫感
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1067-1068.&lt;hr&gt;
1．如果挑战成功，你会收获什么？你个人会有什么回报？你会更健康、更幸福、更自由、更有钱，还是会更成功？ 2．如果挑战成功，还有谁会获益？肯定有人依赖于你，你的选择会影响到他们。你的行为会如何影响你的家人、朋友、同事、雇主或雇员、街坊邻居？你的成功会怎样帮到他们？ 3．如果你现在愿意做困难的事，那么一段时间后，这个挑战将会变容易。你能想象出，如果你在这个挑战中取得进步，你的生活会是什么样子，你自己会变成什么样子吗？如果你知道你还有更大的进步空间，现在的不适是不是变得值得了呢？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1082-1088.&lt;hr&gt;
简单说来，只要我们的思想中存在正反两方，好的行为就总是允许我们做一点坏事。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1238-1239.&lt;hr&gt;
种对补偿的渴望常常使我们堕落。因为我们很容易认为，纵容自己就是对美德最好的奖励。我们忘记了自己真正的目标，向诱惑屈服了
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1241-1242.&lt;hr&gt;
如果你自控的唯一动力就是成为一个足够好的人，那么每当你自我感觉良好的时候，你就会放弃自控。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1264-1265.&lt;hr&gt;
“道德许可”最糟糕的部分并不是它可疑的逻辑，而是它会诱使我们做出背离自己最大利益的事
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1265-1266.&lt;hr&gt;
最能带给我们动力的事是获得我们想要的，避开我们不想要的。将
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1269-1270.&lt;hr&gt;
如果你告诉自己，锻炼、存钱或戒烟是件正确的事，而不是件能让你达成目标的事，你就不太可能持之以恒了。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1273-1274.&lt;hr&gt;
不要把支持目标实现的行为误认为是目标本身。不是说你做了一件和你目标一致的事情，你就不会再面临危险了
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1292-1293.&lt;hr&gt;
大部分人认为，取得进步会刺激我们获得更大的成功。但心理学家知道，我们总是把进步当做放松的借口。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1298-1299.&lt;hr&gt;
我们把需要做的事当成了自己已经付出的努力，这会给我们错误的满足感
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1316-1317.&lt;hr&gt;
进步可以激励人，甚至可以提高未来的自控力，但前提是，你要把自己的行动当做努力完成目标的证据。换句话说，你要清楚自己做了什么，并盯紧自己的目标。为了实现目标，你要愿意付出更多。人们很容易接受这个观点，只不过我们一般不会这么想而已。在大多数情况下，我们总在寻找停下来的理由。 这两种态度
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1320-1323.&lt;hr&gt;
些被问到“你的目标有多坚定”的人则不会受到诱惑。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1326-1326.&lt;hr&gt;
记住我们为什么会拒绝诱惑，这是个很有效的办法。因为，当你面对自我放纵的诱惑时，记住这件事会改变我们的感觉。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1333-1334.&lt;hr&gt;
大脑会对能完成目标的可能性感到兴奋，它错把可能性当成真正完成了目标。为了能作出健康的选择，那个没有被满足的目标（及时行乐）便成了首选。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1356-1357.&lt;hr&gt;
我们想到未来的选择时，就会很容易犯下大错。我们不断期望明天能作出和今天不同的选择，但这种期望是错误的
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1365-1366.&lt;hr&gt;
我们错误地认为自己明天会比今天有更多的空闲时间。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1382-1382.&lt;hr&gt;
我们总是憧憬着未来，却没能看到今天的挑战。这让我们确信，未来我们会有足够的时间和精力去做今天想做的事。我们觉得，推迟到以后再做是理所应当的。我们相信，未来不仅能弥补今天没做的事，还能做到更多
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1390-1392.&lt;hr&gt;
你想改变某种行为的时候，试着减少行为的变化性，而不是减少那种行为。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1405-1405.&lt;hr&gt;
你明知道应该做一件事情却拖延不做时，不要问自己“我是想今天做还是明天做？”，而要问自己“我是不是想承担永远拖延下去的恶果？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1412-1413.&lt;hr&gt;
只要使你放纵的东西和使你觉得品德高尚的东西同时出现，就会产生光环效应
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1453-1454.&lt;hr&gt;
会不会因为关注一个事物最有益的品质，而允许自己沉溺于它？有没有什么“神奇词语”会给你放纵的许可？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1472-1473.&lt;hr&gt;
“光环效应”影响到你的意志力挑战时，你需要找到最具体的测量标准（比如卡路里、花费、消耗或浪费的时间），以此判断这个选择是否和你的目标相符。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1484-1485.&lt;hr&gt;
如果只按照“正确”和“错误”来判断做过的事，而不是牢记我们真正想要的东西，就会带来与目标相抵触的冲动，并允许我们做出妨碍自己的行为
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1526-1528.&lt;hr&gt;
当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事。为了能更好地自控，我们需要忘掉美德，关注目标和价值观。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1531-1532.&lt;hr&gt;
善与恶：当你的意志力挑战成功时，你会不会告诉自己你很“好”，然后允许自己做一些“坏”事？ 　　·　你是否在向明天赊账？你是不是告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？光环效应：你是不是只看到了坏东西好的一面，如折扣省钱、零脂肪、保护环境？ 　　·　你觉得自己是谁？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还是需要被控制的你？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1534-1538.&lt;hr&gt;
明天和今天毫无区别。当你想改变行为的时候，试着减少行为的变化性，而不是减少某种行为。 　　·　取消许可，牢记理由。下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想你做“好”事的原因，而不是你应不应该得到奖励。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1540-1543.&lt;hr&gt;
具有不确定性的“得分”和“升级”会让你的多巴胺神经元不停燃烧，让你像是被粘在了椅子上一样。每个人对此可能有不同的看法，有人会觉得这增加了
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1664-1665.&lt;hr&gt;
把我们最不喜欢的东西“多巴胺化”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1767-1767.&lt;hr&gt;
如果有什么事让你觉得很不愉快，所以你总是拖延着不去做，你能不能把它和能让多巴胺神经元燃烧的事联系在一起，从而促使自己去做呢？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1791-1793.&lt;hr&gt;
当你理解了所谓的“奖励”到底给自己什么感觉时，你就能作出最明智的决定，知道该怎样“奖励”自己了。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1836-1837.&lt;hr&gt;
当人们注意到奖励的承诺不过是假象时，魔咒就解开了。如果你强迫你的大脑，让它一边期待着奖励——获得快乐、幸福和满足，结束痛苦和压力，一边真切地感受现实状况，那么大脑最终会调整它的期望值
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1859-1860.&lt;hr&gt;
如果我们想拥有自控力，就需要区分让我们的生活有意义的真实奖励，和让我们分散精力、上瘾的虚假奖励。学会区分这两种奖励，也许是我们能做到的最好的事了。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1910-1912.&lt;hr&gt;
们的大脑错把奖励的承诺当做快乐的保证，所以，我们会从不可能带来满足的事物中寻找满足感。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1920-1921.&lt;hr&gt;
想得到快乐是一种健康的生存机制。它和远离危险一样，都是人类的本能。但是，我们要选择一种好的缓解压力的方式
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1957-1958.&lt;hr&gt;
通常，我们缓解压力的办法反而会让我们更有压力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1959-1959.&lt;hr&gt;
压力包括愤怒、悲伤、自我怀疑、焦虑等消极情绪，会使你的大脑进入寻找奖励的状态。只要你的大脑和奖励的承诺联系起来，你就会渴望得到那个“奖励”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1976-1978.&lt;hr&gt;
压力把我们引向了错误的方向，让我们失去了理性，被本能支配了。这就是压力和多巴胺“强强联手”的力量
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1985-1986.&lt;hr&gt;
奖励的承诺和缓解压力的承诺会导致各种各样不合逻辑的行为
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1988-1988.&lt;hr&gt;
在每个案例中，“想要更快乐”这个目标总是战胜了自控力的目标。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1994-1994.&lt;hr&gt;
最有效的解压方法包括：锻炼或参加体育活动、祈祷或参加宗教活动、阅读、听音乐、与家人朋友相处、按摩、外出散步、冥想或做瑜伽，以及培养有创意的爱好。最没效果的缓解压力的方法则包括：赌博、购物、抽烟、喝酒、暴饮暴食、玩游戏、上网、花两小时以上看电视或电影。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 1999-2002.&lt;hr&gt;
真正能缓解压力的不是释放多巴胺或依赖奖励的承诺，而是增加大脑中改善情绪的化学物质，如血清素、γ-氨基丁酸和让人感觉良好的催产素
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2003-2004.&lt;hr&gt;
有没有什么东西能提醒面对压力的你，到底什么才能让你感到更快乐？在你感到压力之前，你能不能先想出一些鼓励自己的方法
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2020-2021.&lt;hr&gt;
很多人来说，自我谅解听起来更像是为自己找借口，只会引起更严重的自我放纵
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2141-2142.&lt;hr&gt;
自我批评会降低积极性和自控力，而且也是最容易导致抑郁的因素。它不仅耗尽了“我要做”的力量，还耗尽了“我想要”的力量。相反，自我同情则会提升积极性和自控力，比如，在压力和挫折面前支持自己、对自己好一些
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2152-2154.&lt;hr&gt;
在个人挫折面前，持自我同情态度的人比持自我批评的态度的人更愿意承担责任。他们也更愿意接受别人的反馈和建议，更可能从这种经历中学到东西
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2161-2162.&lt;hr&gt;
你最紧迫的目标是安抚这种感觉，而不是吸取教训。这就是为什么自我批评的策略反而会削弱自控力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2167-2167.&lt;hr&gt;
每个人都会犯错误，都会遭遇挫折。既然失败无法避免，更重要的就是我们如何应对失败。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2170-2171.&lt;hr&gt;
．你感觉如何？当你想到挫折时，花一点时间关注并描述你此刻的感觉。你现在情绪如何？你有什么感觉？你是否记得自己失败后的第一感觉？你会怎样描述那种感觉
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2174-2176.&lt;hr&gt;
我们不再觉得自己是个犯错的人，只觉得自己能变成一个完全不同的人。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2209-2209.&lt;hr&gt;
发誓改变会让我们充满希望。我们喜欢想象改变后的生活，幻想改变后的自己。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2210-2210.&lt;hr&gt;
当我们第一次面对挫折时，失望就会取代最初决定改变时的良好感觉。没能达到预期目标会再度引发曾经的罪恶感、抑郁和自我怀疑，而承诺改变的情绪慰藉作用也消失了
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2218-2219.&lt;hr&gt;
对大多数人来说，下决心是改变过程中最容易的环节，但之后就越来越难了——作出改变需要你控制自己，在想说“要”时说“不”，在想说“不”时说“要”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2223-2225.&lt;hr&gt;
你会通过幻想未来的自己来改善现在的心情，而不是采取实际行动改善自己的行为吗？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2236-2237.&lt;hr&gt;
乐观给我们动力，但少许的悲观能帮我们走向成功。研究发现，如果能预测自己什么时候、会如何受到诱惑和违背承诺，你就更有可能拥有坚定的决心。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2238-2239.&lt;hr&gt;
把想象中的意志力失效变成现实中的意志力成功。想一想你要采取哪些具体行动来坚定自己的决心。你需要回忆一下自己的动力吗？需要远离诱惑吗？需要找朋友帮忙吗？需要用你学过的其他意志力策略吗？当你头脑中有了一个具体策略后，想象一下你正在这样做，再想象一下这会有什么感觉。想象自己成功了，让这种想象给你自信，相信自己为了完成目标会不惜一切。 用这种方法预见失败其实是一种自我同情的方式，而不是自我怀疑的方式。当你真的受到诱惑的时候，你就能有所准备，能将自己的计划付诸实践。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2243-2248.&lt;hr&gt;
当你面临巨大的压力时，尝试一种有效的解压方法，例如锻炼身体或参加体育活动、祈祷或参加宗教活动、阅读、听音乐、花时间和家人朋友在一起、按摩、外出散步、冥想或做瑜伽，以及培养其他有创造性的爱好
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2263-2265.&lt;hr&gt;
失败的时候，请原谅自己。面对自己的挫折，持同情自我的态度，以免罪恶感让你再次放弃抗争。·　乐观的悲观主义者更有可能成功。预测你什么时候、会怎样受到诱惑和
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2265-2267.&lt;hr&gt;
经济学家称之为“延迟折扣”。也就是说，等待奖励的时间越长，奖励对你来说价值越低。很小的延迟就能大幅降低你感知到的价值
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2301-2302.&lt;hr&gt;
但当我们和诱惑正面交锋的时候，我们只愿意选择短期的、即时的奖励，这种欲望是无可抵挡的。这就带来了“有限意志力”。也就是说，到我们真的需要自控力之前，我们一直拥有自控力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2321-2322.&lt;hr&gt;
想获得一个冷静明智的头脑，我们就需要在所有诱惑面前安排10分钟的等待时间。如果10分钟后你仍旧想要，你就可以拥有它。但在10分钟之内，你一定要时刻想着长远的奖励，以此抵抗诱惑。如果可以的话，你也可以创造一些物理上（或视觉上）的距离。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2349-2351.&lt;hr&gt;
你打的折是多是少，很大程度上决定了你长期的健康状况和你获得的成功
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2373-2374.&lt;hr&gt;
如果现在比未来更重要，那么就没理由去延迟满足感。想摆脱这种心态，我们就必须找到一种方法，让未来变得更重要
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2393-2394.&lt;hr&gt;
原因之一是，大部分人想避免失败。也就是说，我们确实不想失去已经得到的东西。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2400-2401.&lt;hr&gt;
你会找到更多的理由，解释为什么你先想到的奖励是合理的
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2404-2405.&lt;hr&gt;
无论面对什么样的诱惑，你都可以利用以下方式抵抗即时的满足感。 1．当你受到诱惑要做与长期利益相悖的事时，请想象一下，这个选择就意味着，你为了即时的满足感放弃了更好的长期奖励。 2．想象你已经得到了长期的奖励。想象未来的你正在享受自控的成果。 3．然后扪心自问：你愿意放弃它，来换取正在诱惑你的短暂快感吗？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2409-2413.&lt;hr&gt;
要实现自己的目标，我们就必须限制自己的选择，他把这称为“预先承诺”
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2438-2439.&lt;hr&gt;
谢林把理性的自我和受诱惑的自我看做战争的两方。两方有非常不同的目标：理性的自我设定了需要遵守的做法，受诱惑的自我则常常在最后关头决定改变做法。如果受诱惑的自我能为所欲为的话，最终的结果只会伤及自己
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2441-2443.&lt;hr&gt;
1．作好拒绝诱惑的准备。在未来的自我被诱惑蒙蔽之前，提前作出选择
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2463-2464.&lt;hr&gt;
2．让改变偏好变得更难。就像科尔蒂斯“破釜沉舟”一样，不要让自己轻易屈服于诱惑。在家里或办公室里摆脱诱惑。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2466-2467.&lt;hr&gt;
这些做法都不能保证你绝对不会改变想法，但至少能让作出改变变得很困难
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2468-2469.&lt;hr&gt;
3．激励未来的自己。如果你在用胡萝卜或大棒督促自己获得健康和快乐，那么你不用觉得羞愧
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2470-2471.&lt;hr&gt;
找一个方法，让你得到即时快感时付出更大的代价。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2472-2473.&lt;hr&gt;
这种方法之所以有效，是因为有人对参与者负责任，支持他们实现目标。有没有这么一个人，你能和他分享你的目标，能在你感觉受诱惑时寻求他的帮助？
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2495-2496.&lt;hr&gt;
我们把未来的自己理想化了，希望未来的自己可以做到现在的自己做不了的事
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2510-2510.&lt;hr&gt;
当我们到了未来，理想中“未来的自己”却不见了，最后作决定的还是毫无改变的曾经的自己
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2530-2530.&lt;hr&gt;
大脑会把未来的自己当成别人，这种习惯对自控力影响极大
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2556-2556.&lt;hr&gt;
人们之所以不给未来的自己储蓄，是因为存钱就像把钱给了陌生人。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2573-2574.&lt;hr&gt;
如果我们感觉和未来的自己毫无关联，就会忽略自己行为的后果。相反，如果我们觉得和未来的自己联系紧密，就会保护自己不被最糟糕的冲动所伤
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2602-2603.&lt;hr&gt;
1．创造一个未来的记忆。德国汉堡-埃普多夫中心医科大学的神经科学家研究发现，想象未来可以让人延迟满足感。你甚至不需要去想延迟满足感带给未来的回报，只要设想一下未来就行
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2607-2609.&lt;hr&gt;
2．给未来的自己发条信息。FutureMe. org的创始人发明了一种给未来的自己发邮件的方法。从2003年起，他们就收了大量人们写给未来自己的电子邮件。他们会按作者选择的未来的某个时间点，把这些邮件发出去。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2612-2614.&lt;hr&gt;
3．想象一下未来的自己。研究发现，想象未来的自己能增强你现在的意志力
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2618-2619.&lt;hr&gt;
一些人没法及时享乐。他们用工作、美德或未来的幸福不断地推迟快感。但最终，他们会为自己的决定感到后悔
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2627-2628.&lt;hr&gt;
等待10分钟。在诱惑面前强制安排10分钟的等待时间。在这10分钟里，一定要时刻想着长远的奖励，抵制住诱惑。 　　·　降低你的折扣率。当你受到诱惑，要做和长期利益相悖的事情时，请想一想，这个选择意味着，你为了即时的满足感放弃了更好的长期奖励。 　　·　预先对未来的自己作出承诺。作好拒绝诱惑的准备，让改变偏好变得更难，用奖励或威胁来激励未来的自己。 　　·　预见未来的自己。创造一个未来的记忆，给未来的自己发条信息，想象一下未来的自己。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2670-2674.&lt;hr&gt;
这三种形式都会使我们的社会脑（social brain）出现意志力失效。第一种形式是无意识的模仿
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2753-2753.&lt;hr&gt;
大脑让我们误入迷途的第二种形式是传染情绪。我们发现，自己的镜像神经元会对别人的疼痛产生反应，也会对别人的情绪产生反应。正因为如此，同事的坏心情会变成我们的坏心情——
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2764-2765.&lt;hr&gt;
我们不总是感染别人的目标。有时，看着别人屈服于诱惑，反而能增强我们的自控力。当你坚定了一个目标时（比如减肥），还要意识到你有一个与之冲突的目标（比如吃个比萨）
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2809-2810.&lt;hr&gt;
当你面对别人的目标时，增强免疫系统的最佳途径就是：在每天刚开始的时候花几分钟想想自己的目标，想想你会怎么受到诱惑，想要改变自己的目标。这就像疫苗一样，能保护你不受别人的感染。回想自己的目标能强化这个目标，避免你感染他人的目标。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2813-2815.&lt;hr&gt;
质疑它的最好方法就是找到一群人，他们正在做你渴望做到的事。找到一个新的“群体”并加入进去。这个“群体”可能是一个支援小组、一个班级、一个本地俱乐部、一个网络社区，甚至是一份支持你实现目标的杂志。置身于和你共享承诺与目标的人们当中，会让你觉得自己的目标才是社会规范。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2945-2948.&lt;hr&gt;
“自豪”能起作用的原因之一是，它把人们的思维从蛋糕上转移开了。相反，羞愧则会触发那些可以预期的快感，被试者描述了很多和诱惑相关的想法，
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2981-2983.&lt;hr&gt;
表现出内疚感会减少心率的变化，降低意志力的生理储备。反之，自豪感会保持甚至增加这种储备。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2983-2984.&lt;hr&gt;
为了让自豪感发挥作用，我们必须认为别人都在监视自己，或我们有机会向别人报告自己的成功
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 2985-2985.&lt;hr&gt;
把“我不要”的力量用在涉及思想、情感的内心世界，它就会失效。当深入内心世界时，我们会发现，我们需要给自控一个全新的定义，给放弃自控留出一点空间来
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 3077-3078.&lt;hr&gt;
无论你想摆脱哪种恐惧或欲望，它们最后都会变得更让人信服，更引人注目
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 3123-3123.&lt;hr&gt;
1．承认自己脑海中的欲望，以及渴望某种事物的感觉。 2．不要马上试着转移注意力或与之争论。接受这种想法或感觉，提醒自己“白熊”现象和“反弹”理论。 3．退一步考虑，意识到这种想法和感觉并不受你控制，但你可以选择是否将这些想法付诸实践。 4．记住你的目标，提醒自己预先作出的承诺。正如那些学生会提醒自己，他们答应过不偷吃巧克力。
Kelly McGonigal), 自控力 (凯利•麦格尼格尔 [Kindle Edition]. loc. 3294-3298.&lt;hr&gt;&lt;/div&gt;</description><category>Chinese</category><category>Reading Notes</category><category>Willpower</category><guid>http://pengyin-shan.com/posts/2017/book/chinese-zi-kong-li-highlight.html</guid><pubDate>Fri, 20 Jan 2017 05:00:00 GMT</pubDate></item><item><title>Web Worker Study Note</title><link>http://pengyin-shan.com/posts/2016/JavaScript/web-worker-study-note.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h2&gt;Reference List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.html5rocks.com/en/tutorials/workers/basics/"&gt;The Basics with Web Workers&lt;/a&gt; written by &lt;em&gt;Eric Bidelman&lt;/em&gt;, &lt;em&gt;www.html5rocks.com&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;Using Web Workers&lt;/a&gt; by &lt;em&gt;MDN&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Web worker create a extra thread. The JS file running by this work will run through this thread.&lt;/p&gt;
&lt;p&gt;There are some special things to be noticed when using web worker:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Instead of &lt;code&gt;window&lt;/code&gt;, the JS file will run in another global context. So make sure using &lt;code&gt;self&lt;/code&gt; to get current gloabl context in a worker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You cannot directly manipulate DOM inside a web worker. However some items are still available, like &lt;code&gt;WebSockets&lt;/code&gt; or &lt;code&gt;IndexedDB&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The way to communicate between main thread and web worker thread is using &lt;code&gt;messages&lt;/code&gt;. To send message, use &lt;code&gt;postMessage()&lt;/code&gt; method. &lt;code&gt;onmessage&lt;/code&gt; event handler or &lt;code&gt;message&lt;/code&gt; event listener is used to receive message. Workers may use &lt;code&gt;XMLHttpRequest&lt;/code&gt; for network I/O.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;During this process, the data passed between main thread and web worker is &lt;strong&gt;copied&lt;/strong&gt; instead of shared.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are two workers: &lt;code&gt;dedicated worker&lt;/code&gt; and &lt;code&gt;shared worker&lt;/code&gt;. Dedicated worker is only accessible from the script that first spawned it. Shared worker can be accessed from multiple scripts.&lt;/p&gt;
&lt;h2&gt;Dedicated Worker&lt;/h2&gt;
&lt;p&gt;The best practice is to wrap web worker code in following if loop:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//Add Web Worker Code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Message being sent/received can be a &lt;code&gt;string/array&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt; object. &lt;code&gt;JSON&lt;/code&gt; is supported by most modern browers.&lt;/p&gt;
&lt;h3&gt;Basics&lt;/h3&gt;
&lt;p&gt;Basic operations are: &lt;strong&gt;create&lt;/strong&gt;, &lt;strong&gt;post and receive message&lt;/strong&gt;, &lt;strong&gt;handler errors&lt;/strong&gt; and &lt;strong&gt;terminate works&lt;/strong&gt;. see code below:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//main thread&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'worker.js'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Declare new web worker&lt;/span&gt;

&lt;span class="nx"&gt;myWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'onError'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//main thread response to message from worker.js&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//main thread pass data to worker&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Terminate worker from main thread&lt;/span&gt;

&lt;span class="c1"&gt;//Error Handle Function. Notice three attributes for error event&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;
&lt;span class="c1"&gt;//worker.js&lt;/span&gt;
&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="c1"&gt;//worker receive data from main thread and return it back. Notice self is used here&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Stop this work from worker thread&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Workers can import scripts and use them:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;importScripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'one.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'two.js'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;If execution fails, &lt;code&gt;NETWORK_ERROR&lt;/code&gt; will be thrown out. However, function declarations after &lt;code&gt;importScripts()&lt;/code&gt; will still work because they are hoisted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Data Passing&lt;/h3&gt;
&lt;p&gt;When web worker passing data, the data is always serialized on one hand and de-serialized on the other hand.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Main thread and worker thread &lt;strong&gt;do not share the same instance&lt;/strong&gt;, so the end result is &lt;strong&gt;duplicated&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Shared Worker&lt;/h2&gt;
&lt;h3&gt;Basics&lt;/h3&gt;
&lt;p&gt;Shared worker is accessible by multiple scripts.&lt;/p&gt;
&lt;p&gt;Similar to dedicated worker, shared work can be declared by statement like &lt;code&gt;var myWorker = new SharedWorker("worker.js");&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Port&lt;/h3&gt;
&lt;p&gt;Shared worker communicate via a &lt;code&gt;port&lt;/code&gt; object. Scripts can communicate with workers in a opened port.&lt;/p&gt;
&lt;p&gt;Port can be started by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use a &lt;code&gt;onmessage&lt;/code&gt; event handler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead above if you have a &lt;code&gt;message&lt;/code&gt; event listener, then use &lt;code&gt;start()&lt;/code&gt; function to start explicitly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;myWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//main thread&lt;/span&gt;
&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//If a worker thread has port variable, call this line in worker&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Message&lt;/h3&gt;
&lt;p&gt;For shared worker, &lt;code&gt;postMessage()&lt;/code&gt; should be used from &lt;code&gt;port&lt;/code&gt; object:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//main.js&lt;/span&gt;
&lt;span class="nx"&gt;testpart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onchange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;myWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello world'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;myWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//worker.js&lt;/span&gt;
&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connect'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//Get first port&lt;/span&gt;
    &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello world back'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//port.start();&lt;/span&gt;
    &lt;span class="c1"&gt;//If onmessage event listener is not used, needs to start port here&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Examples&lt;/h2&gt;
&lt;h3&gt;Compute in Background&lt;/h3&gt;
&lt;p&gt;This example is from MDN, counting fibonacii in worker thread:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//main.js&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fibonacci.js"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Got: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Worker error: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"5"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/********************/&lt;/span&gt;

&lt;span class="c1"&gt;//fobonacii.js&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resultReceiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="c1"&gt;//After result returned, push to results array. This array has two elements: previous result and newly returned item&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;errorReceiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/*Recursively create new worker thread and counting 4, 3, 2, 1, then return back to previous worker */&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fibonacci.js"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resultReceiver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;errorReceiver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;A very clean/simple example from html5rocks.com&lt;/h3&gt;
&lt;p&gt;This example cerate clean function to handle difference cases. Functions can be added to attribute of an object to be more organized.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//main.js&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'cmd'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'msg'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Hi'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Calling worker.terminate() from this script would also stop the worker.&lt;/span&gt;
    &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'cmd'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'msg'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Bye'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;unknownCmd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'cmd'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'foobard'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'msg'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'???'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'doWork2.js'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//worker.js&lt;/span&gt;
  &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WORKER STARTED: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WORKER STOPPED: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'. (buttons will no longer work)'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Terminates the worker.&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Unknown command: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Web Worker</category><guid>http://pengyin-shan.com/posts/2016/JavaScript/web-worker-study-note.html</guid><pubDate>Wed, 17 Aug 2016 04:00:00 GMT</pubDate></item><item><title>Frond End Data Storage</title><link>http://pengyin-shan.com/posts/2016/Front%20End/front-end-data-storage.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h2&gt;Reference List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.w3schools.com/html/html5_webstorage.asp"&gt;HTML Local Storage&lt;/a&gt; from &lt;em&gt;w3schools.com&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;Window.localStorage&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"&gt;Window.sessionStorage&lt;/a&gt; from MDN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/javascript/javascript_cookies.htm"&gt;JavaScript and Cookies&lt;/a&gt; from &lt;em&gt;Tutorialspoint.com&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/html5/html5_web_storage.htm"&gt;HTML5 - Web Storage&lt;/a&gt; from &lt;em&gt;Tutorialspoint.com&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cookie&lt;/h2&gt;
&lt;p&gt;Cookie is the most efficient method of remembering and tracking small amount of information in client side.&lt;/p&gt;
&lt;h2&gt;Web Storage&lt;/h2&gt;
&lt;p&gt;Web storage is for large amount of data.&lt;/p&gt;
&lt;p&gt;So far, Web storage is widely supported by most browsers, from IE8 to most of mobile browser(except Opera Mini). So when I needs to store a large amount of data with capability requirement for most browsers, this is currently my best choice.&lt;/p&gt;
&lt;p&gt;There are two parts of web storage: &lt;strong&gt;local storage&lt;/strong&gt; and &lt;strong&gt;session storage&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Data for web storage are passed by &lt;code&gt;key-value&lt;/code&gt; pair.&lt;/p&gt;
&lt;h3&gt;Local Storage&lt;/h3&gt;
&lt;p&gt;Compared to session storage, local storage has &lt;strong&gt;no expiration time&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;localStorage&lt;/code&gt; object can be used directly. Like &lt;code&gt;window.localStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To remove a key-value pair, use &lt;code&gt;remove('key')&lt;/code&gt;, like &lt;code&gt;localStorage.remove('lastname')&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;to clear all key-value pair, use &lt;code&gt;localStorage.clear()&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;getItem&lt;/code&gt; and &lt;code&gt;setItem&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;getItem('key','value') and setItem('key','value')&lt;/code&gt; is used to get/set data item.&lt;/p&gt;
&lt;p&gt;Here is an example from W3CSchool:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Store&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Retrieve&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Use direct attribute&lt;/h5&gt;
&lt;p&gt;Another way is to assign attribute to &lt;code&gt;localStorage&lt;/code&gt; object:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Store&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Retrieve&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Session Storage&lt;/h3&gt;
&lt;p&gt;Following a difference between local storage and session storage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For session storage, data are lost after &lt;strong&gt;session end&lt;/strong&gt;. i.e. data are delete after use close a browser window/tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For session storage, opening a page in &lt;em&gt;new tab or window&lt;/em&gt; will cause a new session to be &lt;strong&gt;initiated&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;p&gt;The way to use session storage is the same as the way to use local storage, except the object is now &lt;code&gt;window.sessionStorage&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>HTML5</category><category>JavaScript</category><guid>http://pengyin-shan.com/posts/2016/Front%20End/front-end-data-storage.html</guid><pubDate>Tue, 16 Aug 2016 04:00:00 GMT</pubDate></item><item><title>SVG Study Note</title><link>http://pengyin-shan.com/posts/2016/Front%20End/svg-study-note.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h2&gt;Reference List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(Chinese) &lt;a href="http://waylau.com/svg-viewport-view-box/?utm_source=tuicool&amp;amp;utm_medium=referral"&gt;SVG Viewport and View Box&lt;/a&gt; written by &lt;em&gt;Way Lau&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Chinese) &lt;a href="http://www.zhangxinxu.com/wordpress/2014/08/svg-viewport-viewbox-preserveaspectratio/"&gt;Understand viewport, viewVox, preserveAspectRatio in SVG&lt;/a&gt; by &lt;em&gt;zhangxinxu&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;viewport&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;viewport&lt;/code&gt; creates a new axis inside svg area. It provides a new scale inside svg.&lt;/p&gt;
&lt;p&gt;It has two attribute: &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. These two attributes is defined as &lt;strong&gt;unit&lt;/strong&gt;, such as &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;px&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt;, depends on css setting. The default unit is &lt;code&gt;px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"500"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- A svg area with width of 500 unit, height of 300 unit--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;&lt;code&gt;viewbox&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;viewbox&lt;/code&gt; is a way of scaling svg view-able space. it has four attributes: &lt;code&gt;x-position&lt;/code&gt;, &lt;code&gt;y-position&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;. &lt;strong&gt;Note a positive value in y-position meaning counting down from start point.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The use of &lt;code&gt;viewbox&lt;/code&gt; is to expand item to full svg area, following the scale defined in &lt;code&gt;viewbox&lt;/code&gt;. For example, &lt;code&gt;&amp;lt;svg width="500" height="300" viewbox="0 0 150 300"&amp;gt;&amp;lt;/svg&amp;gt;&lt;/code&gt; means define a area width a width of 150 and height of 300 from zero-point, then &lt;strong&gt;expand it to full svg (width 500 height 300)&lt;/strong&gt;. Everything inside viewbox will be also re-scaled.&lt;/p&gt;
&lt;p&gt;A great demo (Chinese) created by &lt;strong&gt;zhangxinyu&lt;/strong&gt; can be found &lt;a href="http://www.zhangxinxu.com/study/201408/svg-viewbox-explain.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/frontend/viewbox.gif &lt;/p&gt;
&lt;h2&gt;&lt;code&gt;preserveAspectRatio&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;preserveAspectRatio&lt;/code&gt; has two attributes: &lt;code&gt;how viewBox align with viewport&lt;/code&gt;, &lt;code&gt;ratio of height and width&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first attribute has two parts: &lt;code&gt;x alignment&lt;/code&gt; and &lt;code&gt;y alignment&lt;/code&gt;. Options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xMin&lt;/code&gt;: &lt;code&gt;viewport&lt;/code&gt; and &lt;code&gt;viewbox&lt;/code&gt; align on left edge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xMid&lt;/code&gt;: &lt;code&gt;viewport&lt;/code&gt; and &lt;code&gt;viewbox&lt;/code&gt; align on center of x-axis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xMax&lt;/code&gt;: &lt;code&gt;viewport&lt;/code&gt; and &lt;code&gt;viewbox&lt;/code&gt; align on right edge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;YMin&lt;/code&gt;: &lt;code&gt;viewport&lt;/code&gt; and &lt;code&gt;viewbox&lt;/code&gt; align on top edge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;YMid&lt;/code&gt;: &lt;code&gt;viewport&lt;/code&gt; and &lt;code&gt;viewbox&lt;/code&gt; align on middle of y-axis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;YMax&lt;/code&gt;: &lt;code&gt;viewport&lt;/code&gt; and &lt;code&gt;viewbox&lt;/code&gt; align on bottom edge&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, a full option for first attribute is something like &lt;code&gt;xMinYMid&lt;/code&gt; or &lt;code&gt;xMaxYMax&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second attribute has following option:&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;meet&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;viewbox&lt;/code&gt; following its ratio, even the graph is out of svg area.&lt;/p&gt;
&lt;p&gt;Example Code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"400"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 200 300"&lt;/span&gt; &lt;span class="na"&gt;preserveAspectRatio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"xMinYMin meet"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"border:1px solid #cd0000;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;rect&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#cd0000"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Result from code above. Notice the rectangle is still in &lt;em&gt;2:3&lt;/em&gt; ratio for &lt;em&gt;width:height&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/frontend/ratio-meet &lt;/p&gt;
&lt;h3&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Keep current ratio, while expanding &lt;code&gt;viewbox&lt;/code&gt; till &lt;strong&gt;short slide&lt;/strong&gt; of &lt;code&gt;viewport&lt;/code&gt; is &lt;strong&gt;filled&lt;/strong&gt; (Even though the inner shape is smaller width/height than svg, the short side of svg is still be filled).&lt;/p&gt;
&lt;p&gt;Result from code above. Note &lt;em&gt;height&lt;/em&gt; is filled first, since it's the shorter side:&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/frontend/ratio-slice &lt;/p&gt;
&lt;h3&gt;&lt;code&gt;none&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Shapes inside &lt;code&gt;viewbox&lt;/code&gt; is hardly defined by its own width and height, without following any ratio.&lt;/p&gt;
&lt;p&gt;Result from code above. :&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/frontend/ratio-slice &lt;/p&gt;
&lt;p&gt;If no &lt;code&gt;preserveAspectRatio&lt;/code&gt; is market, following result should be seen:&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/frontend/ratio-no &lt;/p&gt;
&lt;p&gt;Also see this &lt;a href="http://www.zhangxinxu.com/study/201408/svg-preserveaspectratio-meet-slice-none.html"&gt;demo&lt;/a&gt; created by &lt;em&gt;zhangxinxu&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Graph</category><guid>http://pengyin-shan.com/posts/2016/Front%20End/svg-study-note.html</guid><pubDate>Mon, 01 Aug 2016 04:00:00 GMT</pubDate></item><item><title>Quick Note about Box-Sizing/Box-Shadow</title><link>http://pengyin-shan.com/posts/2016/Front%20End/quick-note-about-box-box-shadow.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h2&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;box-sizing&lt;/code&gt; is used to tell the browser what the sizing properties (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;) should include.&lt;/p&gt;
&lt;p&gt;It has following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;content-box&lt;/code&gt;: Default. &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt; and &lt;code&gt;margin&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; included in counting &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;height&lt;/code&gt; (include &lt;code&gt;min-/max-&lt;/code&gt;) properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;border-box&lt;/code&gt;: the &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;height&lt;/code&gt; properties &lt;strong&gt;includes&lt;/strong&gt; content, &lt;code&gt;padding&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt;, but &lt;strong&gt;not include&lt;/strong&gt; &lt;code&gt;margin&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;initial&lt;/code&gt;/&lt;code&gt;inherit&lt;/code&gt;: set to default value/inherit from its parent&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The website &lt;a href="http://www.cssmatic.com/box-shadow"&gt;cssmatic&lt;/a&gt; contains a very good box-shadow generator to generate/understand &lt;code&gt;box-shadow&lt;/code&gt; better.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;box-shadow&lt;/code&gt; has six parameters with optional ones. Its syntax is:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/*Option 1*/&lt;/span&gt;
&lt;span class="nt"&gt;box-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/*Option 2*/&lt;/span&gt;
&lt;span class="nt"&gt;box-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;inset&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;h-shadow&lt;/span&gt; &lt;span class="nt"&gt;v-shadow&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt; &lt;span class="nt"&gt;spread&lt;/span&gt; &lt;span class="nt"&gt;color&lt;/span&gt;

&lt;span class="c"&gt;/*Option 3*/&lt;/span&gt;
&lt;span class="nt"&gt;box-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;initial&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;inherit&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Here is a list of properties in Option 2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inset&lt;/code&gt;: &lt;em&gt;Optional&lt;/em&gt;. Shadow is towards inside of box. If ommited, shadows is expand towards out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;h-shadow&lt;/code&gt;: &lt;em&gt;Required&lt;/em&gt;. The position of &lt;em&gt;horizonal&lt;/em&gt; shadow. Negative values means the whold shadow box is moving towards left. Positive values means the box moving towards right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-shadow&lt;/code&gt;: &lt;em&gt;Required&lt;/em&gt;. the position of &lt;em&gt;vertical&lt;/em&gt; shadow. Negative values means the whole shadow box is moving towards top. Positive values means the box moving towards down.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;blur&lt;/code&gt;: &lt;em&gt;Optional&lt;/em&gt;. represents how much 'transition' effect this shadow have (i.e. the transition process from box color to container color). &lt;code&gt;0&lt;/code&gt; means shadow box is all real color/no transition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spread&lt;/code&gt;: &lt;em&gt;Optional&lt;/em&gt;. from &lt;strong&gt;center&lt;/strong&gt; of shadow, how large the shadow can be (can be understand as shadow area). &lt;code&gt;0&lt;/code&gt; meas same size as box item. Negative value means smaller than box item area.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;color&lt;/code&gt;: &lt;em&gt;Optional&lt;/em&gt;. Any color code. &lt;code&gt;rgba&lt;/code&gt; is a good option to includes opacity for shadow. Such as &lt;code&gt;rgba(0,0,0,0.75);&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>CSS3</category><guid>http://pengyin-shan.com/posts/2016/Front%20End/quick-note-about-box-box-shadow.html</guid><pubDate>Wed, 27 Jul 2016 04:00:00 GMT</pubDate></item><item><title>Learning Note - CSS Transitions and Transforms (Lynda.com)</title><link>http://pengyin-shan.com/posts/2016/Front%20End/learning-note-css-transitions-and-transforms.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h2&gt;Reference List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(Need Lynda.com Account) &lt;a href="https://www.lynda.com/CSS-tutorials/Exploring-transition-options/101072/108929-4.html"&gt;CSS: Transitions and Transforms&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Chinese) &lt;a href="http://www.jianshu.com/p/d999f090d333"&gt;cubic-bezier&lt;/a&gt; by Jovey&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Online Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pengyin-shan.com/posts/2016/Front%20End/matthewlein.com/ceaser"&gt;test a great variety of transitions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pengyin-shan.com/posts/2016/Front%20End/www.css3maker.com"&gt;CSS 3.0 Maker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;To create a basic css transition, need as least two statement in css:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;property: &lt;code&gt;transition-property&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;duration: &lt;code&gt;transition-duration&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Always add transition declarations to initial state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Trigger States (See &lt;a href="https://www.w3.org/TR/css3-transitions/#transition-property-property"&gt;here&lt;/a&gt; for all transition properties from W3C):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:focus&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:active&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:target&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:checked&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:disabled&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Or&lt;/span&gt; &lt;span class="n"&gt;short&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;hand&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;transition-timing-function&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Default transitions start slow, speed up, and then slow down (&lt;code&gt;ease&lt;/code&gt; transition)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ease&lt;/code&gt;: default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;linear&lt;/code&gt;: constant rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ease-in&lt;/code&gt;: start slow, then speed up&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ease-out&lt;/code&gt;: start quickly, then slows down&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ease-in-out&lt;/code&gt;: start slow, speed up, slows again&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;cubic-bezier&lt;/h4&gt;
&lt;p&gt;Another &lt;code&gt;transition-timing-function&lt;/code&gt; value is &lt;code&gt;cubic-besier(x1,y1,x2,y2)&lt;/code&gt;. &lt;code&gt;0&amp;lt;x&amp;lt;1&lt;/code&gt;, when &lt;code&gt;x&amp;gt;1&lt;/code&gt; cubic-besier will lose its effect. There is no rule for &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Jovey created following graph in her blog post &lt;a href="http://www.jianshu.com/p/d999f090d333"&gt;cubic-bezier&lt;/a&gt; to show cubic-bezier:&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/frontend/cubic-bezier.png &lt;/p&gt;
&lt;p&gt;The curve from cubic-bezier is used to decide the speed of animation. We can view this as a straight line being dragged by point &lt;code&gt;(x1, y1)&lt;/code&gt; and point &lt;code&gt;(x2, y2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Jovey gave following example for the value of cubic-basier of &lt;code&gt;ease-out&lt;/code&gt; and &lt;code&gt;ease-in-out&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/frontend/cubic-bezier2.png &lt;/p&gt;
&lt;p&gt;&lt;code&gt;transition-delay&lt;/code&gt; is used to hold transition for a period of time.&lt;/p&gt;
&lt;h3&gt;Transforms&lt;/h3&gt;
&lt;p&gt;Basic Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Basic transform functions:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;translate&lt;/code&gt;: moving object along X and/or Y axis (use negative value to move to left/bottom)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;translate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;10px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;10px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;move&lt;/span&gt; &lt;span class="nt"&gt;object&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;top&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;scale&lt;/code&gt;: resize object along X (width) and/or Y axis (height)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;.5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;original&lt;/span&gt; &lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nc"&gt;.5&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;half&lt;/span&gt; &lt;span class="nt"&gt;size&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;rotate&lt;/code&gt;: rotate object to any degree (0 to 360)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rotate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;15deg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;skewX&lt;/code&gt;/&lt;code&gt;skewY&lt;/code&gt;: skew object along X or Y axis&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;skewX&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-25deg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;transform-origin&lt;/code&gt;: set the origin point along X and Y axes&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform-origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Center&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;transform-origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;10px&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;10px&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt; &lt;span class="nt"&gt;offset&lt;/span&gt;
&lt;span class="nt"&gt;transform-origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Bottom&lt;/span&gt; &lt;span class="nt"&gt;Left&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;3D Transforms&lt;/h3&gt;
&lt;p&gt;Step 1: establishing 3D container and observer placement&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;perspective&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;500px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;distance&lt;/span&gt; &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="nt"&gt;viewer&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;object&lt;/span&gt;
&lt;span class="nt"&gt;perspective-origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;vanishing&lt;/span&gt; &lt;span class="nt"&gt;point&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Step 2: move object along X, Y or Z axis&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;translate3d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;20px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;20px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;-10px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;translateZ&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-10px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Step 2: resize object along X(width), Y(height) or Z(depth)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;scale3d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.75&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="nc"&gt;.5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Step 2: rotate object to any degree (4 values)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rotate3d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;15deg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;first&lt;/span&gt; &lt;span class="nt"&gt;three&lt;/span&gt; &lt;span class="nt"&gt;values&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;axis&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;last&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;angle&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;rotation&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Step 3: &lt;code&gt;transform-style&lt;/code&gt; determines how child elements are treated in 3D space&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;transform-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;preserve-3d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;apply&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;children&lt;/span&gt;
&lt;span class="nt"&gt;transform-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;flat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;2d&lt;/span&gt; &lt;span class="nt"&gt;element&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;parent&lt;/span&gt; &lt;span class="nt"&gt;plane&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;2D Transitions and Transforms&lt;/h2&gt;
&lt;h3&gt;Basic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;color: &lt;code&gt;transition: background-color 1s ease&lt;/code&gt;, with &lt;code&gt;background-color&lt;/code&gt; as changes attribute in target element&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fade object in/out: &lt;code&gt;transition: opacity 1s ease-in&lt;/code&gt; with &lt;code&gt;opacity&lt;/code&gt; as changes attribute in target element&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;growing page elements: &lt;code&gt;transition: all .5s ease&lt;/code&gt; in original element. &lt;code&gt;all&lt;/code&gt;means all css attributes are effected. &lt;code&gt;transform: scale(1.5); //enlarge 50%&lt;/code&gt; in new status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spin: &lt;code&gt;perspective: 500px;&lt;/code&gt; in container, &lt;code&gt;transition: all 2s ease;&lt;/code&gt; for target element, &lt;code&gt;transform: rotateY(360deg)&lt;/code&gt; for new status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;adjust font size: &lt;code&gt;transition: font-size .5s ease&lt;/code&gt; for original element, &lt;code&gt;font-size&lt;/code&gt; for new status.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Transition Multiple Properties&lt;/h3&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;#test&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;transforming&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;&lt;code&gt;@keyframes&lt;/code&gt; and &lt;code&gt;animation&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@keyframes&lt;/code&gt; defines percentage-based or keyword timeline.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;animation&lt;/code&gt; references &lt;code&gt;@keyframes&lt;/code&gt; and defines parameters&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;#test&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;percentage&lt;/span&gt; &lt;span class="m"&gt;15s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;keyframes&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iteration&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;direction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;&lt;code&gt;animation&lt;/code&gt; properties&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;animation-name&lt;/code&gt;: same name as &lt;code&gt;@keyframes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;animation-duration&lt;/code&gt;: in &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;ms&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;animation-iteration-count&lt;/code&gt;: number of time to repeat or 'infinite' keyword&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;animation-direction&lt;/code&gt;: &lt;code&gt;normal&lt;/code&gt; for one direction, &lt;code&gt;alternate&lt;/code&gt; for back and forth&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;animation-timing-function&lt;/code&gt;: same as &lt;code&gt;transition-timing-function&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;animation-delay&lt;/code&gt;: value in &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;ms&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3D Transitions and Transforms&lt;/h2&gt;
&lt;h3&gt;z-index (Enhanced Image Size)&lt;/h3&gt;
&lt;p&gt;Example Code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;.ts-perspective&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perspective&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;goBig&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.te-front&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;goBig&lt;/span&gt; &lt;span class="m"&gt;.4s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;backface&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;visibility&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.td-back&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve&lt;/span&gt;&lt;span class="m"&gt;-3&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;z-index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Flipping Effect&lt;/h3&gt;
&lt;p&gt;Example Code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/*With Same JavaScript to Change Class*/&lt;/span&gt;
&lt;span class="nc"&gt;.artGroup&lt;/span&gt; &lt;span class="nc"&gt;.flip&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perspective&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.artGroup.flip.artwork&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve&lt;/span&gt;&lt;span class="m"&gt;-3&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.artGroup.flip.detail&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;.artGroup.flip.theFlip&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-180&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.artGroup.flip&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;.artGroup.flip.detail&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;backface&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;visibility&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Image Cube&lt;/h3&gt;
&lt;p&gt;Example Code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;#theArt&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perspective&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve&lt;/span&gt;&lt;span class="m"&gt;-3&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt; &lt;span class="nc"&gt;.front&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/*translate long z-axis*/&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;136px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.back&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-180&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;136px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.right&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;136px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.left&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;136px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.top&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;136px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*following are for parent container*/&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.show-front&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-136px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.show-back&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-136px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.show-right&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-136px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.show-left&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-136px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.show-top&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-136px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#cube&lt;/span&gt;&lt;span class="nc"&gt;.show-bottom&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-136px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Create Carousel&lt;/h3&gt;
&lt;p&gt;HTML -&amp;gt; JavaScript -&amp;gt; CSS&lt;/p&gt;
&lt;h4&gt;HTML&lt;/h4&gt;
&lt;p&gt;User &lt;code&gt;data-increment = 1/-1&lt;/code&gt; to control direction&lt;/p&gt;
&lt;h4&gt;JS&lt;/h4&gt;
&lt;p&gt;Add/Remove Class, using index incremented by 1&lt;/p&gt;
&lt;h4&gt;CSS&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;perspective&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#carousel&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve&lt;/span&gt;&lt;span class="m"&gt;-3&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#carousel&lt;/span&gt; &lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.ready&lt;/span&gt; &lt;span class="nn"&gt;#carousel&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.ready&lt;/span&gt; &lt;span class="nn"&gt;#carousel&lt;/span&gt; &lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#carousel&lt;/span&gt; &lt;span class="nt"&gt;figure&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;#carousel&lt;/span&gt; &lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="nc"&gt;.showFig&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.no-csstransform3d&lt;/span&gt; &lt;span class="nn"&gt;#carousel&lt;/span&gt; &lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.no-csstransform3d&lt;/span&gt; &lt;span class="nn"&gt;#toggle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.no-csstransform3d&lt;/span&gt; &lt;span class="nn"&gt;#carousel&lt;/span&gt; &lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="nc"&gt;.showFig&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>CSS3</category><guid>http://pengyin-shan.com/posts/2016/Front%20End/learning-note-css-transitions-and-transforms.html</guid><pubDate>Mon, 18 Jul 2016 04:00:00 GMT</pubDate></item><item><title>Reading Note - JavaScript Scoping, Hoisting and Others</title><link>http://pengyin-shan.com/posts/2016/JavaScript/reading-note-javascript-scoping-hoisting-and-others.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;During the process of learning TypeScript, I read an old blog article about JavaScript Scoping and Hoisting from &lt;a href="http://www.adequatelygood.com/about.html"&gt;Ben Cherry&lt;/a&gt;, and I like it. From this blog I go through more blog posts to extend my understanding about JavaScript scoping, hoisting, prototype, etc. This is a study note for all of these knowledges.&lt;/p&gt;
&lt;h2&gt;Reference List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html"&gt;JavaScript Scoping and Hoisting&lt;/a&gt; by Ben Cherry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://developer.telerik.com/featured/seven-javascript-quirks-i-wish-id-known-about"&gt;Seven JavaScript Quirks I Wish I'd Known About&lt;/a&gt; by Jim Cowart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/"&gt;Function Declarations vs. Function Expressions&lt;/a&gt;by Angus Croll&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Chinese)&lt;a href="http://www.jb51.net/article/75090.htm"&gt;Understanding JavaScript Scoping &amp;amp; Hoisting (II)&lt;/a&gt; by mdxy-dxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/"&gt;Everything you wanted to know about JavaScript scope&lt;/a&gt; by Developer Advocate Telerik&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/"&gt;Understanding Scope and Context in JavaScript&lt;/a&gt; by Ryan Morr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"&gt;Inheritance and the prototype chain&lt;/a&gt; by MDN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/speed/articles/optimizing-javascript"&gt;Optimizing JavaScript code&lt;/a&gt; written by Gregory Baker, Software Engineer on GMail &amp;amp; Erik Arvidsson, Software Engineer on Google Chrome&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.toptal.com/javascript/javascript-prototypes-scopes-and-performance-what-you-need-to-know"&gt;JavaScript Prototype Chains, Scope Chains, and Performance: What You Need to Know&lt;/a&gt; written by DIEGO CASTORINA&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Declarations, Names and Hoisting&lt;/h3&gt;
&lt;p&gt;There is difference between declaring a variable and assigning value to a variable: &lt;code&gt;var x;&lt;/code&gt; is declaration; &lt;code&gt;x = 1;&lt;/code&gt; is assignment; &lt;code&gt;var x = 1;&lt;/code&gt; is both declaring and assignment.&lt;/p&gt;
&lt;p&gt;JavaScript has &lt;code&gt;function-level scope&lt;/code&gt;, which mean &lt;em&gt;blocks does not create scope&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;From Ben, in JavaScript, a name enters a scope in four ways, with &lt;strong&gt;priority starting from top to bottom&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Language-defined: i.e. &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;argument&lt;/code&gt; keyword&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formal parameters: the parameters of function are scoped to the &lt;em&gt;body&lt;/em&gt; of that function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function declarations: as the form of &lt;code&gt;function foo(){}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variable declarations: as the form of &lt;code&gt;var foo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Above them, Function declarations and Variable declarations&lt;/em&gt; are moved or &lt;code&gt;hoisted&lt;/code&gt; to top of their &lt;strong&gt;containing scope&lt;/strong&gt;. Two functions below are equivalent:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Note assignment will not be hoisted&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When a function expression is assigned to a declared variable, only this variable will be hoisted. The function body is left behind:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError "foo is not a function"&lt;/span&gt;
    &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "this will run!"&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// function expression assigned to local variable 'foo'&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"this won't run!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// function declaration, given the name 'bar'&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"this will run!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Angus Croll explained &lt;code&gt;return&lt;/code&gt; statement also in his post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code after the &lt;code&gt;return&lt;/code&gt; statement is &lt;strong&gt;unreachable&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, declarations contributes to its variable environment when &lt;em&gt;execution scope is entered&lt;/em&gt;. &lt;strong&gt;They are distinct from Statements (such as &lt;code&gt;return&lt;/code&gt;)&lt;/strong&gt; and not subject to their rule of process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Function Declaration &amp;amp; Function Expressions&lt;/h3&gt;
&lt;p&gt;Function can be declared (or actually not being declared) in different ways. Ben gave following example in his post:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError "foo is not a function". The code below only hoists 'foo' variable, without function&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// valid. See code below&lt;/span&gt;
&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError "baz is not a function"&lt;/span&gt;
&lt;span class="nx"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError "spam is not defined"&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// anonymous function expression ('foo' gets hoisted)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// function declaration ('bar' and the function body get hoisted)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// named function expression (only 'baz' gets hoisted)&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// valid&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// valid&lt;/span&gt;
&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// valid&lt;/span&gt;
&lt;span class="nx"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError "spam is not defined"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Another very good explanation is made by Angus Croll in his &lt;a href="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Function Declaration&lt;/code&gt; defines a named function variable without requiring variable assignment. It must start with &lt;code&gt;function&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;For function declaration, the function name is visible within its own scope and scope of its parent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Function Expression&lt;/code&gt; defines a function as part of a larger expression syntax (like a variable assignment). Function can be named or &lt;code&gt;anonymous&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//anonymous function expression&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//named function expression&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//self invoking function expression&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;For function expression, the function name is not visible outside of its own function scope&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He gave out following 4 questions as example:&lt;/p&gt;
&lt;p&gt;Q1:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//8 is the answer&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Q2:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//3 is the answer&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Q3:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//3 is the answer&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Q4:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//[Type Error: bar is not a function] is the answer&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Based on theory above and &lt;code&gt;return&lt;/code&gt; statement explanation, Q1 can be rewrite to:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//**Simulated processing sequence for Question 1**&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//define bar once&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//redefine it&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Here bar() is rewrite&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//return its invocation&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Based on ECMA5, A variable with an &lt;code&gt;initialzier&lt;/code&gt; is assigned the value of its Assignment Expression when the Variable Statement is &lt;strong&gt;executed&lt;/strong&gt;, not when the variable is created. So Q2 can be rewrite to:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//**Simulated processing sequence for Question 2**&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//a declaration for each function expression&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//first Function Expression is executed&lt;/span&gt;
    &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// Function created by first Function Expression is invoked&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    second Function Expression unreachable because of return statement.&lt;/span&gt;
&lt;span class="cm"&gt;    Note second function expression itself cannot be hoisted,so it cannot pass return statement&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//3&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Similarly, Q4 can be rewrite to:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//**Simulated processing sequence for Question 4**&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//a declaration for each function expression&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//TypeError: "bar not defined"&lt;/span&gt;
    &lt;span class="c1"&gt;//neither Function Expression is reached&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Best Practice&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Ben highly suggest having &lt;em&gt;exactly one&lt;/em&gt; &lt;code&gt;var&lt;/code&gt; statement per scope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*jslint onevar: true [...] */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Here is suggestion from ECMAScript Standard:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;If the variable statement occurs inside a FunctionDeclaration, the variables are defined with function-local scope in that function, as described in section 10.1.3.&lt;/code&gt; Otherwise, they are defined with global scope(that is, they are created as members of the global object, as described in section 10.1.3) using property attributes { DontDelete }. &lt;code&gt;Variables are created when the execution scope is entered. A Block does not define a new execution scope.&lt;/code&gt; Only Program and FunctionDeclaration produce a new scope. Variables are initialized to undefined when created. &lt;code&gt;A variable with an Initializer is assigned the value of its AssignmentExpression when the VariableStatement is executed, not when the variable is created.&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Scope, Context and Prototype&lt;/h2&gt;
&lt;h3&gt;Scope &amp;amp; Context&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Scope and Context are different.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From &lt;a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/"&gt;Ryan's blog post&lt;/a&gt;, every function invocation has both a scope and a context associate with it. &lt;strong&gt;Scope is function-based and Context is object-based&lt;/strong&gt;. Scope is depending on every time a function is invokes, while context is always &lt;em&gt;the value of &lt;code&gt;this&lt;/code&gt; keyword&lt;/em&gt; belonging to the object that &lt;strong&gt;owns the current executing code&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Scope&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/"&gt;Telerik&lt;/a&gt; explained the usage of scope in detail.&lt;/p&gt;
&lt;h4&gt;Global Scope &amp;amp; Local Scope&lt;/h4&gt;
&lt;p&gt;There is &lt;code&gt;Global Scope&lt;/code&gt; and &lt;code&gt;Local Scope&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Global Scope&lt;/code&gt; is very useful for creating &lt;code&gt;namespace&lt;/code&gt;, which is usually used to define highest level of scope. An exmaple is &lt;code&gt;jQuery('.myClass)&lt;/code&gt;. &lt;code&gt;jQuery&lt;/code&gt; is the namespace and in global scope.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Local Scope&lt;/code&gt; is the scope besides global scope. Normal type is &lt;code&gt;Function scope&lt;/code&gt;, which is existing in each function. Any locally scoped items are not visible in global scope. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;After applying hoisting rule, still 'name' is in local scope&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Todd'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Todd&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught ReferenceError: name is not defined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;a new scope is added to the scope chain when a &lt;code&gt;try-catch&lt;/code&gt; block or a &lt;code&gt;with&lt;/code&gt; block is encountered&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Scope Chain&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Lexical Scope&lt;/code&gt;: the inner function has access to the scope in outer function, but does not work backwards:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Todd'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myOtherFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'My name is '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;myOtherFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// call function&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// myFunction() will log out:&lt;/span&gt;
&lt;span class="c1"&gt;// `Todd`&lt;/span&gt;
&lt;span class="c1"&gt;// `My name is Todd`&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;Scope Chain&lt;/code&gt;: any function defined within another function has a local scope with &lt;em&gt;linked to the outer function&lt;/em&gt;. This linking is the chain.&lt;/p&gt;
&lt;p&gt;See graph from Diego Castorina below:&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/javascript/scope_chain.png &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s always the position in the code that defines the scope. When resolving a variable, JavaScript starts at the innermost scope and searches outwards until it finds the variable/object/function it was looking for.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By Ryan, for each &lt;strong&gt;execution context&lt;/strong&gt; there is a scope chain coupled with it. The scope chain contains the objects for every execution context in the execution stack.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                &lt;span class="c1"&gt;// do something&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In the code above, the scope chain would be, from top to bottom: &lt;code&gt;fourth&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Naming Conflict: local variables with the same name as variables higher up the scope chain take precedence. So in code above, variables in &lt;code&gt;fourth&lt;/code&gt; has highest priority if there is any naming conflict.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look-up Process: if lacking of local variable, the look-up process will always &lt;em&gt;begin with its own variable object&lt;/em&gt;. If the identifier is not found in the variable object, the search continues into the scope chain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Closure&lt;/code&gt;: it is normally used in a &lt;code&gt;return&lt;/code&gt; statement with function. This returned function itself is un-modified by any call to its outer function. However, A function doesn’t have to return in order to be called a closure though. Simply accessing variables outside of the immediate lexical scope creates a closure. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello, '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Todd'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// nothing happens, no errors. Since a function is returned, an object is required to be assigned by this function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;helloTodd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Todd'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;helloTodd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// will call the closure and log 'Hello, Todd'&lt;/span&gt;

&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Bob'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Calls the returned function without assignment.&lt;/span&gt;
&lt;span class="cm"&gt;If any parameter required for inner function, this will become sayHello('Bob')('parameter')&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;Closure is significantly slower than creating an inner function without a closure, and mush slower than reusing a static function. Also closure is the most common resource for memory leaks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, for &lt;code&gt;setTimeout&lt;/code&gt; function, following code is actually quickest:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alertMsg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Message to alert'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupAlertTimeout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alertMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Private and Public Scope&lt;/h4&gt;
&lt;p&gt;To create public/private environment in JavaScript, just like Java, &lt;code&gt;Closure&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt; can be used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wrapping functions inside function&lt;/strong&gt; is a easy way to create private scope. In JavaScript, we need to wrap outer anonymous function in &lt;code&gt;()&lt;/code&gt;, as following example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do some stuff here&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Uncaught ReferenceError: myFunction is not defined&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To access the function in public but without modifying it, &lt;code&gt;Module Pattern&lt;/code&gt; can be used. Declare a variable &lt;code&gt;module&lt;/code&gt; using as a &lt;strong&gt;namespace&lt;/strong&gt;, and assign a wrapped anonymous function to this variable. The anonymous function return a collection of attributes. Each attribute corresponds to a private function.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// define module/namespace&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//items inside this private function cannot be modified from outside&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;someOtherMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;// call module + methods&lt;/span&gt;
&lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someOtherMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To create &lt;code&gt;private methods&lt;/code&gt;, which is the methods being used inside wrapping function but not from outside, create a local variable inside outer function, then assign the private method to it. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;privateMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;publicMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//private Method can be called here, but only publicMethod can be called from outside&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The code above can be written to &lt;em&gt;returning an object&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;privateMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;myModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;myModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anotherPublicMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;myModule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// returns the Object with public methods&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;// usage&lt;/span&gt;
&lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;A good naming convention is to begin &lt;code&gt;private method&lt;/code&gt; with an underscore&lt;code&gt;_&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Following is an example of returning an anonymous object, with attribute as each public method:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_privateMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;publicMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;publicMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;publicMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;anotherPublicMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;anotherPublicMethod&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Context and &lt;code&gt;this&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;When a function is called as a method of an object, &lt;code&gt;this&lt;/code&gt; is set to the object &lt;em&gt;it is called on&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When a &lt;code&gt;new&lt;/code&gt; keyword is used to create new instance of an object, &lt;code&gt;this&lt;/code&gt; is set to the newly-created instance:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// window&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// foo&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Execution Context&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Execution Context refer more like a scope. It's not like the context discussed above.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As Ryan stated, when the JavaScript interpreter initially executes code, it first enters to a &lt;strong&gt;global execution context&lt;/strong&gt; by default.&lt;/p&gt;
&lt;p&gt;Each time a new execution context is created it is appended to &lt;strong&gt;the top of the execution stack&lt;/strong&gt;. The browser will always execute the current execution context that is at &lt;em&gt;top&lt;/em&gt; of the execution stack. Once completed, it will be &lt;em&gt;removed&lt;/em&gt; from the top of the stack and control will return to the execution context below.&lt;/p&gt;
&lt;p&gt;An execution context can be divided into a &lt;strong&gt;creation&lt;/strong&gt; and &lt;strong&gt;execution&lt;/strong&gt; phase.&lt;/p&gt;
&lt;p&gt;In the creation phase, the interpreter will first create a &lt;code&gt;variable object&lt;/code&gt;(also called an &lt;code&gt;activation object&lt;/code&gt;) that is composed of all the variables, function declarations, and arguments defined inside the execution context. From there the &lt;code&gt;scope chain&lt;/code&gt; is &lt;em&gt;initialized&lt;/em&gt; next, and the value of &lt;code&gt;this&lt;/code&gt; is determined last.&lt;/p&gt;
&lt;p&gt;Then in the execution phase, code is interpreted and executed.&lt;/p&gt;
&lt;h4&gt;Context with &lt;code&gt;.call()&lt;/code&gt;, &lt;code&gt;.apply()&lt;/code&gt; and &lt;code&gt;.bind()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;bind()&lt;/code&gt; allow you to change function execution context.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;my_function.call(scope, arg1, arg2, arg3)&lt;/code&gt; requires arguments to be listed explicitly&lt;/p&gt;
&lt;p&gt;&lt;code&gt;my_function.apply(scope, [arg1, arg2])&lt;/code&gt; allows array as to be parameter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt; returns a new function which is &lt;strong&gt;permanently bound&lt;/strong&gt; to the first argument of bind regardless of how the function is being used.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nav li'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="c1"&gt;//change this to be links[i]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Inheritance/Prototype Chain&lt;/h3&gt;
&lt;p&gt;MDN has an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"&gt;article&lt;/a&gt; explaining Inheritance/Prototype Chain in detail.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScirpt is prototype-based. It is not class-based.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Inheritance&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Property Inheritance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before ES6, there is no &lt;code&gt;class&lt;/code&gt; implementation. JavaScript only has one construct: &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each object has an &lt;strong&gt;internal link&lt;/strong&gt; to another object called its &lt;code&gt;prototype&lt;/code&gt;. This prototype object has &lt;em&gt;another prototype object of its own&lt;/em&gt;. This link (prototype -&amp;gt; prototype) continues &lt;em&gt;until an object is reached with &lt;code&gt;null&lt;/code&gt; as its prototype&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; has no prototype. When reaching &lt;code&gt;null&lt;/code&gt;, this marks the &lt;strong&gt;end&lt;/strong&gt; of this &lt;code&gt;prototype chain&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When trying to access a property of an object, original object is sought first. If no property found, this object's prototype will be searched. This process continues till the end of prototype chain is reached.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;object_name.[[Prototype]]&lt;/code&gt; pattern to reach the prototype of &lt;strong&gt;object&lt;/strong&gt;. &lt;code&gt;function_name.prototype&lt;/code&gt; is used to reach all &lt;code&gt;instances&lt;/code&gt; of this function.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ES6 use &lt;code&gt;object_name.getPrototypeOf()&lt;/code&gt; and &lt;code&gt;object_name.setPrototypeOf()&lt;/code&gt; (getter&amp;amp; setter) to access prototype.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example from MDN:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Let's assume we have object o, with its own properties a and b:&lt;/span&gt;
&lt;span class="c1"&gt;// {a: 1, b: 2}&lt;/span&gt;
&lt;span class="c1"&gt;// o.[[Prototype]] has properties b and c:&lt;/span&gt;
&lt;span class="c1"&gt;// {b: 3, c: 4}&lt;/span&gt;
&lt;span class="c1"&gt;// Finally, o.[[Prototype]].[[Prototype]] is null.&lt;/span&gt;
&lt;span class="c1"&gt;// This is the end of the prototype chain as null,&lt;/span&gt;
&lt;span class="c1"&gt;// by definition, null has no [[Prototype]].&lt;/span&gt;
&lt;span class="c1"&gt;// Thus, the full prototype chain looks like:&lt;/span&gt;
&lt;span class="c1"&gt;// {a:1, b:2} ---&amp;gt; {b:3, c:4} ---&amp;gt; null&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="c1"&gt;// Is there an 'a' own property on o? Yes, and its value is 1.&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// Is there a 'b' own property on o? Yes, and its value is 2.&lt;/span&gt;
&lt;span class="c1"&gt;// The prototype also has a 'b' property, but it's not visited.&lt;/span&gt;
&lt;span class="c1"&gt;// This is called "property shadowing"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="c1"&gt;// Is there a 'c' own property on o? No, check its prototype.&lt;/span&gt;
&lt;span class="c1"&gt;// Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4.&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// Is there a 'd' own property on o? No, check its prototype.&lt;/span&gt;
&lt;span class="c1"&gt;// Is there a 'd' own property on o.[[Prototype]]? No, check its prototype.&lt;/span&gt;
&lt;span class="c1"&gt;// o.[[Prototype]].[[Prototype]] is null, stop searching,&lt;/span&gt;
&lt;span class="c1"&gt;// no property found, return undefined&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Method Inheritance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In JavaScript, method inheritance is done by &lt;em&gt;adding function to be a property of an object&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When an inherited function is executed, the value of &lt;code&gt;this&lt;/code&gt; points to the inheriting object, not to the prototype object where the function is an own property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="c1"&gt;// When calling o.m in this case, 'this' refers to o&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// p is an object that inherits from o&lt;/span&gt;

&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// creates an own property 'a' on p&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 13&lt;/span&gt;
&lt;span class="c1"&gt;// when p.m is called, 'this' refers to p.&lt;/span&gt;
&lt;span class="c1"&gt;// So when p inherits the function m of o,&lt;/span&gt;
&lt;span class="c1"&gt;// 'this.a' means p.a, the own property 'a' of p&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Create Object with Prototype Chain&lt;/h4&gt;
&lt;p&gt;If a prototype chain is too long, it may has negative impact about code performance. Following rules are important to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remember to use &lt;code&gt;hasOwnProperty()&lt;/code&gt; method to detect if this object has certain property on itself. &lt;strong&gt;This is the only method in JavaScript with dealing with prototype without traversing the whole prototype chain&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is not enough to check whether a property is &lt;code&gt;undefined&lt;/code&gt;. The property might very well exist, but its value just happens to be set to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trying to access &lt;em&gt;nonexistent&lt;/em&gt; properties will always traverse the &lt;strong&gt;full&lt;/strong&gt; prototype chain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a object has instance A/B, and the prototype of this object change later, A and B's prototype of this object will also change. i.e. &lt;code&gt;Object.getPrototypeOf(a1).doSomething&lt;/code&gt; == &lt;code&gt;Object.getPrototypeOf(a2).doSomething&lt;/code&gt; == &lt;code&gt;A.prototype.doSomething&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[[Prototype]]&lt;/code&gt; is looked at &lt;strong&gt;recursively&lt;/strong&gt;, i.e. &lt;code&gt;a1.doSomething&lt;/code&gt;, &lt;code&gt;Object.getPrototypeOf(a1).doSomething&lt;/code&gt;, &lt;code&gt;Object.getPrototypeOf(Object.getPrototypeOf(a1)).doSomething&lt;/code&gt; etc., until it's found or &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, prototype is for types, while &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; is the same for instances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When iterating over the properties of an object, every enumerable property that is on the prototype chain will be enumerated.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a bad practice to extend &lt;code&gt;object.prototype&lt;/code&gt;/&lt;code&gt;_proto_&lt;/code&gt; or one of the other built-in prototypes. This is called &lt;code&gt;monkey&lt;/code&gt; patching and breaks &lt;code&gt;encapsulation&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A graph from &lt;a href="https://www.toptal.com/javascript/javascript-prototypes-scopes-and-performance-what-you-need-to-know"&gt;JavaScript Prototype Chains, Scope Chains, and Performance: What You Need to Know&lt;/a&gt; written by DIEGO CASTORINA describe prototype chain very well:&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/javascript/prototype_chain.png &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simply Construct&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// The newly created object o has Object.prototype as its [[Prototype]]&lt;/span&gt;
&lt;span class="c1"&gt;// o has no own property named 'hasOwnProperty'&lt;/span&gt;
&lt;span class="c1"&gt;// hasOwnProperty is an own property of Object.prototype.&lt;/span&gt;
&lt;span class="c1"&gt;// So o inherits hasOwnProperty from Object.prototype&lt;/span&gt;
&lt;span class="c1"&gt;// Object.prototype has null as its prototype.&lt;/span&gt;
&lt;span class="c1"&gt;// o ---&amp;gt; Object.prototype ---&amp;gt; null&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"yo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"whadup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"?"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Arrays inherit from Array.prototype&lt;/span&gt;
&lt;span class="c1"&gt;// (which has methods like indexOf, forEach, etc.)&lt;/span&gt;
&lt;span class="c1"&gt;// The prototype chain looks like:&lt;/span&gt;
&lt;span class="c1"&gt;// a ---&amp;gt; Array.prototype ---&amp;gt; Object.prototype ---&amp;gt; null&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Functions inherit from Function.prototype&lt;/span&gt;
&lt;span class="c1"&gt;// (which has methods like call, bind, etc.)&lt;/span&gt;
&lt;span class="c1"&gt;// f ---&amp;gt; Function.prototype ---&amp;gt; Object.prototype ---&amp;gt; null&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;By &lt;code&gt;new&lt;/code&gt; Keyword (Constructor)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When an object is intialized by &lt;code&gt;new&lt;/code&gt; keyword, it inherits all the properties in the prototype of that function. However, this object instance can not access &lt;code&gt;prototype&lt;/code&gt; of its parent object directly. Instance can only acess its properties.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;addVertex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// g is an object with own properties 'vertices' and 'edges'.&lt;/span&gt;
&lt;span class="c1"&gt;// g.[[Prototype]] is the value of Graph.prototype when new Graph() is executed.&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Another example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Extending the Person prototype from our earlier example to&lt;/span&gt;
&lt;span class="c1"&gt;// also include a 'getFullName' method:&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Referencing the p1 object from our earlier example&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// prints 'John Doe'&lt;/span&gt;
&lt;span class="c1"&gt;// but p1 can’t directly access the 'prototype' object...&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                &lt;span class="c1"&gt;// prints 'undefined'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// generates an error&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;See graph example below:&lt;/p&gt;
&lt;p&gt;img-responsive images/articles/2016/javascript/prototype_chain_2.png &lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;var g = new Graph()&lt;/code&gt; constructor above equals to following code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.[[&lt;/span&gt;&lt;span class="nx"&gt;Prototype&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;ES6: By &lt;code&gt;class&lt;/code&gt; Keyword&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// a ---&amp;gt; Object.prototype ---&amp;gt; null&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// b ---&amp;gt; a ---&amp;gt; Object.prototype ---&amp;gt; null&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1 (inherited)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// c ---&amp;gt; b ---&amp;gt; a ---&amp;gt; Object.prototype ---&amp;gt; null&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// d ---&amp;gt; null&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// undefined, because d doesn't inherit from Object.prototype&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Apply Prototype as Best Practice&lt;/h4&gt;
&lt;p&gt;From &lt;a href="https://www.toptal.com/javascript/javascript-prototypes-scopes-and-performance-what-you-need-to-know"&gt;Diego Castorina&lt;/a&gt;, prototype chain works as following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the object has a property with the given name, that value is returned. (The &lt;code&gt;hasOwnProperty&lt;/code&gt; method can be used to check if an object has a particular named property.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the object does not have the named property, the object’s prototype is checked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since the prototype is an object as well, if it does not contain the property either, its parent’s prototype is checked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This process continues up the prototype chain until the property is found.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If Object.prototype is reached and it does not have the property either, the property is considered &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constructor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gregory Baker write a article about&lt;a href="https://developers.google.com/speed/articles/optimizing-javascript"&gt;Optimizing JavaScript code&lt;/a&gt;. He mentioned &lt;em&gt;instead of&lt;/em&gt; following constructor:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// constructor body&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// method body&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Using prototype is the &lt;em&gt;preferred&lt;/em&gt; way of add attributes. In following code, no matter how many instances of &lt;code&gt;baz.Bar&lt;/code&gt; are constructed, only a single function is ever created for &lt;code&gt;foo&lt;/code&gt;, and no closures are created.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// constructor body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// method body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Initialize Instance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Place instance variable declaration/initialization on the &lt;code&gt;prototype&lt;/code&gt; for instance variables with &lt;code&gt;value type&lt;/code&gt; (rather than reference type) initialization values (i.e. values of type &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;string&lt;/code&gt;).  &lt;em&gt;This does not apply to initial value of parameters&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop1_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop2_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop3_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop4_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'blah'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Use following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop3_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop1_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop2_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop4_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'blah'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>JavaScript</category><guid>http://pengyin-shan.com/posts/2016/JavaScript/reading-note-javascript-scoping-hoisting-and-others.html</guid><pubDate>Wed, 22 Jun 2016 04:00:00 GMT</pubDate></item><item><title>TypeScript Basics</title><link>http://pengyin-shan.com/posts/2016/JavaScript/typescript-basics.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;This is a brief reading note for TypeScript &lt;a href="http://www.typescriptlang.org/docs/handbook"&gt;official handbook&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Gulp Setup&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Gulp&lt;/code&gt; can be used with TypeScript to provide powerful compiling process. See &lt;a href="http://www.typescriptlang.org/docs/handbook/gulp.html"&gt;here&lt;/a&gt; for a detailed description.&lt;/p&gt;
&lt;p&gt;My new project requires Typescript, Jade and SASS. Here is a sample &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp-typescript"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tsProject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"tsconfig.json"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp-jade"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp-sass"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src/styles/*.scss'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dist/styles'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tsProject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src/scripts/*.ts'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tsProject&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dist/scripts"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"jade"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src/templates/*.jade'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jade&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./dist"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="s1"&gt;'sass'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'typescript'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'jade'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And the &lt;code&gt;tsconfile.json&lt;/code&gt;, just for future reference:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"src/scripts/main.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"src/scripts/test.ts"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"noImplicitAny"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"es5"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Types and Variables&lt;/h2&gt;
&lt;h3&gt;Number&lt;/h3&gt;
&lt;p&gt;Integer, Floating Point, Hexadecimal and Decimal Literals can all be declared as &lt;code&gt;number&lt;/code&gt; type.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;decimal&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//declare a variable called 'decimal', with value equaling to 6&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;String&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Template Strings&lt;/code&gt; can be used to span multiple lines and have embedded expressions. Also &lt;code&gt;+&lt;/code&gt; can be used to concatenate strings with variables.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Remember to use lower case &lt;code&gt;string&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//Using `` to provide break line effect&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Bob&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;

&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="s1"&gt;'ll be ${age+1} years old next month.`&lt;/span&gt;
&lt;span class="s1"&gt;let sentence: string = "Hello, my name is " + fullName + ".\n\n" + "I'&lt;/span&gt;&lt;span class="nx"&gt;ll&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="s2"&gt;" + (age+1) + "&lt;/span&gt; &lt;span class="nx"&gt;years&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Above code generates following js code. Notice the result of &lt;code&gt;\n\n&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello, my name is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;".\n\nI'll be "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" years old next month."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sentence2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello, my name is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;".\n\n"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"I'll be "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" years old next month."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Array &amp;amp; Tuple&lt;/h3&gt;
&lt;p&gt;To create an array, just use &lt;code&gt;[]&lt;/code&gt; to construct array, or use &lt;code&gt;Array&amp;lt;elemType&amp;gt;&lt;/code&gt; to do so: &lt;code&gt;let list: number[] = [1,2,3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To create a tuple (mixed type of variables), declare it first, then insert element to it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//type must match&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//OK to insert element to each position&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Enum&lt;/h3&gt;
&lt;p&gt;In &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html"&gt;Java&lt;/a&gt;, &lt;code&gt;Enum&lt;/code&gt; is a special data type that enables for a variable to be a set of &lt;strong&gt;predefined constants&lt;/strong&gt;. The variable must be equal to one of the values that have been predefined for it. Java example is below:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SUNDAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MONDAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TUESDAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WEDNESDAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;THURSDAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FRIDAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SATURDAY&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Similarly in typescript, an enum is defined by a group of constants (number, string, key-value pair, etc) using &lt;code&gt;enum {}&lt;/code&gt;. User can create an instance with one constant from an enum constructor.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;enum begin numbering elements starting from &lt;code&gt;0&lt;/code&gt;, It's ok to manually set corresponding number&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Blue&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;: &lt;span class="kt"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Code above will generate following JS code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Read"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Read"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Green"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Green"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Blue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Blue"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}));&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Example with Assigned Index:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Green&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Blue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;: &lt;span class="kt"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cname&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Code above will generate:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Read"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Read"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Green"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Green"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Blue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Blue"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}));&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Any &amp;amp; Void&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Any&lt;/code&gt; is used to describe the variables with unknown type, like data from user or 3rd party. Use &lt;code&gt;any&lt;/code&gt; to let variable passing compiler's type-checking:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;notSure&lt;/span&gt;: &lt;span class="kt"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;notSure2&lt;/span&gt;: &lt;span class="kt"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;//Following two methods can pass compiler but will getting error in running time, if methods actually do not exist&lt;/span&gt;
&lt;span class="nx"&gt;notSure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ifItExists&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;notSure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;notSure2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isItExists&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notSure2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Sure&lt;/span&gt;: &lt;span class="kt"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Sure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In code above, first part of code can work without error reported from compiler. That's because &lt;code&gt;any&lt;/code&gt; can pass any type-checking from compiler. However, second part of code will get compiler error &lt;code&gt;error TS2339: Property 'toFixed' does not exist on type 'Object'&lt;/code&gt;(And you can see error reported in VSCode if you use it). That's because &lt;code&gt;Object&lt;/code&gt; only allow you to assign any value to variable, but &lt;strong&gt;you can't call method on them, even though variable has that method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Void&lt;/code&gt; is similar as the one in Java: if a function has &lt;code&gt;void&lt;/code&gt; keyword, this function will not return anything. You can only assign &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to &lt;code&gt;void&lt;/code&gt; variable, otherwise you will get compiler error:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;If you don't user null or undefined, you will get following error in compiler:&lt;/span&gt;
&lt;span class="cm"&gt;error TS2322: Type 'number' is not assignable to type 'void'.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;unusable&lt;/span&gt;: &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;voidtest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'this is a void test'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Type Assertion&lt;/h3&gt;
&lt;p&gt;Similar as &lt;code&gt;cast&lt;/code&gt; in other languages, type assertion can be used to pass compiler's type checking. It should be used when certain type checking has been down and there is a guarantee of correct type.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;type&amp;gt;variable&lt;/code&gt; and &lt;code&gt;variable as type&lt;/code&gt; can all be used to do type assertion. &lt;code&gt;JSX&lt;/code&gt; only use &lt;code&gt;variable as type&lt;/code&gt; style:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;typeassertion&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"test type assertion string"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;strlength&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;typeassertion&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;strlength2&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeassertion&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strlength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strlength2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>TypeScript</category><guid>http://pengyin-shan.com/posts/2016/JavaScript/typescript-basics.html</guid><pubDate>Tue, 21 Jun 2016 04:00:00 GMT</pubDate></item></channel></rss>