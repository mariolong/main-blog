<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I'm Pengyin (Java)</title><link>http://pengyin-shan.com/</link><description></description><atom:link type="application/rss+xml" href="http://pengyin-shan.com/categories/cat_java.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 21 Jun 2017 01:46:45 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Apache Velocity Language Basics</title><link>http://pengyin-shan.com/posts/2015/Java/apache-velocity-basics.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h3&gt;Syntax Basics&lt;/h3&gt;
&lt;p&gt;All VTL statements, begins with the &lt;code&gt;#&lt;/code&gt; character. For rendering process: the &lt;strong&gt;Velocity Templating Engine&lt;/strong&gt; will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt; through your web page to find all &lt;code&gt;#&lt;/code&gt; characters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then &lt;strong&gt;determine&lt;/strong&gt; which mark the beginning of VTL statements, and which of the &lt;code&gt;#&lt;/code&gt; characters that have nothing to do with VTL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;It is recommended to start each VTL statement on a &lt;strong&gt;new line&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;There are &lt;strong&gt;three&lt;/strong&gt; types of references in the VTL: &lt;code&gt;variables&lt;/code&gt;, &lt;code&gt;properties&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In VTL, References begin with $ and are used to &lt;strong&gt;get&lt;/strong&gt; something. Directives begin with # and are used to &lt;strong&gt;do&lt;/strong&gt; something.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;Variables&lt;/h5&gt;
&lt;p&gt;All variables/references in VTL begins with the &lt;code&gt;$&lt;/code&gt; character,followed by a &lt;strong&gt;VTL Identifier&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;VTL Identifier&lt;/strong&gt; must start with an alphabetic character (i.e. a to z case insensitive). The rest of the characters are limited to the following types of characters: alphabetic, numeric, &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In VTL, the variable can get its value from either a &lt;strong&gt;set directive&lt;/strong&gt; in the template, or from the &lt;strong&gt;Java code&lt;/strong&gt;. Example: for &lt;code&gt;#set( $foo = "bar" )&lt;/code&gt;, &lt;code&gt;"bar"&lt;/code&gt; will replace all &lt;code&gt;$foo&lt;/code&gt; variables in VTL.&lt;/p&gt;
&lt;p&gt;Once a value has been assigned to a variable, you can reference the variable &lt;strong&gt;anywhere&lt;/strong&gt; in your HTML document. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    #set( $foo = "Velocity" )
    Hello $foo World!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6&gt;String&lt;/h6&gt;
&lt;p&gt;String values are always enclosed in &lt;em&gt;quotes&lt;/em&gt;, either &lt;em&gt;single&lt;/em&gt; or &lt;em&gt;double&lt;/em&gt; quotes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Single quotes will ensure that the quoted value will be &lt;strong&gt;assigned&lt;/strong&gt; to the reference as is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Double quotes allow you to use &lt;strong&gt;velocity references and directives&lt;/strong&gt; to interpolate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Example: for &lt;code&gt;"Hello $name"&lt;/code&gt;, the &lt;code&gt;$name&lt;/code&gt; will be replaced by the referenced value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Properties&lt;/h5&gt;
&lt;p&gt;Properties have a distinctive format.&lt;/p&gt;
&lt;p&gt;The shorthand notation consists of a leading &lt;code&gt;$&lt;/code&gt; character followed a &lt;strong&gt;VTL Identifier&lt;/strong&gt;, followed by a dot character &lt;code&gt;.&lt;/code&gt; and another &lt;strong&gt;VTL Identifier&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;$customer.Address&lt;/code&gt; has &lt;strong&gt;two meanings&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;VTL should look in the &lt;strong&gt;hashtable&lt;/strong&gt; named as &lt;code&gt;customer&lt;/code&gt;, then return the value associated with the &lt;strong&gt;key&lt;/strong&gt; &lt;code&gt;Address&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VTL should find a referring to a &lt;strong&gt;method&lt;/strong&gt; called &lt;code&gt;$customer.getAddress()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Methods&lt;/h5&gt;
&lt;p&gt;Methods are references that consist of a leading &lt;code&gt;$&lt;/code&gt; character followed a &lt;strong&gt;VTL Identifier&lt;/strong&gt;, followed by a &lt;strong&gt;VTL Method Body&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;VTL Method Body&lt;/strong&gt; consists of a &lt;strong&gt;VTL Identifier&lt;/strong&gt; followed by an left parenthesis character &lt;code&gt;(&lt;/code&gt;, followed by an &lt;strong&gt;optional parameter list&lt;/strong&gt;, followed by right parenthesis character &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;purchase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;getTotal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"My Home Page"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Strange"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Weird"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Excited"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6&gt;a &lt;em&gt;shorthand notation&lt;/em&gt; for &lt;strong&gt;VTL Methods&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;In the example above, The &lt;strong&gt;property&lt;/strong&gt; &lt;code&gt;$customer.Address&lt;/code&gt; has the exact same effect as using the &lt;strong&gt;method&lt;/strong&gt; &lt;code&gt;$customer.getAddress()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It is generally &lt;strong&gt;preferable&lt;/strong&gt; to use a &lt;strong&gt;Property&lt;/strong&gt; when available.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main difference between Properties and Methods is that you can specify a &lt;strong&gt;parameter list&lt;/strong&gt; to a Method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;Array as Lists&lt;/h6&gt;
&lt;p&gt;As of Velocity 1.6, all &lt;strong&gt;array&lt;/strong&gt; references are treated as &lt;strong&gt;fixed-length lists&lt;/strong&gt;. User can call &lt;code&gt;java.util.List&lt;/code&gt; methods on array references. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6&gt;vararg methods&lt;/h6&gt;
&lt;p&gt;From Velocity 1.6, &lt;strong&gt;setter&lt;/strong&gt; methods can have different parameter list:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setPlanets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Earth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Mars'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Neptune'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setPlanets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mercury'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setPlanets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;##&lt;/span&gt;&lt;span class="c"&gt;  Will just pass in an empty, zero-length array&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Other Syntax Information&lt;/h4&gt;
&lt;h5&gt;Comments&lt;/h5&gt;
&lt;p&gt;In VTL, A single line comment begins with &lt;code&gt;##&lt;/code&gt; and finishes at the end of the line. Example: &lt;code&gt;## This is a single line comment.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-line&lt;/strong&gt; comments, which begin with &lt;code&gt;#*&lt;/code&gt; and end with &lt;code&gt;*#&lt;/code&gt;, are available to handle this scenario.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;This is text that is outside the multi-line comment.&lt;/span&gt;
&lt;span class="x"&gt;Online visitors can see it.&lt;/span&gt;
&lt;span class="x"&gt;*&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; Thus begins a multi-line comment. Online visitors won't&lt;/span&gt;
&lt;span class="x"&gt; see this text because the Velocity Templating Engine will&lt;/span&gt;
&lt;span class="x"&gt; ignore it.&lt;/span&gt;
&lt;span class="x"&gt;*&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Here is text outside the multi-line comment; it is visible.&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;User can also set &lt;strong&gt;javadoc-style&lt;/strong&gt; annotation in VTL comment block:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="c"&gt;**&lt;/span&gt;
&lt;span class="c"&gt;This is a VTL comment block and&lt;/span&gt;
&lt;span class="c"&gt;may be used to store such information&lt;/span&gt;
&lt;span class="c"&gt;as the document author and versioning&lt;/span&gt;
&lt;span class="c"&gt;information:&lt;/span&gt;
&lt;span class="c"&gt;@author&lt;/span&gt;
&lt;span class="c"&gt;@version 5&lt;/span&gt;
&lt;span class="c"&gt;*&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Java</category><category>Velocity</category><guid>http://pengyin-shan.com/posts/2015/Java/apache-velocity-basics.html</guid><pubDate>Wed, 11 Nov 2015 05:00:00 GMT</pubDate></item><item><title>RequestDispacher and Redirection in Java Web App</title><link>http://pengyin-shan.com/posts/2015/Java/requestdispacher-redirection-in-java.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This post only talks about &lt;code&gt;RequestDispacher&lt;/code&gt; in Java web app. If you want to know more about using servlet in Java, I have another related post: &lt;a href="http://pengyin-shan.com/blog/ajax-and-java-servlet"&gt;Ajax and Java Servlet&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Dispach&lt;/h4&gt;
&lt;p&gt;This &lt;a href="http://www.xyzws.com/servletfaq/what-is-the-defferent-between-getnameddispatcher-and-getrequestdispatcher/3"&gt;article&lt;/a&gt; from www.xyzws.com is very useful.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RequestDispacher&lt;/code&gt; is used to formard a client's request to another 'place', which including another servlet, another JSP, etc.&lt;/p&gt;
&lt;p&gt;In a servlet, there are three ways to get RequestDispacher:&lt;/p&gt;
&lt;h5&gt;RequestDispatcher dispatch = request.getRequestDispatcher(path);&lt;/h5&gt;
&lt;p&gt;Using this, &lt;em&gt;path&lt;/em&gt; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;either a path related to your current request, such as &lt;code&gt;subhome.html&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or a servlet name in your &lt;code&gt;web.xml&lt;/code&gt; file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or a abosute path related to your current contaxt, such as &lt;code&gt;/subpage/subjome.jsp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;RequestDispatcher dispatch = getServletContext.getRequestDispatcher(path)&lt;/h5&gt;
&lt;p&gt;Using this, &lt;em&gt;path&lt;/em&gt; &lt;strong&gt;must&lt;/strong&gt; start with &lt;code&gt;/&lt;/code&gt;, such as &lt;code&gt;/subpage/subjome.jsp&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;RequestDispatcher dispatch = getServletContext.getNamedDispatcher("string")&lt;/h5&gt;
&lt;p&gt;This method must take the servlet name as its parameter. The servlet name is definded in &lt;code&gt;web.xml&lt;/code&gt; as  &lt;servlet-name&gt; sub-element of the &lt;servlet&gt; element. The request is dispatched to that corresponding servlet.&lt;/servlet&gt;&lt;/servlet-name&gt;&lt;/p&gt;
&lt;p&gt;Example in &lt;code&gt;web.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Use testProctor for getting RequestDispatcher --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;testProctor&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.test.proctortest&lt;span class="nt"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;testProctor&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/test_proctor&lt;span class="nt"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Before/After get your RequestDispacher, you can use &lt;code&gt;request.addAttribute(something)&lt;/code&gt; or other functions to add stuff to your request.&lt;/p&gt;
&lt;h4&gt;Go to another place&lt;/h4&gt;
&lt;p&gt;After you finish process HttpRequest or HttpResponse, there are three ways to 'leave' for another place:&lt;/p&gt;
&lt;h5&gt;RequestDispatcher.forward(request, response) | RequestDispatcher.include(request, response)&lt;/h5&gt;
&lt;p&gt;There is a greate &lt;a href="http://way2java.com/servlets/difference-between-include-and-forward-in-requestdispatcher/"&gt;article&lt;/a&gt; from way2java.com to explain the difference between &lt;code&gt;RequestDispatcher.forward()&lt;/code&gt; and &lt;code&gt;RequestDispatcher.include()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are main differences bewtween these two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;include()&lt;/code&gt; will &lt;strong&gt;include&lt;/strong&gt; another file in your current file, the send back to client. This is like &lt;code&gt;&amp;lt;include /footer.jsp/&amp;gt;&lt;/code&gt; but on server side. &lt;code&gt;forward()&lt;/code&gt; will &lt;strong&gt;forward&lt;/strong&gt; the client to another page/servlet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;include()&lt;/code&gt; will return back to original servlet, but &lt;code&gt;forward()&lt;/code&gt; will go directly to client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, if you need response from &lt;em&gt;two&lt;/em&gt; servlet, use &lt;code&gt;include()&lt;/code&gt;. If you only need reponse from last servlet, use &lt;code&gt;forward()&lt;/code&gt;. &lt;em&gt;Note include() does have limitation for second servlet accessing information from first servlet&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;include()&lt;/code&gt; will give client the response from the &lt;strong&gt;same&lt;/strong&gt; servlet which he requested. &lt;code&gt;forward()&lt;/code&gt; will give client the response from a different servlet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally, you want to use &lt;code&gt;include()&lt;/code&gt; when &lt;strong&gt;static&lt;/strong&gt; information needs to be included, such as Banner Content or Copyright Information. &lt;code&gt;forward()&lt;/code&gt; should be used to include &lt;strong&gt;dynamic&lt;/strong&gt; information, or when you want to use servlet as a Controller.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;HttpResponse.sendRedirect(String)&lt;/h5&gt;
&lt;p&gt;The differnce between &lt;code&gt;forward()/include()&lt;/code&gt; and &lt;code&gt;HttpResponse.sendRedirect()&lt;/code&gt; is very obvious:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SendRedirect&lt;/code&gt; is just for re-direction. If you have any data, it has to be transferred by &lt;strong&gt;session&lt;/strong&gt; or being included in &lt;strong&gt;URL&lt;/strong&gt;. This request is &lt;strong&gt;visible&lt;/strong&gt; in browser as a new request. i.e. it is a &lt;strong&gt;client side redirect&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;forward()/include()&lt;/code&gt; is server side operation, which is not visible to browser. You can use &lt;code&gt;request.getAttribute()&lt;/code&gt; to get data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Ajax</category><category>Java</category><category>Servlet</category><guid>http://pengyin-shan.com/posts/2015/Java/requestdispacher-redirection-in-java.html</guid><pubDate>Wed, 05 Aug 2015 04:00:00 GMT</pubDate></item><item><title>Ajax and Java Servlet</title><link>http://pengyin-shan.com/posts/2015/Java/ajax-and-java-servlet.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;I was working on an old Java web application today. This java web app used to pass data by using URL parameter, and I wanted to change it to passing data by using AJAX with JSON object, since there will be more data being passed in the future.&lt;/p&gt;
&lt;p&gt;After working a while I realized I need to write this post becasue:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pure JSP/Servlet java app is a little bit different from Spring MVC Java web app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm digging into Spring MVS so much that it's a little bit tough to change back to old way :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, if you have a JSP/Servlet Java web app and you want to use AJAX with JSON object, you have to write code in three places:&lt;/p&gt;
&lt;h4&gt;1. JSP with jQuery&lt;/h4&gt;
&lt;p&gt;You want to have &lt;code&gt;jQuery&lt;/code&gt; library in your JSP file to make sure you can use AJAX.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'your &amp;lt;url-pattern&amp;gt; in web.xml'&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json_object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;//mimeType: 'application/json'&lt;/span&gt;
        &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//Process your data that is being passed back...&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorThrown&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//Deal with error occation&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//New Version:&lt;/span&gt;
 &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'your &amp;lt;url-pattern&amp;gt; in web.xml'&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json_object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//Process your data that is being passed back...&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="c1"&gt;//Deal with error occation&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="c1"&gt;//Same as 'complete' in old version, operate after done/fail&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//You can also use $.post(url, data, success, dataType) as a new way&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;In the code above, &lt;code&gt;contentType&lt;/code&gt; and &lt;code&gt;dataType&lt;/code&gt; (and &lt;code&gt;mimeType&lt;/code&gt; if exists) is very important because wrong value of these attributes can give you a &lt;code&gt;404&lt;/code&gt; or &lt;code&gt;500&lt;/code&gt; error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;contentType&lt;/h5&gt;
&lt;p&gt;Default value: &lt;code&gt;application/x-www-form-urlencoded; charset=UTF-8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the data type &lt;strong&gt;when you send data to server&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;dataType&lt;/h5&gt;
&lt;p&gt;Default value: Guess(&lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This is the data type &lt;strong&gt;when server pass data back to you&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;mimeType&lt;/h5&gt;
&lt;p&gt;A mime type to override the XHR mime type. This is the data type &lt;strong&gt;when server pass data back to you&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Form Mozilla, MIME types describe the media type of content either in email or served by web servers or web applications.&lt;/p&gt;
&lt;p&gt;MIME types are intended to help guide a web browser in &lt;em&gt;how the content is to be processed and displayed&lt;/em&gt;. Examples of MIME types are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text/html&lt;/code&gt; for normal web pages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt; for plain text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/octet-stream&lt;/code&gt; meaning "download this file"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/x-java-applet&lt;/code&gt; for Java™ applets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/pdf&lt;/code&gt; for Adobe® PDF documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you want you browser to access data like &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;dataType&lt;/code&gt; is good enough. However, if you want to let your browser detect PDF file or other data types, you need to set &lt;code&gt;mimeType&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;2. web.xml&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;After working with Spring MVC for a while, I realizae I can forget web.xml easily. Make sure you register your servlet in web.xml.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to regiseter your servlet in &lt;code&gt;web.xml&lt;/code&gt; file in your project. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Give a servlet name for using in web.xml --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;proctorprocess&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- This is the class of your servlet --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;edu.fsu.odl.cat.cber2.ProctorProcessServlet&lt;span class="nt"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Same servlet name as above --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;proctorprocess&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- This is the url you want to put as url --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/ProctorProcess&lt;span class="nt"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;3. Servlet&lt;/h4&gt;
&lt;p&gt;If you pass JSON object to your servlet, you may want to use &lt;code&gt;org.json&lt;/code&gt;, &lt;code&gt;com.fasterxml.jackson&lt;/code&gt; or &lt;code&gt;gson&lt;/code&gt; external library to help you dealing with JSON object in Java.&lt;/p&gt;
&lt;p&gt;Example code for post operation:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//You want your class extends HttpServlet&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProctorProcessServlet&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HttpServlet&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;BufferedReader&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInputStream&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//json should be the string of your JSON object&lt;/span&gt;
                &lt;span class="c1"&gt;//Process your JSON object&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;//Assume you want to pass JSON object back&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContentType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;PrintWriter&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWriter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;JSONObject&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//Process sample&lt;/span&gt;
             &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
             &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
             &lt;span class="c1"&gt;//Now you finish your post operation and come back to JSP&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//...&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This post will be udpated when I learned more about AJAX in my work experience.&lt;/p&gt;
&lt;h4&gt;Tips&lt;/h4&gt;
&lt;h5&gt;org.apache.catalina.LifecycleException: Failed to start component&lt;/h5&gt;
&lt;p&gt;If you include &lt;code&gt;org.json&lt;/code&gt; jar file in your project, and you encourter &lt;code&gt;org.apache.catalina.LifecycleException: Failed to start component&lt;/code&gt; exception when you try to deploy to Tomcat:&lt;/p&gt;
&lt;p&gt;Make sure you add your jar files to &lt;code&gt;Web Deployment Assebly&lt;/code&gt; in your project properies. Following &lt;a href="http://stackoverflow.com/questions/16362302/java-servlet-error-with-jsonobject"&gt;this post&lt;/a&gt; and you will be fine.&lt;/p&gt;&lt;/div&gt;</description><category>Ajax</category><category>Java</category><category>jQuery</category><category>Servlet</category><guid>http://pengyin-shan.com/posts/2015/Java/ajax-and-java-servlet.html</guid><pubDate>Mon, 03 Aug 2015 04:00:00 GMT</pubDate></item><item><title>JUnit Basics</title><link>http://pengyin-shan.com/posts/2015/Java/junit-basics.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tutorialspoint.com//junit/index.htm"&gt;JUnit Tutorial from Tutorialspoint.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;Unit Test Case&lt;/code&gt; is a part of code which ensures that the another part of code (method) works as expected. To achieve those desired results quickly, test framework is required.&lt;/p&gt;
&lt;p&gt;JUnit is perfect unit test framework for java programming language.&lt;/p&gt;
&lt;h3&gt;Test Framework&lt;/h3&gt;
&lt;h4&gt;Features&lt;/h4&gt;
&lt;p&gt;JUnit test framework provides following important features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Fixtures&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Test suites&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Test runners&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JUnit classes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Fixtures&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Fixtures&lt;/code&gt; is a fixed state of a set of &lt;strong&gt;objects&lt;/strong&gt; used as a baseline for running tests.&lt;/p&gt;
&lt;p&gt;The purpose of a test fixture is to ensure that there is a well known and &lt;strong&gt;fixed environment&lt;/strong&gt; in which tests are run so that results are repeatable. It includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setUp()&lt;/code&gt; method which runs before every test invocation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tearDown()&lt;/code&gt; method which runs after every test method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example Code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;junit.framework.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JavaTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;// setUp() method: assigning the values&lt;/span&gt;
   &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// test method to add two values&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testAdd&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//No tearDown() in this example&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Test Suite&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Test suite&lt;/code&gt; means &lt;strong&gt;bundle&lt;/strong&gt; a few unit test cases and run it together.&lt;/p&gt;
&lt;p&gt;In JUnit, both &lt;code&gt;@RunWith&lt;/code&gt; and &lt;code&gt;@Suite&lt;/code&gt; annotation are used to run the suite test.&lt;/p&gt;
&lt;p&gt;Here is an example which uses TestJunit1 &amp;amp; TestJunit2 test classes from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Suite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//JUnit Suite Test with @Runwith and @Suite annotation&lt;/span&gt;
&lt;span class="nd"&gt;@RunWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Suite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Suite.SuiteClasses&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="n"&gt;TestJunit1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TestJunit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JunitTestSuite&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//@Test Annotation&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Test Runner&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Test runner&lt;/code&gt; is used for &lt;strong&gt;executing&lt;/strong&gt; the test cases.&lt;/p&gt;
&lt;p&gt;Here is an example which assumes TestJunit test class already exists, from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.JUnitCore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.Result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.notification.Failure&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//Note this line of using exiting TestJunit.class&lt;/span&gt;
      &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JUnitCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runClasses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestJunit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFailures&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wasSuccessful&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;JUnit Classes&lt;/h5&gt;
&lt;p&gt;JUnit classes are important classes which is used in writing and testing JUnits.&lt;/p&gt;
&lt;p&gt;Some of the important classes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Assert&lt;/code&gt; which contain a set of assert methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TestCase&lt;/code&gt; which contain a test case defines the fixture to run multiple tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TestResult&lt;/code&gt; which contain methods to collect the results of executing a test case.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;JUnit Basic Usage&lt;/h4&gt;
&lt;h5&gt;1. Create a Message Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;* This class prints the given message on console.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageUtil&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;//Constructor&lt;/span&gt;
   &lt;span class="c1"&gt;//@param message to be printed&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// prints the message&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;2. Create a Test Case Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;//Use the message class above&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//Use assestion for printing out message&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;3. Create a Test Runner Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.JUnitCore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.Result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.notification.Failure&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//User the test class created above&lt;/span&gt;
      &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JUnitCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runClasses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestJunit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//Print failure and successful messages&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFailures&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wasSuccessful&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Writing Test with POJOs&lt;/h4&gt;
&lt;p&gt;To write a test for a POJO class, we need following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;POJO&lt;/strong&gt; class which defines a object in your business login&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Business Logic&lt;/strong&gt; class which includes: a. methods for testing, using the POJO class mentioned above b. test class using business login&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Test Runner&lt;/strong&gt; class which is similar as what we have above for testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;p&gt;POJO class example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmployeeDetails&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monthlySalary&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   - @return the name&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   - @param name the name to set&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//Following parts are skipped&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Business Logic class example:&lt;/p&gt;
&lt;p&gt;First, Set up a method which needs to be tested:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmpBusinessLogic&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Calculate the yearly salary of employee&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateYearlySalary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EmployeeDetails&lt;/span&gt; &lt;span class="n"&gt;employeeDetails&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;yearlySalary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;yearlySalary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employeeDetails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonthlySalary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;yearlySalary&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, created a test business logic class with &lt;strong&gt;assestion&lt;/strong&gt; and &lt;strong&gt;@Test&lt;/strong&gt; annotation:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestEmployeeDetails&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;EmpBusinessLogic&lt;/span&gt; &lt;span class="n"&gt;empBusinessLogic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EmpBusinessLogic&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;EmployeeDetails&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EmployeeDetails&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;// test to check yearly salary&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testCalculateYearlySalary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rajeev"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMonthlySalary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empBusinessLogic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateYearlySalary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;96000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Test Runner class example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.JUnitCore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.Result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.notification.Failure&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JUnitCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runClasses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestEmployeeDetails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFailures&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wasSuccessful&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Assertion and Annotation&lt;/h4&gt;
&lt;h5&gt;Assertion&lt;/h5&gt;
&lt;p&gt;This class provides a set of assertion methods useful for writing tests. &lt;em&gt;Only failed assertions are recorded.&lt;/em&gt;&lt;/p&gt;
&lt;h6&gt;List of Assertion Methods&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assertEquals&lt;/code&gt;: Check that two primitives/Objectes are equal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assertTrue&lt;/code&gt; or &lt;code&gt;assertFalse&lt;/code&gt;: Check that a condition is true/false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertNull&lt;/strong&gt; or &lt;strong&gt;assertNotNull&lt;/strong&gt;: Check that a condition is null/not null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertSame&lt;/strong&gt; or &lt;strong&gt;assertNotSame&lt;/strong&gt;: Check that if two object references &lt;em&gt;point&lt;/em&gt; to the same/not same object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertArrayEquals&lt;/strong&gt;: Check whether two arrays are equal to each other&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Annotation&lt;/h5&gt;
&lt;p&gt;The annotation in JUnit gives us information about test methods, include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;which methods are going to run before &amp;amp; after test methods,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;which methods run before &amp;amp; after all the methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;which methods or class will be ignore during execution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;List of Annotations&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Test&lt;/code&gt;: The Test annotation tells JUnit that the &lt;strong&gt;public void method&lt;/strong&gt; to which it is attached can be run as a test case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Before&lt;/code&gt;: Several tests need similar objects created before they can run. Annotating a public void method with @Before causes that method to be &lt;strong&gt;run before each Test method&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@After&lt;/code&gt;: If you allocate external resources in a Before method &lt;em&gt;you need to release them after the test runs&lt;/em&gt;. Annotating a public void method with @After causes that method to be run after the Test method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@BeforeClass&lt;/code&gt;: Annotating a public static void method with @BeforeClass causes it to be &lt;strong&gt;run once&lt;/strong&gt; before any of the test methods in the class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@AfterClass&lt;/code&gt;: This will perform the method after all tests have finished. This can be used to perform &lt;strong&gt;clean-up activities&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Ignore&lt;/code&gt;: The Ignore annotation is used to ignore the test and that &lt;strong&gt;test will not be executed&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Suite Test&lt;/h4&gt;
&lt;p&gt;Test suites means bundle a few unit test cases and run it together. In JUnit, both &lt;code&gt;@RunWith&lt;/code&gt; and &lt;code&gt;@Suite&lt;/code&gt; annotation are used to run the suite test.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;* This class prints the given message on console.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageUtil&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;//Constructor&lt;/span&gt;
   &lt;span class="c1"&gt;//@param message to be printed&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// prints the message&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// add "Hi!" to the message&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 2: Create Business Login Class with Business Login Test Class&lt;/h5&gt;
&lt;p&gt;Business Logic class with Methods for testing:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Business Logic Test Class with Assertions:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step3: Create Test Suite Class using @RunWith and @Suite annotation&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Suite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//@RunWith takes Suite.class parameter&lt;/span&gt;
&lt;span class="nd"&gt;@RunWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Suite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Suite.SuiteClasses&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="c1"&gt;//A list of unit tests included in this test suite&lt;/span&gt;
   &lt;span class="n"&gt;TestJunit1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;TestJunit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JunitTestSuite&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Create Test Runner Classes&lt;/h5&gt;
&lt;p&gt;Same code as examples above&lt;/p&gt;
&lt;h4&gt;Ignore Test&lt;/h4&gt;
&lt;p&gt;Sometimes it happens that our code is not ready and test case written to test that method/code will fail if run. The &lt;code&gt;@Ignore&lt;/code&gt; annotation helps in this regards.&lt;/p&gt;
&lt;p&gt;A test method annotated with @Ignore &lt;strong&gt;will not be executed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If a test class is annotated with @Ignore then none of its test methods will be executed.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 2: Create Business Login Class with Business Login Test Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 3: Create Test Runner Class with @Ignore Annotation&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Note @Ignore is the annotation for test runner class&lt;/span&gt;
&lt;span class="nd"&gt;@Ignore&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you run the code above, you will always pass all test because none of test with @Test annotation above is excuted.&lt;/p&gt;
&lt;h4&gt;Time Test&lt;/h4&gt;
&lt;p&gt;If a test case takes more time than specified number of milliseconds then JUnit will automatically mark it as failed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;timeout&lt;/code&gt; parameter is used along with @Test annotation.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 2: Create Test Class with Timeout Setting&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//Add timeout parameter for @Test annotation&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 3: Create Test Runner Class&lt;/h5&gt;
&lt;p&gt;Same regular Test Runner class as examples above&lt;/p&gt;
&lt;h4&gt;Exceptions Test&lt;/h4&gt;
&lt;p&gt;You can test the code &lt;em&gt;whether code throws desired exception or not&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;expected&lt;/strong&gt; parameter is used along with @Test annotation.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 2: Create Test Class with Exception Setting&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//Put specific exception class as parameter&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArithmeticException&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 3: Create Test Runner Class&lt;/h5&gt;
&lt;p&gt;Same regular Test Runner class as examples above&lt;/p&gt;
&lt;h4&gt;Parameterized Test&lt;/h4&gt;
&lt;p&gt;Parameterized tests allow developer to &lt;em&gt;run the same test over and over again using different values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Five steps to follow for parameterized test:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Annotate test class with `@RunWith(Parameterized.class)``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a public static method annotated with &lt;code&gt;@Parameters&lt;/code&gt; that returns a &lt;strong&gt;Collection of Objects&lt;/strong&gt; (as Array) as test data set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a public constructor that takes in what is equivalent to one "row" of test data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an instance variable for each "column" of test data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your tests case(s) using the instance variables as the source of the test data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The test case will be invoked once per each row of data.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Business Logic class with Methods for Testing&lt;/h5&gt;
&lt;p&gt;Exmaple code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrimeNumberChecker&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;primeNumber&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primeNumber&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primeNumber&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
         &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 2: Create a Business Logic Parameterized Test Class&lt;/h5&gt;
&lt;p&gt;Exmaple code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Arrays&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Collection&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Before&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Parameterized&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Parameterized.Parameters&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Parameterized.class works as parameter of @RunWith&lt;/span&gt;
&lt;span class="nd"&gt;@RunWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parameterized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrimeNumberCheckerTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;PrimeNumberChecker&lt;/span&gt; &lt;span class="n"&gt;primeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="nd"&gt;@Before&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;primeNumberChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PrimeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// Each parameter should be placed as an argument here&lt;/span&gt;
   &lt;span class="c1"&gt;// Every time runner triggers, it will pass the arguments&lt;/span&gt;
   &lt;span class="c1"&gt;// from parameters we defined in primeNumbers() method&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PrimeNumberCheckerTest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inputNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;expectedResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//Use @Parameterized.Parameters for defining collection of test data&lt;/span&gt;
   &lt;span class="nd"&gt;@Parameterized.Parameters&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt; &lt;span class="nf"&gt;primeNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//Note it returns an Array as collection&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;});&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// This test will run 4 times since we have 5 parameters defined&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrimeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Parameterized Number is : "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 3: Create Test Runner Class&lt;/h5&gt;
&lt;p&gt;Same regular Test Runner class as examples above&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JUnit</category><category>Software Testing</category><guid>http://pengyin-shan.com/posts/2015/Java/junit-basics.html</guid><pubDate>Fri, 24 Jul 2015 04:00:00 GMT</pubDate></item><item><title>Spring Tips</title><link>http://pengyin-shan.com/posts/2015/Java/spring-tips.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;hr&gt;
&lt;p&gt;In Spring MVC, if AJAX pass back a &lt;code&gt;String&lt;/code&gt;, use &lt;code&gt;JSON.parse()&lt;/code&gt; to transfer it to JSON object first.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Use Session Object in Controller&lt;/h4&gt;
&lt;p&gt;Way1:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="o"&gt;...(...&lt;/span&gt;&lt;span class="na"&gt;HttpSession&lt;/span&gt; &lt;span class="n"&gt;sessionObj&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;sessionobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;name_of_attribute&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attribute_object&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"redirect:/..."&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Way2:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="o"&gt;...(...&lt;/span&gt;&lt;span class="na"&gt;HttpSevletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;HttpSession&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Object_Type&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object_Type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name_of_attribute"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//Object_Type: int, String, float, etc&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Different from &lt;code&gt;flash attribute&lt;/code&gt;, if we use session, attribute in front-end will not be erased after reloading.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Spring MVC Form Tips&lt;/h3&gt;
&lt;h4&gt;Spring Form Validation:&lt;/h4&gt;
&lt;p&gt;Way 1:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form:form&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="na"&gt;onsubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'return valid()'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--. Code... --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form:form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//...return true;&lt;/span&gt;
    &lt;span class="c1"&gt;//...return false;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Way 2:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form:form&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--. Code... --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"valid(event)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();;&lt;/span&gt;

    &lt;span class="c1"&gt;//...Add Validation JavaScript&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#form_id'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Submit Spring Form in jQuery:&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#Form_ID'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;all_inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//value of &amp;lt;form:input&amp;gt;&lt;/span&gt;
                &lt;span class="c1"&gt;//The is a way of get Spring form input value in JavaScript&lt;/span&gt;
                &lt;span class="c1"&gt;//i is index, v is value. You can use this method to iterate JSON object&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;If you add &lt;code&gt;value&lt;/code&gt; attribute for &lt;code&gt;&amp;lt;form:input&amp;gt;&lt;/code&gt;, you may got &lt;code&gt;No Such Element&lt;/code&gt; error&lt;/p&gt;
&lt;p&gt;If you are using Eclipse, comment your unwanted Spring code will not work! You should remove unwanted Spring code instead of commenting them, because Eclipse will compile Spring code anyway, and you may get error because of that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3&gt;Spring and AJAX&lt;/h3&gt;
&lt;p&gt;I wrote any post about Spring and AJAX &lt;a href="http://pengyin-shan.com/ajax-and-spring-mvc-controller.html"&gt;here&lt;/a&gt;.
Post Method in jQuery:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"application/json; charset = urf-8;"&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'...'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//...;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//...;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Post Method in Spring Controller:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/your_mapping_url"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;&lt;span class="n"&gt;RequestMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nd"&gt;@ResponseBody&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ModelAndView&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBoday&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//...You may want to parse json_obj to JSONObject&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;In Java, a &lt;code&gt;Gson&lt;/code&gt; library from &lt;a href="https://code.google.com/p/google-gson/"&gt;Google&lt;/a&gt; can transfer Java &lt;code&gt;Object&lt;/code&gt; to &lt;code&gt;JSONObject&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object_Instance&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Java</category><category>Spring</category><guid>http://pengyin-shan.com/posts/2015/Java/spring-tips.html</guid><pubDate>Tue, 16 Jun 2015 04:00:00 GMT</pubDate></item><item><title>Java Knowledge: HashCode</title><link>http://pengyin-shan.com/posts/2015/Java/java-knowledge-hashcode.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;I touched re-write &lt;code&gt;equal()&lt;/code&gt; when I was doing work in Java Developement, then I learned these exists a &lt;code&gt;hashCode()&lt;/code&gt; method that I must implement if I re-write &lt;code&gt;equal()&lt;/code&gt; for objects.&lt;/p&gt;
&lt;p&gt;I found very useful posts: &lt;a href="http://tutorials.jenkov.com/java-collections/hashcode-equals.html"&gt;Java Collections - hasCode() and equals()&lt;/a&gt;, and &lt;a href="http://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/"&gt;The 3 things you should know about hashCode()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also refer to &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()"&gt;Oracle API&lt;/a&gt; for &lt;code&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try to avoid change hashCode() unless you are writing hash-related application.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Basic Usage&lt;/h4&gt;
&lt;p&gt;When you insert &lt;strong&gt;objects&lt;/strong&gt; to &lt;code&gt;HashTable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; or &lt;code&gt;HashSet&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; is called, together with &lt;code&gt;equal()&lt;/code&gt;. For example, in &lt;code&gt;hashMap.put("A",a);&lt;/code&gt;, both &lt;code&gt;equal()&lt;/code&gt; and &lt;code&gt;hasCode()&lt;/code&gt; are called.&lt;/p&gt;
&lt;p&gt;To insert stuff to hash table, you need a hascode to calculate the key for this object. Later you will need hashCode to search the object: hash code &lt;strong&gt;pointing to some area, where you may found the key.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From Oracle API, &lt;code&gt;hashCode&lt;/code&gt; returns a hash code, which is a &lt;code&gt;int&lt;/code&gt; value for the object.&lt;/p&gt;
&lt;p&gt;You can use same way you add &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt; in &lt;code&gt;Eclipse&lt;/code&gt; to auto-generate &lt;code&gt;hashCode()&lt;/code&gt;: &lt;em&gt;RightClick -&amp;gt; Source -&amp;gt; Generate hashCode() and equals()&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;   &lt;span class="n"&gt;employeeId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;employeeId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Edit hashCode&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/***OR**/&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;employeeId&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                &lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Important Notes&lt;/h4&gt;
&lt;p&gt;If two objects are equal, based on &lt;code&gt;equal()&lt;/code&gt;, they must also have the &lt;strong&gt;same hash code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If two objects have the same hash code, they &lt;strong&gt;may not be equal&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Above means two different objects can pointing to the same grid in a hash code grid table.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You must implement &lt;code&gt;hashCode()&lt;/code&gt; when you implement &lt;code&gt;equal()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you don't implement both, original &lt;code&gt;hashCode()&lt;/code&gt; will treat your new two objects unequal, which you have re-defined &lt;code&gt;equal()&lt;/code&gt; to make them equal. I.E. Now we have two objects are equal but with different hash code. This violate first rule.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since &lt;code&gt;hashCode()&lt;/code&gt; can change &lt;strong&gt;from one java class library (e.x.String v.s. StringBuilder) to another, or from one version to another&lt;/strong&gt;,be careful and you cannot use them in &lt;code&gt;distributed&lt;/code&gt; applications.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/java-knowledge-hashcode.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Manning OCA Java SE 7 Reading Note: Chapter 3</title><link>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-3.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a post that I moved from &lt;a href="http://pengyin-shan.com/posts/2015/Java/blogpengyin.herokuapp.com"&gt; my old blog site&lt;/a&gt;. This is the reading note for &lt;strong&gt;OCA Java SE 7 Certification Guide&lt;/strong&gt; from &lt;strong&gt;Manning&lt;/strong&gt;. &lt;em&gt;Please note that all definations and examples in this post are taken from the book.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Chapter 3: Methods and Encapsulation&lt;/h2&gt;
&lt;p&gt;This chapter mainly covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Defining the &lt;strong&gt;scope&lt;/strong&gt; of variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explaining an object’s &lt;strong&gt;life cycle&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating methods with primitive and object arguments and return values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating &lt;strong&gt;overloaded&lt;/strong&gt; methods and constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reading and writing to object fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calling methods on objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applying &lt;strong&gt;encapsulation&lt;/strong&gt; principles to a class&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.1 Scope of Variables&lt;/h3&gt;
&lt;p&gt;Valid scope of variable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Local&lt;/code&gt; variable (also known as method-local variables)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Method parameter&lt;/code&gt; (also known as method arguments)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Instance variable&lt;/code&gt; (also known as attributes, fields, and nonstatic variables)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Class variable&lt;/code&gt; (also known as static variables)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;life span&lt;/strong&gt; of a variable is determined by its &lt;strong&gt;scope&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Local Variable, Method Parameter&lt;/h4&gt;
&lt;p&gt;Local variables are defined &lt;strong&gt;within method&lt;/strong&gt;, with the &lt;strong&gt;shortest scope (life span)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The variables that accept values in a method are called &lt;strong&gt;method parameters&lt;/strong&gt;. They’re accessible &lt;strong&gt;only in the method&lt;/strong&gt; that defines them.&lt;/p&gt;
&lt;p&gt;The scope of methods parameters can never be shorter than scope of local variables.&lt;/p&gt;
&lt;h4&gt;Instance Variables, Class Variables&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Instance is another name for an object.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hence, an &lt;strong&gt;instance variable&lt;/strong&gt; is available for the &lt;strong&gt;life of an object&lt;/strong&gt;. An instance variable is declared &lt;strong&gt;within a class, outside of all of the methods&lt;/strong&gt;. It’s accessible to &lt;strong&gt;all the nonstatic methods&lt;/strong&gt; defined in a class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;class variable&lt;/strong&gt; is defined by using the keyword &lt;code&gt;static&lt;/code&gt; . A class variable &lt;strong&gt;belongs to a class&lt;/strong&gt;, not to individual objects of the class. A class variable is shared across &lt;strong&gt;all objects&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You don’t even need an object to access a class variable. It can be accessed by &lt;strong&gt;using the name of the class&lt;/strong&gt; in which it’s defined:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Instance Variable&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Class Variable&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;...){&lt;/span&gt;
        &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bob"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Use of Class Variable&lt;/span&gt;
        &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Use of Instance Variable&lt;/span&gt;

        &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Still Bob, because class variable is independent of instance&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;our&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Null. New instance hasn't define the value of this instance variable&lt;/span&gt;

        &lt;span class="c1"&gt;//You can change class variable once, then all instances will have the changed class variable&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The scope of an instance variable is longer than that of a local vari-
able or a method parameter.&lt;/p&gt;
&lt;h4&gt;Compare Scopes, Overlapping Scopes&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Local variables&lt;/code&gt; are defined &lt;strong&gt;within&lt;/strong&gt; a method and are normally used to store the intermediate results of a calculation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Method parameters&lt;/code&gt; are used to pass values to a method. These values can be manipulated and may also be stored as the state of an object by assigning them to instance variables.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Instance variables&lt;/code&gt; are used to store the &lt;strong&gt;state&lt;/strong&gt; of an object. These are the values that need to be accessed by multiple methods.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Class variables&lt;/code&gt; are used to store values that should be shared by all the objects of a class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Same Name Problem&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;you can’t define a &lt;code&gt;static variable&lt;/code&gt; and an &lt;code&gt;instance variable&lt;/code&gt; with the same name in a class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;local variable&lt;/code&gt;s and &lt;code&gt;method parameter&lt;/code&gt;s can’t be defined with the same name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A class can define &lt;code&gt;local variable&lt;/code&gt;s with the same name as the &lt;code&gt;instance or class variable&lt;/code&gt;s.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.2 Object's Life Cycle&lt;/h3&gt;
&lt;p&gt;Java doesn’t allow you to allocate or deallocate memory yourself when you create or destroy objects. Java manages memory for &lt;strong&gt;allocating&lt;/strong&gt; objects and reclaiming the memory occupied by unused objects, using Java's &lt;strong&gt;garbage collector&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Java also provides a method called &lt;code&gt;finalize&lt;/code&gt;, which is accessible to all of the classes.&lt;/p&gt;
&lt;p&gt;All Java classes can &lt;strong&gt;override&lt;/strong&gt; the method &lt;code&gt;finalize&lt;/code&gt;, which executes just before an object is garbage collected;&lt;/p&gt;
&lt;p&gt;An object’s life cycle starts when it’s &lt;strong&gt;created&lt;/strong&gt; and lasts until it &lt;strong&gt;goes out of its scope&lt;/strong&gt; or is &lt;strong&gt;no longer referenced&lt;/strong&gt; by a variable.&lt;/p&gt;
&lt;h4&gt;Create Object&lt;/h4&gt;
&lt;p&gt;An object is &lt;strong&gt;created&lt;/strong&gt; when you use the keyword &lt;code&gt;new&lt;/code&gt;. You need to &lt;strong&gt;declare&lt;/strong&gt; and &lt;strong&gt;initialize&lt;/strong&gt; it.&lt;/p&gt;
&lt;p&gt;If you just do &lt;code&gt;ClassName myclass;&lt;/code&gt;, no objects of class &lt;code&gt;ClassName&lt;/code&gt; are created in the class Object Life Cycle; it &lt;strong&gt;declares&lt;/strong&gt; only a &lt;strong&gt;variable&lt;/strong&gt; of type &lt;code&gt;ClassName&lt;/code&gt;; Only &lt;strong&gt;declaration&lt;/strong&gt; step is done.&lt;/p&gt;
&lt;p&gt;Since &lt;strong&gt;String&lt;/strong&gt;s can also be initialized using the &lt;code&gt;=&lt;/code&gt; operator, you can just do &lt;code&gt;String a = "a";&lt;/code&gt; to create a String object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you just do &lt;code&gt;new ClassName()&lt;/code&gt;, you only finish &lt;strong&gt;initialize&lt;/strong&gt; step.&lt;/p&gt;
&lt;p&gt;Creating an object in this manner will execute the relevant &lt;strong&gt;constructor&lt;/strong&gt;s of the class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Access Object&lt;/h4&gt;
&lt;p&gt;Once an object is created, it can be &lt;strong&gt;accessed &lt;/strong&gt;using its &lt;strong&gt;reference variable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It become &lt;strong&gt;inaccessible/eligible to be garbage collected&lt;/strong&gt; when it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;goes out of scope&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;its reference variable is explicitly set to &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;reassign&lt;/strong&gt; another object to this variable (i.e. &lt;strong&gt;reinitialized&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can determine only which objects are &lt;strong&gt;eligible&lt;/strong&gt; to be garbage collected.&lt;/p&gt;
&lt;p&gt;You can never determine &lt;strong&gt;when&lt;/strong&gt; a particular object will be garbage collected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e. "which objects are sure to be col- lected during the next GC cycle" is &lt;strong&gt;unknown&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;3.3 Create Methods with Arguments and Return Values&lt;/h3&gt;
&lt;p&gt;Methods are used to define the &lt;strong&gt;behavior&lt;/strong&gt; of an object.&lt;/p&gt;
&lt;h4&gt;Return&lt;/h4&gt;
&lt;p&gt;A method may or may not return a value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One that doesn’t return a value has a return type of &lt;code&gt;void&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don’t assign the returned value from a method, it’s neither a compilation error nor a runtime exception&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A method can return a &lt;strong&gt;primitive value&lt;/strong&gt; or an &lt;strong&gt;object&lt;/strong&gt; of any class.&lt;/p&gt;
&lt;p&gt;The returned value from a method may or may not be assigned to a variable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you do assignment operation with a method that is &lt;code&gt;void&lt;/code&gt;, the code will not compile.&lt;/p&gt;
&lt;p&gt;If you just run a method with return type, without any assignment, this line of code will do nothing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The variable you use to accept the returned value from a method must be compatible with the returned value. For example, you can not return a &lt;code&gt;int&lt;/code&gt; when method needs a &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For methds that define a return type, the &lt;code&gt;return&lt;/code&gt; statement must be immediately followed by a return value;&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;return&lt;/code&gt; statement in a method even if it doesn’t return a value.&lt;/p&gt;
&lt;p&gt;Usually this statement is used to define an &lt;strong&gt;early exit&lt;/strong&gt; from a method&lt;/p&gt;
&lt;p&gt;However, the return statement must be the &lt;strong&gt;last statement to execute&lt;/strong&gt; in a method, if present. Othewise code will failt to compile.&lt;/p&gt;
&lt;p&gt;The return statement need not be the last statement in a method. i.e. You can &lt;code&gt;return&lt;/code&gt; in a leaf of if loop.&lt;/p&gt;
&lt;h4&gt;Method Parameters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Method parameter&lt;/strong&gt;s are the variables that appear in the definition of a method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Method argument&lt;/strong&gt;s are the actual values that are passed to a method while executing it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ellipsis (&lt;code&gt;...&lt;/code&gt;) that follows the data type indicates that the method parameter may be passed an &lt;strong&gt;array&lt;/strong&gt; or &lt;strong&gt;multiple comma-separated values&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can define only &lt;strong&gt;one&lt;/strong&gt; ellipsis variable argument in a parameter list&lt;/p&gt;
&lt;p&gt;And it should be the &lt;strong&gt;last variable&lt;/strong&gt; in the parameter list&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, &lt;code&gt;public void test(String... a, String... b)&lt;/code&gt; and &lt;code&gt;public void test(String... a, int b)&lt;/code&gt; will not compile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rules to Remember&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can define &lt;strong&gt;multiple parameters&lt;/strong&gt; for a method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method parameter can be a primitive type or objects referenced by a class or referenced by an interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method’s parameters are separated by &lt;strong&gt;commas&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each method parameter is preceded by the name of its type. Each method
parameter must have an &lt;strong&gt;explicit type declared with its name&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can’t declare the type once and then list them separated by commas, as you can for variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A method can be an &lt;strong&gt;instance method&lt;/strong&gt; (&lt;code&gt;nonstatic&lt;/code&gt;) or a &lt;strong&gt;class method&lt;/strong&gt; (&lt;code&gt;static&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A method can take zero or more parameters but can &lt;strong&gt;return only zero or one values&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.4 Create an Overloaded Method&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Overloaded methods&lt;/strong&gt; are methods with the &lt;strong&gt;same name&lt;/strong&gt; but &lt;strong&gt;different method parameter lists&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules to Remember&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overloaded methods must have &lt;strong&gt;different method parameters&lt;/strong&gt; from one another.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overloaded methods may or may not define a different return type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overloaded methods may or may not define different access modifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overloaded methods &lt;strong&gt;can’t be defined by only changing their return type or access modifiers&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Argument List&lt;/h4&gt;
&lt;p&gt;The argument lists can differ in terms of any of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Change in the &lt;strong&gt;number of parameters&lt;/strong&gt; that are accepted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change in the &lt;strong&gt;types of parameters&lt;/strong&gt; that are accepted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change in the &lt;strong&gt;positions of the parameters&lt;/strong&gt; that are accepted (based on &lt;strong&gt;parameter type&lt;/strong&gt;, not variable names)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when you try to execute this method using values that can be passed to both versions of the overloaded methods. In this case, the code will fail to compile:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcAverage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;marks1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;marks2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;marks2&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcAverage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;marks1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;marks2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;marks2&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;myClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;myClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcAverage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Two method are same here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;3.5 Contructor of a Class&lt;/h3&gt;
&lt;p&gt;Constructors are special methods that create and return an object of the class in which they’redefined.&lt;/p&gt;
&lt;p&gt;Constructors have the &lt;strong&gt;same name as the name of the class&lt;/strong&gt; in which they’re defined, and they &lt;strong&gt;don’t specify a return type—not even &lt;code&gt;void&lt;/code&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e. A constructor &lt;strong&gt;must not&lt;/strong&gt; define any return type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Constructor is called when a object is &lt;strong&gt;initialized&lt;/strong&gt;, for example &lt;code&gt;new ClassName();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A constructor can accomplish the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Call the &lt;strong&gt;base class&lt;/strong&gt;’s constructor; this can be an &lt;strong&gt;implicit&lt;/strong&gt; or &lt;strong&gt;explicit&lt;/strong&gt; call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initialize&lt;/strong&gt; all of the &lt;strong&gt;instance variables&lt;/strong&gt; of a class with their default values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;User-Defined Constructors&lt;/h4&gt;
&lt;p&gt;An author may or may not define a constructor in a class. If the author does define a constructor in a class, it’s known as a &lt;strong&gt;user-defined constructor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because a constructor is called as soon as an object is created, you can use it to &lt;strong&gt;assign default values&lt;/strong&gt; to the instance variable of your class:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Constructor"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Because a constructor is a method, you can also &lt;strong&gt;pass method parameters&lt;/strong&gt; to it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;newAge&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newAge&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Constructor"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//You can use it via new Employee(12,"Lisa");&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;A constructor does have an &lt;strong&gt;implicit return type&lt;/strong&gt;, which is the class in which it’s defined.&lt;/p&gt;
&lt;p&gt;It creates and returns an object of its class, which is &lt;strong&gt;why you can’t define a return type for a constructor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can define constructors using &lt;strong&gt;any of the four access modifiers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you define a return tyoe for a contructor, Java will treat it as &lt;strong&gt;another method&lt;/strong&gt;, not a &lt;strong&gt;constructor&lt;/strong&gt;, which also implies that it won’t be called implicitly when you create an object of its class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Initialize Block&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;initializer block&lt;/strong&gt; is defined &lt;strong&gt;within a class&lt;/strong&gt;, not as a part of a method. It executes for every object that’s created for a class.&lt;/p&gt;
&lt;p&gt;If you define both an &lt;strong&gt;initializer&lt;/strong&gt; and a &lt;strong&gt;constructor&lt;/strong&gt; for a class, &lt;strong&gt;both of these will execute&lt;/strong&gt;. The initializer block will execute &lt;strong&gt;prior&lt;/strong&gt; to the constructor:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Employee:constructor"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Constructor&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Employee:initializer"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Initialize Block&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestEmp&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//Employee: initializer&lt;/span&gt;
    &lt;span class="c1"&gt;//Employee:constructor&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Initializer blocks are used to initialize the variables of &lt;strong&gt;anonymous classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An anonymous class is a type of &lt;strong&gt;inner class&lt;/strong&gt;. In the absence of a name, anonymous classes can’t define a constructor and rely on an initializer block to initialize their variables upon the creation of an object of their class.&lt;/p&gt;
&lt;h4&gt;Default Constructor&lt;/h4&gt;
&lt;p&gt;In the absence of a user-defined constructor, Java inserts a &lt;strong&gt;default constructor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This constructor &lt;strong&gt;doesn’t accept any method arguments&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It calls the constructor of the &lt;strong&gt;super (parent)&lt;/strong&gt; class and assigns default values to all the instance variables.&lt;/p&gt;
&lt;p&gt;Code Example of a default constructor:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Use super to call parent class constructor&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Assign defalt value to instance variables&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;if you modify the class later by adding a constructor to it, the Java compiler will &lt;strong&gt;remove the default, no-argument constructor&lt;/strong&gt; that it initially added to the class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e. &lt;strong&gt;Java defines a default constructor if and only if you don’t define a constructor.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if you defined a constructor which takes parameters, but when you create instance you just do &lt;code&gt;new ClassName()&lt;/code&gt;, the code will fail to compile.&lt;/p&gt;
&lt;h4&gt;Overloaded Constructors&lt;/h4&gt;
&lt;p&gt;Similar as overloaded methods, overloaded constructor must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;be defined using &lt;strong&gt;different argument lists&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;can’t be defined by just a change in the access &lt;strong&gt;modifiers&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because constructors don’t define a return type, there’s no point to defining invalid overloaded constructors with different return types.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overloaded constructors are invoked by using the keyword &lt;code&gt;this&lt;/code&gt; —
an implicit reference that’s accessible to all objects that &lt;strong&gt;refer to an object itself&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//this is used to call anther constructor which takes two parameters&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;newAge&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newAge&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;However, when you invoke an overloaded constructor using the keyword &lt;code&gt;this&lt;/code&gt; , it must be the &lt;strong&gt;first statement&lt;/strong&gt; in your constructor. i.e. &lt;code&gt;Employee(){ int a = 0; this(null,0); }&lt;/code&gt; cannot compile.
- Also, you can’t invoke a constructor within a class by &lt;strong&gt;using the class’s name&lt;/strong&gt;. i.e. &lt;code&gt;Employee(){ Employee(null,0); }&lt;/code&gt; will not compile.
- &lt;code&gt;Employee(){ this() }&lt;/code&gt; will create infinate loop. Code will not compile.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules to Remember&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overloaded constructors must be defined using different argument lists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overloaded constructors can’t be defined by just a change in the access modifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overloaded constructors may be defined using different access modifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A constructor can call another overloaded constructor by using the keyword &lt;code&gt;this&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A constructor can’t invoke a constructor by using its class’s name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.6 Accessing Object Fields&lt;/h3&gt;
&lt;p&gt;An &lt;strong&gt;object field&lt;/strong&gt; is another name for an &lt;strong&gt;instance variable&lt;/strong&gt; defined in a class.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;setter method&lt;/strong&gt; is used to set the value of a variable.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;getter method&lt;/strong&gt; is used to retrieve the value of a variable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The name of an object field is not determined by the name of its getter or setter methods.&lt;/strong&gt; i.e. Setter and Getter can have different name comparing to variable name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The default value of an object is &lt;code&gt;null&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The default value of an int is &lt;code&gt;0&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you set an instance variable &lt;code&gt;private&lt;/code&gt;, then you cannot use &lt;code&gt;object.instanceName&lt;/code&gt; to assign value. Will not compile.&lt;/p&gt;
&lt;p&gt;Java uses the dot notation ( &lt;code&gt;.&lt;/code&gt; ) to execute a method on a reference variable. For example: &lt;code&gt;person.setName()&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;When you call a method, you must pass to it the &lt;strong&gt;exact number of method parameters&lt;/strong&gt; that are defined by it.&lt;/p&gt;
&lt;p&gt;If a method has parameter as &lt;code&gt;...&lt;/code&gt;, you can pass multiple parameters to it, with same type:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;daysOffWork&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;daysOffWork&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;daysOffWork&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;//All code above work fine&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;3.7 Apply Encapsulation Principles to a Class&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;A well-encapsulated object doesn’t expose its internal parts to the outside world.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;the object fields of a class that &lt;strong&gt;isn’t well encapsulated are exposed outside of the class&lt;/strong&gt;. This approach enables the users of the class to &lt;strong&gt;assign arbitrary values&lt;/strong&gt; to the object fields.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Information Hiding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt; is the concept of defining variables and the methods
together in a class. Information hiding originated from the application and purpose of the concept of encapsulation.&lt;/p&gt;
&lt;p&gt;The terms encapsulation and information hiding are used inter-
changeably.&lt;/p&gt;
&lt;p&gt;By exposing object functionality only through methods, you can
&lt;strong&gt;prevent your private variables from being assigned any values&lt;/strong&gt; that don’t fit your requirements.&lt;/p&gt;
&lt;p&gt;One of the best ways to &lt;strong&gt;create a well-encapsulated class&lt;/strong&gt; is
to &lt;strong&gt;define its instance variables as private variables&lt;/strong&gt; and &lt;strong&gt;allow access to these variables using public methods&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;3.8 Passing Objects and Primitives to Methods&lt;/h3&gt;
&lt;h4&gt;Passing Primitives to Methods&lt;/h4&gt;
&lt;p&gt;The value of a primitive data type is &lt;strong&gt;copied&lt;/strong&gt; and &lt;strong&gt;passed&lt;/strong&gt; on to a method. Hence, &lt;strong&gt;the variable whose value was copied doesn’t change&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e. When you pass a primitive variable to a method, its value remains the same after the execution of the method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;modifyVal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Office&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Prints 0&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;modifyVal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Prints 1. This method never access the object field age&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Prints 0&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;It’s okay to define a method parameter with &lt;strong&gt;the same name as an instance variable&lt;/strong&gt; (or object field).&lt;/p&gt;
&lt;p&gt;Within a method, &lt;strong&gt;a method parameter takes precedence over an object field&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On the code above, when the method &lt;code&gt;modifyVal&lt;/code&gt; refers to the variable &lt;code&gt;age&lt;/code&gt; , it refers to the &lt;strong&gt;method parameter&lt;/strong&gt; &lt;code&gt;age&lt;/code&gt; , not the &lt;strong&gt;instance variable&lt;/strong&gt; &lt;code&gt;age&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;To access the instance variable &lt;code&gt;age&lt;/code&gt; within the method &lt;code&gt;modifyVal&lt;/code&gt; , the variable name &lt;code&gt;age&lt;/code&gt; needs to be &lt;strong&gt;prefixed with the keyword &lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; ( &lt;code&gt;this&lt;/code&gt; is a keyword that refers to the object itself).&lt;/p&gt;
&lt;h4&gt;Passing Object References to Methods&lt;/h4&gt;
&lt;p&gt;When you pass an &lt;strong&gt;object reference&lt;/strong&gt; to a method, &lt;strong&gt;the method can assign it to another variable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this case, the &lt;strong&gt;state&lt;/strong&gt; of the object, which was passed on to the method, remains intact/complete.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Method to swap two&lt;/span&gt;
    &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;references&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Paul"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;":"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="c1"&gt;//Prints John:Paul&lt;/span&gt;
    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()+&lt;/span&gt; &lt;span class="s"&gt;":"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="c1"&gt;//Prints John:Paul&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Explaination of &lt;code&gt;swap&lt;/code&gt; method (Make sure you won't mix order!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Person temp = p1&lt;/code&gt;: make &lt;code&gt;temp&lt;/code&gt; refer to the object referred to by &lt;code&gt;p1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p1 = p2&lt;/code&gt;: makes &lt;code&gt;p1&lt;/code&gt; refer to the object referred to by &lt;code&gt;p2&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p2 = temp;&lt;/code&gt; makes &lt;code&gt;p2&lt;/code&gt; refer to the object referred to by &lt;code&gt;temp&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;On the code above, however, &lt;strong&gt;the reference variables &lt;code&gt;person1&lt;/code&gt; and &lt;code&gt;person2&lt;/code&gt; are still referring to the objects that they passed to the method &lt;code&gt;swap&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We can change the value by using &lt;code&gt;setter&lt;/code&gt; for person_name.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-3.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Manning OCA Java SE 7 Reading Note: Chapter 6</title><link>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-6.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a post that I moved from &lt;a href="http://pengyin-shan.com/posts/2015/Java/blogpengyin.herokuapp.com"&gt;my old blog site&lt;/a&gt;. This is the reading note for &lt;strong&gt;OCA Java SE 7 Certification Guide&lt;/strong&gt; from &lt;strong&gt;Manning&lt;/strong&gt;. &lt;em&gt;Please note that all definations and examples in this post are taken from the book.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Chapter 6 Working with Inheritance&lt;/h2&gt;
&lt;p&gt;This chapter main talks about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Understanding and implementing &lt;code&gt;inheritance&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developing code that demonstrates the use of &lt;code&gt;polymorphism&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Differentiating between the type of a &lt;code&gt;reference&lt;/code&gt; and an &lt;code&gt;object&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determining when &lt;code&gt;casting&lt;/code&gt; is required&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;super&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt; to access objects and constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;abstract classe&lt;/code&gt;s and &lt;code&gt;interface&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inheritance with Classes&lt;/h3&gt;
&lt;p&gt;a class can &lt;strong&gt;inherit&lt;/strong&gt; the &lt;code&gt;propertie&lt;/code&gt;s and &lt;code&gt;behavior&lt;/code&gt; of another class. The class that inherits from another class can also define additional properties and behaviors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A class uses the keyword &lt;code&gt;extends&lt;/code&gt; to inherit a class&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;programmingLanguages&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Manager&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;teamSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reportProjectStatus&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Inheriting a class is also referred to as &lt;strong&gt;subclassing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inherited class &lt;code&gt;Employee&lt;/code&gt; is also referred to as the &lt;strong&gt;superclass&lt;/strong&gt;, &lt;strong&gt;base class&lt;/strong&gt;, or &lt;strong&gt;parent class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The classes &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Manager&lt;/code&gt; that inherit the class &lt;code&gt;Employee&lt;/code&gt; are called &lt;strong&gt;subclasses&lt;/strong&gt;, &lt;strong&gt;derived classes&lt;/strong&gt;, &lt;strong&gt;extended classes&lt;/strong&gt;, or &lt;strong&gt;child classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Code that works with the base class in a &lt;strong&gt;hierarchy tree&lt;/strong&gt; can work with all classes that are added using inheritance later.&lt;/p&gt;
&lt;p&gt;When multiple classes inherit a base class, it creates a &lt;strong&gt;logical group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inheritance enables you to &lt;strong&gt;reuse&lt;/strong&gt; code that has already been
defined by a class. Inheritance can be implemented by extending a class.&lt;/p&gt;
&lt;h4&gt;Derived Class&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Manager&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;teamSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reportProjectStatus&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;programmingLanguages&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accessBaseClassMembers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Programmer"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//Derived class Programmer can directly access members of its base class.&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When a class inherits another class, it encloses within it an object of the inherited class.&lt;/p&gt;
&lt;p&gt;For example, for the code above, the &lt;code&gt;Programer&lt;/code&gt; is a large circle, enclosing a small circle of &lt;code&gt;Employee&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;A derived class can't inherit all the members of its base class&lt;/h4&gt;
&lt;p&gt;Based on &lt;strong&gt;access modifiers&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt;— Members with &lt;code&gt;default&lt;/code&gt; access can be accessed in a derived class only if base and derived classes reside &lt;strong&gt;in the same package&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; — Members with protected access are accessible to &lt;strong&gt;all the derived classes, regardless of the packages&lt;/strong&gt; in which the base and derived classes are defined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; — Members with public access are &lt;strong&gt;visible to all&lt;/strong&gt; the other classes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A derived class &lt;strong&gt;can't inherite&lt;/strong&gt; following members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;private&lt;/code&gt; members of the base class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Base class members with &lt;code&gt;default access&lt;/code&gt;, if the base class and derived classes exist in &lt;strong&gt;separate packages&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Constructor&lt;/code&gt;s of the base class&lt;/strong&gt;. A derived class &lt;strong&gt;can call a base class’s constructors, but it doesn’t inherit them&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Derived classes &lt;strong&gt;can define&lt;/strong&gt; additional properties and behaviors.&lt;/p&gt;
&lt;p&gt;Derived classes can also &lt;strong&gt;define their own &lt;code&gt;constructor&lt;/code&gt;s and &lt;code&gt;static&lt;/code&gt; methods and variables&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A derived class can also &lt;strong&gt;hide or override its &lt;code&gt;base&lt;/code&gt; class’s members&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When a derived class defines an &lt;code&gt;instance&lt;/code&gt; or &lt;code&gt;class variable&lt;/code&gt; with &lt;strong&gt;the same name&lt;/strong&gt; as one defined from its base class, &lt;strong&gt;only these new variables and methods are visible to code using the derived class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When a derived class defines different code for a &lt;code&gt;method&lt;/code&gt; inherited from a base class by defining the method again, &lt;strong&gt;this method is treated as a special method—an &lt;code&gt;overridden&lt;/code&gt; method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can implement inheritance by using either a &lt;code&gt;concrete&lt;/code&gt; class or an &lt;code&gt;abstract&lt;/code&gt; class as a &lt;code&gt;base&lt;/code&gt; class&lt;/p&gt;
&lt;h4&gt;Abstract Base Class v.s Concreate Base Class&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Abstract Class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It groups the common properties and behavior of its derived classes, but it &lt;strong&gt;prevents itself from being instantiated&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can &lt;strong&gt;force&lt;/strong&gt; all its derived classes to &lt;strong&gt;define their own implementations&lt;/strong&gt; for a behavior by defining it as an &lt;code&gt;abstract method&lt;/code&gt; (&lt;strong&gt;a method without a body&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;abstract class&lt;/code&gt; &lt;strong&gt;may or may not define any &lt;code&gt;abstract methods&lt;/code&gt;&lt;/strong&gt;. - If an abstract base class &lt;strong&gt;defines one or more &lt;code&gt;abstract method&lt;/code&gt;s, the class must be marked as &lt;code&gt;abstract&lt;/code&gt; and the abstract methods must be implemented in all its derived classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;derived class&lt;/code&gt; &lt;strong&gt;doesn’t implement&lt;/strong&gt; all the abstract methods defined by its base class, then &lt;strong&gt;it also needs to be an &lt;code&gt;abstract class&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important Notes about Abstract Class&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can &lt;strong&gt;never create objects&lt;/strong&gt; of an &lt;code&gt;abstract class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A base class can be defined as an abstract class, even if it doesn’t define any abstract methods&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A derived class should &lt;strong&gt;implement all the abstract methods of its base class. If it doesn’t, it must be defined as an abstract derived class&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use variables of an abstract base class to refer to objects of its derived class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Important Term and Defination&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Base class&lt;/code&gt;— A class inherited by another class. The class &lt;code&gt;Employee&lt;/code&gt; is a base class for the classes &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Manager&lt;/code&gt; in the previous examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Superclass&lt;/code&gt; — A base class is also known as a superclass.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Parent class&lt;/code&gt; — A base class is also known as a parent class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Derived class&lt;/code&gt; — A class that inherits from another class. The classes Programmer and Manager are derived classes in the previous example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Subclass&lt;/code&gt; — A derived class is also known as a subclass.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Extended class&lt;/code&gt; — A derived class is also known as an extended class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inteface&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; can define &lt;strong&gt;only &lt;code&gt;abstract methods&lt;/code&gt; and &lt;code&gt;constants&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;All the members of an interface are &lt;strong&gt;implicitly &lt;code&gt;public&lt;/code&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;interface&lt;/code&gt; &lt;strong&gt;can't have &lt;code&gt;constructor&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java doesn't allow a class to inherit multiple classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, it &lt;strong&gt;allows a class to implement multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A class uses the keyword &lt;code&gt;implements&lt;/code&gt; to implement an interface.&lt;/p&gt;
&lt;p&gt;Each class can implement these methods in &lt;strong&gt;its own particular manner&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If the &lt;strong&gt;signature&lt;/strong&gt; of a method is changed in an interface, all classes that implement the interface will fail to compile.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An interface can only define &lt;code&gt;constant&lt;/code&gt;s.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once it’s assigned, you can’t change the value of a constant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The variables of an interface are implicitly &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;final&lt;/code&gt; , and &lt;code&gt;static&lt;/code&gt; .&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e.:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyInterface&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//equal to int AGE = 10; No compile error here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you implement an interface, you &lt;strong&gt;must implement all its methods&lt;/strong&gt; by using the access modifier &lt;code&gt;public&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;A class that implements an interface &lt;strong&gt;can’t make the interface’s methods more restrictive&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//implicitly public&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CEO&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;//Won't compile&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*********************/&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CEO&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;//Compile fine&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;A class can’t inherit multiple classes, but a class &lt;strong&gt;can implement multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An interface can extend multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POINTS TO NOTE ABOUT CLASS AND INTERFACE INHERITANCE&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; can inherit &lt;strong&gt;zero or one class&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; uses the keyword &lt;code&gt;extends&lt;/code&gt; to inherit a class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; can implement &lt;strong&gt;multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; uses the keyword &lt;code&gt;implements&lt;/code&gt; to implement an interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; can’t implement any class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; can inherit &lt;strong&gt;zero or more interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; uses the keyword &lt;code&gt;extends&lt;/code&gt; to inherit interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can extend a concrete class and vice versa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can implement interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can extend another abstract class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; &lt;code&gt;concrete class&lt;/code&gt; in the hierarchy must &lt;strong&gt;supply actual method implementations for all abstract methods&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reference Variable and Object Type&lt;/h3&gt;
&lt;p&gt;objects of derived classes can be referred to using a &lt;strong&gt;reference
variable of either of the following types&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Its own type&lt;/strong&gt; — An object of a class &lt;code&gt;HRExecutive&lt;/code&gt; can be referred to using an object reference variable of type &lt;code&gt;HRExecutive&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Its base class&lt;/strong&gt; — If the class &lt;code&gt;HRExecutive&lt;/code&gt; &lt;strong&gt;inherits&lt;/strong&gt; the class &lt;code&gt;Employee&lt;/code&gt;, an object of the class &lt;code&gt;HRExecutive&lt;/code&gt; can be referred to using a variable of type &lt;code&gt;Employee&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implemented interfaces&lt;/strong&gt; — If the class &lt;code&gt;HRExecutive&lt;/code&gt; implements the interface &lt;code&gt;Interviewer&lt;/code&gt; , an object of the class &lt;code&gt;HRExecutive&lt;/code&gt; can be referred using a variable of type &lt;code&gt;Interviewer&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Imporant&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a reference type is &lt;code&gt;based class&lt;/code&gt;, it &lt;strong&gt;cannot&lt;/strong&gt; access member in &lt;code&gt;derviced class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a reference type is &lt;code&gt;base class&lt;/code&gt;, it &lt;strong&gt;cannot&lt;/strong&gt; access memeber in &lt;code&gt;interface&lt;/code&gt; if derived class also implement interface. Same idea, if a reference type is &lt;code&gt;interface&lt;/code&gt;, it &lt;strong&gt;cannot&lt;/strong&gt; access memeber is &lt;code&gt;base class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a reference tyope is &lt;code&gt;own type&lt;/code&gt;, it can access everything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Interviewer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HRExecutive&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Interviewer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;specialization&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HRExecutive - conducting interview"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/************/&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Office&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HRExecutive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//not compile. Cannot access&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;specialization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Staffing"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;specialization&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="c1"&gt;//Works fine&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Pavni Gupta"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//not compile. Cannot access&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The reason we want to do above is &lt;strong&gt;you might not be interested in all the members of a derived class&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OfficeInheritanceList&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Interviewer&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;interviewers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Interviewer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
      &lt;span class="c1"&gt;//Following compile fine. Manager/HRExectuive implements interviewers&lt;/span&gt;
        &lt;span class="n"&gt;interviewers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;interviewers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HRExecutive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interviewer&lt;/span&gt; &lt;span class="n"&gt;interviewer&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;interviewers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;interviewer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;//Won't compile. You cannot initiate interface&lt;/span&gt;
        &lt;span class="n"&gt;HRExecutive&lt;/span&gt; &lt;span class="n"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Interviewer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Casting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Casting&lt;/code&gt; is the process of forcefully making a variable behave as a variable of another type.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;class&lt;/code&gt; shares an &lt;code&gt;IS-A&lt;/code&gt; or &lt;code&gt;inheritance&lt;/code&gt; relationship with another &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt;, their variables can be cast to each other’s type.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;((HRExecutive)interviewer).specialization = new String[] {"Staffing"};&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Use this and super to access objects and constructors&lt;/h3&gt;
&lt;h4&gt;this&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; reference always points to an &lt;strong&gt;object’s own instance&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Any object can use the this reference to refer to its own instance.&lt;/p&gt;
&lt;p&gt;You can use the keyword &lt;code&gt;this&lt;/code&gt; to refer to all methods and variables that are &lt;strong&gt;accessible to a class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is often being used to differentiate between &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;nstance variable&lt;/code&gt;s name:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is often being used to &lt;strong&gt;access &lt;code&gt;onstructor&lt;/code&gt;s&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Call contructor that only accept name&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;this()&lt;/code&gt; is used to call &lt;strong&gt;default &lt;code&gt;contructor&lt;/code&gt;&lt;/strong&gt; :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"NoName"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"NoAddress"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Must be first statement in this method!&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;If present, a call to a constructorfrom another constructor must be done on the first line of code of the calling constructor&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;super&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;super&lt;/code&gt; is also an object reference, but &lt;code&gt;super&lt;/code&gt; refers to the &lt;strong&gt;parent or base class of a class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printNames&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Can print difference value if two class have different setting&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The reference variable &lt;code&gt;super&lt;/code&gt; can also be used to refer to the &lt;strong&gt;constructors of the base class&lt;/strong&gt; in a&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;progLanguage&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Programmer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;progLang&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Contructor in base class which accepts two parameter&lt;/span&gt;
        &lt;span class="c1"&gt;//First statement in dervied class constructor&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;progLanguage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;progLang&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;If present, a call to a superclass’s constructor must be the &lt;em&gt;first
statement in a derived class’s constructor&lt;/em&gt;. Otherwise, a call to &lt;code&gt;super();&lt;/code&gt; (the no-arg constructor) is inserted automatically by the compiler.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;static method&lt;/code&gt;s belong to a class, not to objects of a class, &lt;strong&gt;you can’t use &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt; in &lt;code&gt;static method&lt;/code&gt;s.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Polymorphism&lt;/h3&gt;
&lt;h4&gt;Polymorphism with classes&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Polymorphism&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a class &lt;strong&gt;inherit&lt;/strong&gt;s another class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;both the base and the derived classes define methods with the &lt;strong&gt;same method signature&lt;/strong&gt; (the same method &lt;code&gt;name&lt;/code&gt; and method &lt;code&gt;parameters&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Polymorphic method&lt;/code&gt;s are also called &lt;code&gt;overridden method&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important Note about Overriden Method&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overridden methods are defined by &lt;code&gt;classe&lt;/code&gt;s and &lt;code&gt;interface&lt;/code&gt;s that share inheritance relationships.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;name&lt;/strong&gt; of the overridden method must be the &lt;strong&gt;same&lt;/strong&gt; in both the &lt;code&gt;base class&lt;/code&gt; and the &lt;code&gt;derived class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;argument list&lt;/strong&gt; passed to the overridden method must be the &lt;strong&gt;same&lt;/strong&gt; in both the &lt;code&gt;base class&lt;/code&gt; and &lt;code&gt;derived class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;return type&lt;/strong&gt; of an overriding method in the derived class &lt;strong&gt;can be the &lt;code&gt;same&lt;/code&gt;, or a &lt;code&gt;subclass&lt;/code&gt; of the return type of the overridden method in the &lt;code&gt;base class&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the overriding method returns a &lt;code&gt;subclass&lt;/code&gt; of the return type of the overridden method, it is known as a &lt;code&gt;covariant return type&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An overridden method defined in the &lt;code&gt;base class&lt;/code&gt; can be an &lt;code&gt;abstract method&lt;/code&gt; or a &lt;code&gt;non-abstract method&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access modifier&lt;/strong&gt;s for an overriding method can be the &lt;strong&gt;same or less restrictive&lt;/strong&gt; than the method being overridden, but they &lt;strong&gt;can’t be more restrictive&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Polymorphic methods &lt;strong&gt;don’t always have to be &lt;code&gt;abstract&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Polymorphism works only with &lt;code&gt;overridden method&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;Polymorphism cannot work with &lt;code&gt;overload method&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;Review: &lt;code&gt;overloaded method&lt;/code&gt;s define a method argument list with &lt;strong&gt;either a different number or type of method parameters&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Overloaded method&lt;/code&gt;s only share the same name&lt;/strong&gt;; the &lt;code&gt;JRE&lt;/code&gt; treats them like &lt;strong&gt;different methods&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the case of &lt;code&gt;overridden method&lt;/code&gt;s, &lt;strong&gt;the &lt;code&gt;JRE&lt;/code&gt; decides at &lt;code&gt;runtime&lt;/code&gt; which method should be called based on &lt;em&gt;the exact type of the object on which it’s called&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Binding of variables and methods at compile time and runtime&lt;/h4&gt;
&lt;p&gt;With inheritance, the &lt;code&gt;instance variable&lt;/code&gt;s bind at &lt;strong&gt;compile time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Method&lt;/code&gt;s bind at &lt;strong&gt;runtime&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Employee"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Programmer"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Office1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;programmer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Programmer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Type is Programmer&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Employee. Instance Variable&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programmer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Employee&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Employee. Method&lt;/span&gt;
        &lt;span class="n"&gt;programmer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Programmer. Decide at run time&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Polymorphism with Interfaces&lt;/h4&gt;
&lt;p&gt;Polymorphism can also be implemented using &lt;code&gt;interfaces&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Polymorphism with interfaces requires a &lt;code&gt;class&lt;/code&gt; to &lt;strong&gt;implement&lt;/strong&gt; an interface.&lt;/p&gt;
&lt;p&gt;Polymorphism with interfaces &lt;strong&gt;always involves &lt;code&gt;abstract method&lt;/code&gt;s from the implemented interface&lt;/strong&gt; because interfaces can define only abstract methods.&lt;/p&gt;
&lt;p&gt;Review: all the methods defined in an &lt;code&gt;interface&lt;/code&gt; are implicitly &lt;code&gt;abstract&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;base class&lt;/code&gt; implement an &lt;code&gt;interface&lt;/code&gt;, its &lt;code&gt;derviced class&lt;/code&gt; don't need to implement again. They can just &lt;code&gt;extend&lt;/code&gt; base class.&lt;/p&gt;
&lt;p&gt;Only &lt;code&gt;overridden method&lt;/code&gt;s — methods with the same method &lt;code&gt;signatures&lt;/code&gt; participate in &lt;code&gt;polymorphism&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-6.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Manning OCA Java SE 7 Reading Note: Chapter 2</title><link>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-2.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a post that I moved from &lt;a href="http://pengyin-shan.com/posts/2015/Java/blogpengyin.herokuapp.com"&gt; my old blog site&lt;/a&gt;. This is the reading note for &lt;strong&gt;OCA Java SE 7 Certification Guide&lt;/strong&gt; from &lt;strong&gt;Manning&lt;/strong&gt;. &lt;em&gt;Please note that all definations and examples in this post are taken from the book.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Chapter 2: Working with Java Data Types&lt;/h2&gt;
&lt;p&gt;This chapter main covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Primitive data&lt;/strong&gt; types in Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Literal values&lt;/strong&gt; of primitive Java data types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Object reference&lt;/strong&gt; variables in Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Valid and invalid &lt;strong&gt;identifiers&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage of Java &lt;strong&gt;operators&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modification of default operator precedence via parentheses&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.1 Primitivate Variables&lt;/h3&gt;
&lt;p&gt;A variable defined as one of the primitive data types is a &lt;strong&gt;primary variable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Primitive data types is the &lt;strong&gt;simplest data types&lt;/strong&gt; in a programming language.&lt;/p&gt;
&lt;p&gt;Java has &lt;strong&gt;eight&lt;/strong&gt; primitive data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;byte&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;short&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;long&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;float&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;double&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;String&lt;/strong&gt; is not primitive type in Java.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;char&lt;/strong&gt; and &lt;strong&gt;int&lt;/strong&gt; are the only short-name primitive data types, with low case as begining, others are all full-name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integer&lt;/strong&gt; or &lt;strong&gt;Character&lt;/strong&gt; or &lt;strong&gt;Boolean&lt;/strong&gt; is not primitive data type in Java.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Primitive Date Type can be devided to three &lt;strong&gt;categories&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Boolean: boolean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Character: char&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Numeric:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Integers: int, byte, short, long&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Floating-point/&lt;strong&gt;decimals&lt;/strong&gt;: float, double&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;boolean&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;literal&lt;/strong&gt; is a &lt;strong&gt;fixed&lt;/strong&gt; value that does not need further calculations in order for it to be assigned to any varible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;true&lt;/strong&gt; and &lt;strong&gt;false&lt;/strong&gt; are the &lt;em&gt;only&lt;/em&gt; boolean literal variables.&lt;/p&gt;
&lt;h4&gt;Numeric&lt;/h4&gt;
&lt;p&gt;Range of &lt;strong&gt;byte&lt;/strong&gt;: &lt;code&gt;-128&lt;/code&gt; to &lt;code&gt;127&lt;/code&gt;, inclusive. &lt;code&gt;8&lt;/code&gt; bits.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;default type&lt;/strong&gt; of a nondecimal number is &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To designate an integer value as a &lt;strong&gt;long&lt;/strong&gt; value, just add suffix &lt;code&gt;L&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt;: &lt;code&gt;23333000000L&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Integer literal values comes in four categories: &lt;strong&gt;binary&lt;/strong&gt;, &lt;strong&gt;decimal&lt;/strong&gt;, &lt;strong&gt;octal&lt;/strong&gt;, and &lt;strong&gt;hexoadecimal&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Binary: A &lt;strong&gt;base-2&lt;/strong&gt; system. Use prefix &lt;code&gt;0B&lt;/code&gt; or &lt;code&gt;0b&lt;/code&gt; to define it: &lt;code&gt;int b = 0B1110011;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decimal: A &lt;strong&gt;base-10&lt;/strong&gt; system. &lt;strong&gt;This is the default setting for &lt;code&gt;System.out.println()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Octal: A &lt;strong&gt;base-8&lt;/strong&gt; system, which means in octal , &lt;code&gt;10&lt;/code&gt; has decimal value &lt;code&gt;9&lt;/code&gt;. Use prefix &lt;code&gt;0&lt;/code&gt; to define it: &lt;code&gt;int o = 036620;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hex: A &lt;strong&gt;base-16&lt;/strong&gt; system, &lt;code&gt;A&lt;/code&gt;-&amp;gt;&lt;code&gt;F&lt;/code&gt; means &lt;code&gt;10-&amp;gt;16&lt;/code&gt;. Use &lt;code&gt;0X&lt;/code&gt; or &lt;code&gt;0x&lt;/code&gt; to define it.Example: &lt;code&gt;int h = 0X23232FA;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Java7, you can use &lt;strong&gt;underscores&lt;/strong&gt;. Underscore has no effect on values: &lt;code&gt;long oc = 045_13;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules to Remember&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can not &lt;strong&gt;start&lt;/strong&gt; or &lt;strong&gt;end&lt;/strong&gt; a literal value with an underscore, such as &lt;code&gt;_100_&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can not place an underscore &lt;strong&gt;right after&lt;/strong&gt; the prefixes &lt;code&gt;0b&lt;/code&gt; for binary, &lt;code&gt;0&lt;/code&gt; for octal and &lt;code&gt;0x&lt;/code&gt; for hex.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can not place an underscre &lt;strong&gt;prior&lt;/strong&gt; the an &lt;code&gt;L&lt;/code&gt; suffix for &lt;code&gt;long&lt;/code&gt; value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can not use an underscore in positions where a &lt;strong&gt;string of digits&lt;/strong&gt; is expected, such as &lt;code&gt;int i = Integer.parseInt("45_98");&lt;/code&gt;. Note this will &lt;em&gt;compile successfully&lt;/em&gt; but &lt;em&gt;fail in run time&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Java, you use &lt;strong&gt;float&lt;/strong&gt; and &lt;strong&gt;double&lt;/strong&gt; to store decimal numbers. &lt;strong&gt;float&lt;/strong&gt; is smaller and takes less space. &lt;strong&gt;float has less precision&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;default type&lt;/strong&gt; of a decial litercal is &lt;code&gt;double&lt;/code&gt; in Java. You can place a &lt;strong&gt;suffix&lt;/strong&gt; &lt;code&gt;f/F&lt;/code&gt; to transfer to to &lt;code&gt;float&lt;/code&gt; in compile time. a &lt;code&gt;D/d&lt;/code&gt; suffix can also be used to transfer to &lt;code&gt;double&lt;/code&gt;, but this can be skipped since &lt;code&gt;double&lt;/code&gt; is default.&lt;/p&gt;
&lt;p&gt;You can also assign &lt;strong&gt;scientific notation&lt;/strong&gt; as a literal decimal value:
&lt;code&gt;double test = 1.4444e4;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Java7, you can use &lt;strong&gt;underscore&lt;/strong&gt; for floating-points. Rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All rules for &lt;em&gt;numberic&lt;/em&gt; literals above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can not place an underscore &lt;strong&gt;prior&lt;/strong&gt; to a &lt;code&gt;D/d&lt;/code&gt; or &lt;code&gt;F/f&lt;/code&gt; suffix&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can not place an underscore &lt;strong&gt;adjacent(i.e. attched before or attched after)&lt;/strong&gt; to a &lt;code&gt;decimal point&lt;/code&gt;: &lt;code&gt;100_.21&lt;/code&gt; or &lt;code&gt;89._45&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;char&lt;/h4&gt;
&lt;p&gt;A char can store a single &lt;strong&gt;16-bit Unicode&lt;/strong&gt; character.&lt;/p&gt;
&lt;p&gt;Range of char: from &lt;code&gt;\&lt;/code&gt;u0000&lt;code&gt;or&lt;/code&gt;0&lt;code&gt;to&lt;/code&gt;`ufff&lt;code&gt;or&lt;/code&gt;65,535`, inclusive.&lt;/p&gt;
&lt;p&gt;Use &lt;strong&gt;single quote&lt;/strong&gt; for characters. Double quote will fail compile.&lt;/p&gt;
&lt;p&gt;Since Java store characters internally as &lt;strong&gt;unsigned integer value (i.e. positivate integer)&lt;/strong&gt;, so it's fine to &lt;strong&gt;assign positive integer&lt;/strong&gt; to a char. &lt;em&gt;Negative number will fail to compile, but you can cast&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example: &lt;code&gt;char a = 122;&lt;/code&gt;, character is transferred to &lt;code&gt;\&lt;/code&gt;u0122&lt;code&gt;. The format is first a number based on&lt;/code&gt;10&lt;code&gt;, then a number that is based on&lt;/code&gt;16`.&lt;/p&gt;
&lt;p&gt;You must use quotes to assign Unicode values to char variables: &lt;code&gt;char c = '\u0122';&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can &lt;strong&gt;cast&lt;/strong&gt; only capatible data types.&lt;/p&gt;
&lt;p&gt;If you cast a negative number for char, the sign will be recognize as a part of numberic value becuase Java does not store sign of an integer.&lt;/p&gt;
&lt;h3&gt;2.2 Identifiers&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Indentifiers&lt;/strong&gt; are names of packages, classes, interfaces, methods and variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hyphens (-)&lt;/strong&gt; are not allowed in identifier. &lt;strong&gt;Underscotres&lt;/strong&gt; are allowed.&lt;/p&gt;
&lt;h4&gt;Valid Identifiers&lt;/h4&gt;
&lt;p&gt;Unlimited length&lt;/p&gt;
&lt;p&gt;Starts with a letter ( a–z, upper- or lowercase), a &lt;strong&gt;currency sign&lt;/strong&gt;, or an underscore Uses special characters: &lt;code&gt;!&lt;/code&gt; , &lt;code&gt;@&lt;/code&gt; , &lt;code&gt;#&lt;/code&gt; , &lt;code&gt;%&lt;/code&gt; , &lt;code&gt;^&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt; ,&lt;code&gt;'&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt; ,&lt;code&gt;;&lt;/code&gt; , &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;\`` ,&lt;/code&gt;}`&lt;/p&gt;
&lt;p&gt;Can use a digit (not at the starting position)&lt;/p&gt;
&lt;p&gt;Can use an underscore (in &lt;strong&gt;any&lt;/strong&gt; position)&lt;/p&gt;
&lt;p&gt;Can use a currency sign (in any position): &lt;code&gt;$&lt;/code&gt; , &lt;code&gt;£&lt;/code&gt; , &lt;code&gt;¢&lt;/code&gt; ,&lt;code&gt;¥&lt;/code&gt; and others&lt;/p&gt;
&lt;h4&gt;Invalid Indentifier&lt;/h4&gt;
&lt;p&gt;Same spelling as a Java reserved word or keyword&lt;/p&gt;
&lt;p&gt;Starts with a Java digit ( 0 – 9 )&lt;/p&gt;
&lt;h3&gt;2.3 Object Reference Variables&lt;/h3&gt;
&lt;p&gt;The variables in Java can be categorized into two types: &lt;strong&gt;primitive variables&lt;/strong&gt; and &lt;strong&gt;reference variables&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference variables&lt;/strong&gt; are also known as &lt;strong&gt;object reference variables&lt;/strong&gt; or &lt;strong&gt;object references&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objects are instances of classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An object reference is a &lt;strong&gt;memory address&lt;/strong&gt; that points to a memory area where an object’s data is located.&lt;/p&gt;
&lt;p&gt;When an object is instantiated with the new operator, a &lt;strong&gt;heap-memory address&lt;/strong&gt; value to that object is returned. That address is usually assigned to the reference variable.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//Step 1: A new Person object is created&lt;/span&gt;
&lt;span class="c1"&gt;//Step 2: A variable named person is created in the stack with an empty ( null ) value.&lt;/span&gt;
&lt;span class="c1"&gt;//Step 3: The variable person is assigned the memory address value where the object is located.&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;strong&gt;literal value&lt;/strong&gt; of all types of object reference variables is &lt;code&gt;null&lt;/code&gt;. You can also assign a &lt;code&gt;null&lt;/code&gt; value to a reference variable explicitly.&lt;/p&gt;
&lt;p&gt;The basic difference is that primitive variables store the &lt;strong&gt;actual values&lt;/strong&gt;, whereas reference variables store the &lt;strong&gt;addresses&lt;/strong&gt; of the objects they refer to.&lt;/p&gt;
&lt;h3&gt;2.4 Operators&lt;/h3&gt;
&lt;h4&gt;Assignment Operators&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;+=&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; , &lt;code&gt;*=&lt;/code&gt; , and &lt;code&gt;/=&lt;/code&gt; operators are short forms of addition, subtraction, multiplication and division with assignment.&lt;/p&gt;
&lt;p&gt;You cannot assign larger range of values to smaller range of values. For example: &lt;code&gt;long num = 188883544333334L; int val = numl&lt;/code&gt; will give complie error. However, opposite and &lt;strong&gt;casting&lt;/strong&gt; is allowed.&lt;/p&gt;
&lt;p&gt;You cannot assisn &lt;code&gt;boolean&lt;/code&gt; to other primitive data types.&lt;/p&gt;
&lt;p&gt;You can also assign &lt;strong&gt;multiple values&lt;/strong&gt; on the &lt;strong&gt;same line&lt;/strong&gt; using the
assignment operator and comma: &lt;code&gt;int a=7, b=5, c=3;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Arithmetic Operators&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Unary operators (++/--)&lt;/strong&gt; can also be used in &lt;strong&gt;prefix&lt;/strong&gt; and &lt;strong&gt;postfix&lt;/strong&gt; notation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In prefix notation, the unary calculation run first, then closest expression run.&lt;/p&gt;
&lt;p&gt;In postfix notation, closest expression run first, then the unary calcuation run.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cloest expression&lt;/strong&gt; means the one expression that this variable needs to attend now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code example for unaray operators:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For the code above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;a++&lt;/code&gt; means &lt;code&gt;a=10&lt;/code&gt;, after expression &lt;code&gt;a=11&lt;/code&gt;. However, there is no expression before this step. &lt;strong&gt;so now totally we have &lt;code&gt;a=10&lt;/code&gt; as whole function, but the single &lt;code&gt;a&lt;/code&gt; value on right for next step is &lt;code&gt;11&lt;/code&gt;&lt;/strong&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then &lt;code&gt;+ a&lt;/code&gt; now means &lt;code&gt;+ 11&lt;/code&gt;, so now &lt;code&gt;a = 10 + 11&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then &lt;code&gt;a--&lt;/code&gt; means first do &lt;code&gt;+&lt;/code&gt;, then do &lt;code&gt;--&lt;/code&gt;. So now &lt;code&gt;a = 10 + 11 + 11&lt;/code&gt;, but single &lt;code&gt;a&lt;/code&gt; on right side now is &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then &lt;code&gt;a--&lt;/code&gt; means first do &lt;code&gt;-&lt;/code&gt;, then do &lt;code&gt;--&lt;/code&gt;. So now &lt;code&gt;a = 10 + 11 + 11 - 10&lt;/code&gt;, but single &lt;code&gt;a&lt;/code&gt; on right side now is &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then &lt;code&gt;++a&lt;/code&gt; means first make single &lt;code&gt;a = 10&lt;/code&gt;, then do &lt;code&gt;+&lt;/code&gt;. So now &lt;code&gt;a = 10 + 11 + 11 -10 + 10&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we can hava &lt;code&gt;a=32&lt;/code&gt; for final printout.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During steps above, the variable assignment is the last step. It needs to waiting for all expressions on right finish.&lt;/p&gt;
&lt;h4&gt;Relational Operators&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Relational operators&lt;/strong&gt; are used to check one condition, with two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comparing greater ( &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; ) and lesser values ( &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comparing values for equality ( &lt;code&gt;==&lt;/code&gt; ) and nonequality ( &lt;code&gt;!=&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result of the relational operation is always a &lt;strong&gt;boolean&lt;/strong&gt; value&lt;/p&gt;
&lt;p&gt;The operators &lt;code&gt;==&lt;/code&gt; (equal to) and &lt;code&gt;!=&lt;/code&gt;(not equal to) can be used to compare &lt;strong&gt;all types of primitives&lt;/strong&gt;: &lt;code&gt;char&lt;/code&gt; , &lt;code&gt;byte&lt;/code&gt; , &lt;code&gt;short&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;long&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;double&lt;/code&gt;, and &lt;code&gt;boolean&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember that you can’t apply these operators to incomparable types.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Logical Operators&lt;/h4&gt;
&lt;p&gt;These expressions should return a &lt;strong&gt;boolean&lt;/strong&gt; value.&lt;/p&gt;
&lt;p&gt;You can use the logical operators &lt;code&gt;AND (&amp;amp;&amp;amp;)&lt;/code&gt; , &lt;code&gt;OR (||)&lt;/code&gt; , and &lt;code&gt;NOT (!)&lt;/code&gt; to check multiple conditions and proceed accordingly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If there is any false, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; always return false;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If there is any true, &lt;code&gt;||&lt;/code&gt; always return true;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; is called &lt;strong&gt;short-circuit operators&lt;/strong&gt;, because as long as there is any expression that can decide the result of whole expression (Using the rule above), they will stop evaluating and give out result.&lt;/p&gt;
&lt;h5&gt;Operator Precedence&lt;/h5&gt;
&lt;p&gt;the operator on top has the &lt;strong&gt;highest&lt;/strong&gt; precedence, and operators within the same group have the same precedence and are evaluated from
&lt;strong&gt;left to right&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Exp++&lt;/code&gt;,&lt;code&gt;Exp--&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;++Exp&lt;/code&gt;, &lt;code&gt;--Exp&lt;/code&gt;, &lt;code&gt;+Exp&lt;/code&gt;, &lt;code&gt;-Exp&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;||&lt;/code&gt;  Note OR has lower precedence than AND&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;()&lt;/code&gt; i.e. parentheses to override the default operator precedence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-2.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>JSTL Reference Sheet</title><link>http://pengyin-shan.com/posts/2015/Java/jstl-reference-sheet.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;There are five types of JSTL tag Library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Core Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formatting Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSTL Functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML Tags (I skip this part)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you use JSTL library, you need to download it and put it to &lt;code&gt;webapps\ROOT\WEB-INF\lib&lt;/code&gt; directoy.&lt;/p&gt;
&lt;h3&gt;Core Tages&lt;/h3&gt;
&lt;p&gt;Make sure you include core tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Following tags are common core tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:out&amp;gt;&lt;/code&gt;: Display the result of an expression. Similar to &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; exception you use a &lt;code&gt;.&lt;/code&gt; notation to access property now.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:out value="person.age"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:set&amp;gt;&lt;/code&gt;: Evaluates an expression and uses the result to set a value of a &lt;strong&gt;JavaBean&lt;/strong&gt; or a &lt;strong&gt;java.util.Map&lt;/strong&gt; object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:set var="var_name" value="${person.age}"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:remove&amp;gt;&lt;/code&gt;: Remove a variable from either a specified scope or the first scope where the variable is found.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:remove var="var_name"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:catch&amp;gt;&lt;/code&gt;: Catches any throwable error and optionally expost it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can combine it with &lt;if&gt;&lt;/if&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:catch&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"exception"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;${person.age}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:catch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${exception!=null}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The exception is: ${exception}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt;:Display content only if &lt;code&gt;test&lt;/code&gt; is passed. &lt;code&gt;&amp;lt;c:choose&amp;gt;&lt;/code&gt; ,&lt;code&gt;&amp;lt;c:when&amp;gt;&lt;/code&gt; ,&lt;code&gt;c:otherwise&amp;gt;&lt;/code&gt; ususally are used together to create (nested) if-else loop&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:if test="${person.age&amp;gt;20}"&amp;gt;Hello World!&amp;lt;/c:if&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:choose&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${person.age&amp;gt;18}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Adult
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${12&amp;lt;person.age&amp;lt;18}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Junior
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:otherwise&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Child
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:otherwise&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:choose&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;c:import&amp;gt;&lt;/code&gt;: Work like &lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;, takes an url and allows for inclusion of content from a differenet website or an FTP server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:import var="var_name" url="http://pengyin-shan.com"/&amp;gt;&lt;/code&gt; fetches complete content from this website and would store in variable data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt;: Iterates over a collection of objects. Work like &lt;strong&gt;for&lt;/strong&gt;, &lt;strong&gt;while&lt;/strong&gt; or &lt;strong&gt;do-while&lt;/strong&gt; in Java. Possiable Parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;begin&lt;/code&gt;: Element to start with. 0 means the first item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;: Element to end with. 0 means the first item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step&lt;/code&gt;: Process every step items. Default is 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt;: Name of variable for current item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;varStatus&lt;/code&gt;: Name of variable for current loop status. Works like &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; in java.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:forEach&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${people}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt; &lt;span class="na"&gt;varStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"theCount"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
${theCount.index}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:forEach&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note: &lt;code&gt;{varStatus.index}&lt;/code&gt; starts from &lt;strong&gt;0&lt;/strong&gt;. &lt;code&gt;{varStatus.count}&lt;/code&gt; starts from &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:forTokens&amp;gt;&lt;/code&gt;: Similar as &lt;code&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt;. It is used to break a string into tokens and iterate through each of the tokens. Requested Parameter: &lt;strong&gt;delims&lt;/strong&gt;, define character that is used for division.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:url&amp;gt;&lt;/code&gt; formats a URL string and optionally put to a variable and print to page&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:param&amp;gt;&lt;/code&gt; allows proper URL request parameter to be specified with URL. Usually work with &lt;code&gt;&amp;lt;c:url&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:redirect&amp;gt;&lt;/code&gt; automatically re-direct page to another URL&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:forTokens items="a,b,c" delims="," var="charName"&amp;gt;${charName}&amp;lt;/c:forTokens&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:url&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"testUrl"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/index.jsp"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:param&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1234"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
#now testUrl is: /index.jsp?id=1234
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;c:url value=${testUrl}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:redirect&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${testUrl}"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Formatting Tags&lt;/h3&gt;
&lt;p&gt;Make sure you include formatting tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Following tags are common formatting tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:formatNumber&amp;gt;&lt;/code&gt;: format numbers, percentages and currencies. It has lots of parameters for configuration. You can view &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_formatnumber_tag.htm"&gt;here&lt;/a&gt; for detail.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;p&amp;gt;Number is: &amp;lt;fmt:formatNumber value="${balance}" maxIntegerDigits="3" maxFactionDigits="3" pattern="###.###E0"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:formatDate&amp;gt;&lt;/code&gt;: Similarly but just for date. For example, you can set timezone using this tag. You can view detail &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_formatdate_tag.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:parseNumber&amp;gt;&lt;/code&gt;: parse numbers, percentages and currencies. You are given a number and this tag can parse number to certain format. You can view &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_parsenumber_tag.htm"&gt;here&lt;/a&gt; for useful parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;fmt:parseNumber var="i" type="number" value="${balance}" integerOnly="true"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:parseDate&amp;gt;&lt;/code&gt;:Similary, but just for Date. For example, you can set date as "YYYY-MM-DD" format. You can view detail &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_parsedate_tag.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:message&amp;gt;&lt;/code&gt; tag maps key to localized message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:bundle&amp;gt;&lt;/code&gt; often being used with &lt;code&gt;&amp;lt;fmt:message&amp;gt;&lt;/code&gt;. It will find a java class which extend ListResourceBunder, and use it for message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:setBundle&amp;gt;&lt;/code&gt; is similar to &lt;code&gt;&amp;lt;fmt:bundle&amp;gt;&lt;/code&gt; except it not wraps &lt;code&gt;&amp;lt;fmt:message&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ListResouceBundle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="nf"&gt;getContents&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"count.one"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"One"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"count.two"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Two"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;basedname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"com.pengyinshan.Example"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count.one"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count.two"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setBundle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;outside&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fmt:setLocale&amp;gt;&lt;/code&gt; is similar as &lt;code&gt;&amp;lt;fmt:setBundle&amp;gt;&lt;/code&gt;. You need to specify class Name. Tag will find the scale that corresponds to this name
&lt;code&gt;&amp;lt;fmt:requestCoding&amp;gt;&lt;/code&gt; set up encoding. You don't need extra class for it&lt;/p&gt;
&lt;p&gt;Assume we have same example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publc&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Exmple_en_us&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ListResourceBundle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;requestEncoding&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en_us"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setLocale&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en_us"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;basedname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"com.pengyinshan.Example"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fmt:timeZone&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;fmt:setTimeZone&amp;gt;&lt;/code&gt; are used to specify timezone in body.&lt;/p&gt;
&lt;p&gt;They are oftern used above &lt;code&gt;&amp;lt;fmt:formatDate&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fmt:setTimeZone&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"EST"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fmt:formatDate&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${now}"&lt;/span&gt; &lt;span class="na"&gt;timeStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"long"&lt;/span&gt; &lt;span class="na"&gt;dateStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"long"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"both"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fmt:setTimeZone&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;SQL Tags&lt;/h3&gt;
&lt;p&gt;Make sure you include sql tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Following tags are common sql tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;sql:setDateSource&amp;gt;&lt;/code&gt;: Takes several parameters and set data source.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example: &lt;code&gt;&amp;lt;sql:setDataSource var="snapshot" driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost/TEST" user="user_id"password="mypassword"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;sql:query&amp;gt;&lt;/code&gt;: Take several parameters and run a query. You can put result to a variable and use it as &lt;code&gt;var.id&lt;/code&gt;, &lt;code&gt;var.last&lt;/code&gt;, &lt;code&gt;var.name&lt;/code&gt;, etc. You may want to use &lt;code&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt; for result.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:query&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
SELECT * from Employees;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:query&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;sql:udpate&amp;gt;&lt;/code&gt;: Use for sql query that does not return value, such as &lt;strong&gt;insert&lt;/strong&gt;, &lt;strong&gt;update&lt;/strong&gt; or &lt;strong&gt;delete&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   INSERT INTO Employees VALUES (104, 2, 'Nuha', 'Ali');
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;sql:param&amp;gt;&lt;/code&gt;: Use for fill parameter to &lt;code&gt;&amp;lt;sql:update&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;sql:query&amp;gt;&lt;/code&gt; if need.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;sql:dateParam&amp;gt;&lt;/code&gt;: Similaly but specailly used to modify date/timestamp.&lt;/p&gt;
&lt;p&gt;The sequence of tags corresponding to sequnce of &lt;em&gt;?&lt;/em&gt; in query.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Update Employees Set Dob = ? WHERE Id = ?
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:dateParam&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=DoB%&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DATE"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:param&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${empId}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;sql:transaction&amp;gt;&lt;/code&gt;: Wrap some &lt;code&gt;&amp;lt;sql:update&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;sql:query&amp;gt;&lt;/code&gt; to create transaction.&lt;/p&gt;
&lt;p&gt;For Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:transaction&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
#&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;....
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:transaction&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;JSTL Functions&lt;/h3&gt;
&lt;p&gt;Make sure you include function tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Normally JSTL functions are used within &lt;strong&gt;${}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Following tags are common function tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:contains&amp;gt;&lt;/code&gt;: Equals to &lt;code&gt;boolean contains(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:containsIgnoreCase&amp;gt;&lt;/code&gt;: Similar but just ignore case problem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:contains(var_name,'test')}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Found "test" in variable&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fn:endsWith&amp;gt;&lt;/code&gt;: Determines whether an input string ends with a specified suffix. Equals to &lt;code&gt;boolean endsWith(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:startWith&amp;gt;&lt;/code&gt;: Similar but it work with prefix.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:endsWith(var_name, '123')}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;String ends with 123&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fn:indexOf&amp;gt;&lt;/code&gt;: Returns the index within a string of a specified substring. Equals to &lt;code&gt;int indexOf(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:length&amp;gt;&lt;/code&gt;: Returns the length of a string. Equals to &lt;code&gt;int length(java.lang.Object)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:split&amp;gt;&lt;/code&gt;: splits a string into an array of substrings. Equals to &lt;code&gt;java.lang.String[] split(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:join&amp;gt;&lt;/code&gt;: Concatenates all the elements of an array into a string with a specified separator. Equals to &lt;code&gt;String join (java.lang.String[], java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:replace&amp;gt;&lt;/code&gt;: replace &lt;strong&gt;all occurrences&lt;/strong&gt; of a string with another string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string1"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"This is first String."&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string2"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:split(string1, ' ')}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string3"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:join(string2, '-')}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string4"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:replace(string3, '-' , '+')}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fn:substring&amp;gt;&lt;/code&gt;: Returns a subset of a string specified by start and end index. Equals to &lt;code&gt;java.lang.String substring(java.lang.String, int, int)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:substringAfter&amp;gt;&lt;/code&gt;: Returns the part of a string after a specified substring. Example: &lt;code&gt;&amp;lt;c:set var="string2" value="${fn:substringAfter(string1, 'is')}" /&amp;gt;&lt;/code&gt;. Note &lt;code&gt;is&lt;/code&gt; here is &lt;strong&gt;included&lt;/strong&gt; in result.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:substringBefore&amp;gt;&lt;/code&gt;: Returns the part of a string before a specified substring. Example is similar as above. Note &lt;code&gt;is&lt;/code&gt; here is &lt;strong&gt;excluded&lt;/strong&gt; in result.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:toLowerCase&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;fn:toUpperCase&amp;gt;&lt;/code&gt;:take a string and transfer its case. For example: &lt;code&gt;&amp;lt;c:set var="string2" value="${fn:toLowerCase(string1)}" /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:trim&amp;gt;&lt;/code&gt;: Removes white space from &lt;strong&gt;both ends&lt;/strong&gt; of a string. Example: &lt;code&gt;&amp;lt;c:set var="string1" value="This is first String         "/&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/jstl-reference-sheet.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item></channel></rss>