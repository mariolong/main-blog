<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Pengyin's Note (Java)</title><link>http://pengyin-shan.com/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://pengyin-shan.com/categories/cat_java.xml"></atom:link><language>en</language><lastBuildDate>Sun, 15 Jan 2017 03:05:02 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Apache Velocity Language Basics</title><link>http://pengyin-shan.com/posts/2015/Java/apache-velocity-basics.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h3&gt;Syntax Basics&lt;/h3&gt;
&lt;p&gt;All VTL statements, begins with the &lt;code&gt;#&lt;/code&gt; character. For rendering process: the &lt;strong&gt;Velocity Templating Engine&lt;/strong&gt; will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt; through your web page to find all &lt;code&gt;#&lt;/code&gt; characters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then &lt;strong&gt;determine&lt;/strong&gt; which mark the beginning of VTL statements, and which of the &lt;code&gt;#&lt;/code&gt; characters that have nothing to do with VTL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;It is recommended to start each VTL statement on a &lt;strong&gt;new line&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;There are &lt;strong&gt;three&lt;/strong&gt; types of references in the VTL: &lt;code&gt;variables&lt;/code&gt;, &lt;code&gt;properties&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In VTL, References begin with $ and are used to &lt;strong&gt;get&lt;/strong&gt; something. Directives begin with # and are used to &lt;strong&gt;do&lt;/strong&gt; something.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;Variables&lt;/h5&gt;
&lt;p&gt;All variables/references in VTL begins with the &lt;code&gt;$&lt;/code&gt; character,followed by a &lt;strong&gt;VTL Identifier&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;VTL Identifier&lt;/strong&gt; must start with an alphabetic character (i.e. a to z case insensitive). The rest of the characters are limited to the following types of characters: alphabetic, numeric, &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In VTL, the variable can get its value from either a &lt;strong&gt;set directive&lt;/strong&gt; in the template, or from the &lt;strong&gt;Java code&lt;/strong&gt;. Example: for &lt;code&gt;#set( $foo = "bar" )&lt;/code&gt;, &lt;code&gt;"bar"&lt;/code&gt; will replace all &lt;code&gt;$foo&lt;/code&gt; variables in VTL.&lt;/p&gt;
&lt;p&gt;Once a value has been assigned to a variable, you can reference the variable &lt;strong&gt;anywhere&lt;/strong&gt; in your HTML document. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    #set( $foo = "Velocity" )
    Hello $foo World!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6&gt;String&lt;/h6&gt;
&lt;p&gt;String values are always enclosed in &lt;em&gt;quotes&lt;/em&gt;, either &lt;em&gt;single&lt;/em&gt; or &lt;em&gt;double&lt;/em&gt; quotes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Single quotes will ensure that the quoted value will be &lt;strong&gt;assigned&lt;/strong&gt; to the reference as is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Double quotes allow you to use &lt;strong&gt;velocity references and directives&lt;/strong&gt; to interpolate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Example: for &lt;code&gt;"Hello $name"&lt;/code&gt;, the &lt;code&gt;$name&lt;/code&gt; will be replaced by the referenced value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Properties&lt;/h5&gt;
&lt;p&gt;Properties have a distinctive format.&lt;/p&gt;
&lt;p&gt;The shorthand notation consists of a leading &lt;code&gt;$&lt;/code&gt; character followed a &lt;strong&gt;VTL Identifier&lt;/strong&gt;, followed by a dot character &lt;code&gt;.&lt;/code&gt; and another &lt;strong&gt;VTL Identifier&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;$customer.Address&lt;/code&gt; has &lt;strong&gt;two meanings&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;VTL should look in the &lt;strong&gt;hashtable&lt;/strong&gt; named as &lt;code&gt;customer&lt;/code&gt;, then return the value associated with the &lt;strong&gt;key&lt;/strong&gt; &lt;code&gt;Address&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VTL should find a referring to a &lt;strong&gt;method&lt;/strong&gt; called &lt;code&gt;$customer.getAddress()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Methods&lt;/h5&gt;
&lt;p&gt;Methods are references that consist of a leading &lt;code&gt;$&lt;/code&gt; character followed a &lt;strong&gt;VTL Identifier&lt;/strong&gt;, followed by a &lt;strong&gt;VTL Method Body&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;VTL Method Body&lt;/strong&gt; consists of a &lt;strong&gt;VTL Identifier&lt;/strong&gt; followed by an left parenthesis character &lt;code&gt;(&lt;/code&gt;, followed by an &lt;strong&gt;optional parameter list&lt;/strong&gt;, followed by right parenthesis character &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;purchase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;getTotal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"My Home Page"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Strange"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Weird"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Excited"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6&gt;a &lt;em&gt;shorthand notation&lt;/em&gt; for &lt;strong&gt;VTL Methods&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;In the example above, The &lt;strong&gt;property&lt;/strong&gt; &lt;code&gt;$customer.Address&lt;/code&gt; has the exact same effect as using the &lt;strong&gt;method&lt;/strong&gt; &lt;code&gt;$customer.getAddress()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It is generally &lt;strong&gt;preferable&lt;/strong&gt; to use a &lt;strong&gt;Property&lt;/strong&gt; when available.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main difference between Properties and Methods is that you can specify a &lt;strong&gt;parameter list&lt;/strong&gt; to a Method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;Array as Lists&lt;/h6&gt;
&lt;p&gt;As of Velocity 1.6, all &lt;strong&gt;array&lt;/strong&gt; references are treated as &lt;strong&gt;fixed-length lists&lt;/strong&gt;. User can call &lt;code&gt;java.util.List&lt;/code&gt; methods on array references. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;myarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6&gt;vararg methods&lt;/h6&gt;
&lt;p&gt;From Velocity 1.6, &lt;strong&gt;setter&lt;/strong&gt; methods can have different parameter list:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setPlanets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Earth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Mars'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Neptune'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setPlanets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mercury'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;setPlanets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;##&lt;/span&gt;&lt;span class="c"&gt;  Will just pass in an empty, zero-length array&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Other Syntax Information&lt;/h4&gt;
&lt;h5&gt;Comments&lt;/h5&gt;
&lt;p&gt;In VTL, A single line comment begins with &lt;code&gt;##&lt;/code&gt; and finishes at the end of the line. Example: &lt;code&gt;## This is a single line comment.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-line&lt;/strong&gt; comments, which begin with &lt;code&gt;#*&lt;/code&gt; and end with &lt;code&gt;*#&lt;/code&gt;, are available to handle this scenario.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;This is text that is outside the multi-line comment.&lt;/span&gt;
&lt;span class="x"&gt;Online visitors can see it.&lt;/span&gt;
&lt;span class="x"&gt;*&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; Thus begins a multi-line comment. Online visitors won't&lt;/span&gt;
&lt;span class="x"&gt; see this text because the Velocity Templating Engine will&lt;/span&gt;
&lt;span class="x"&gt; ignore it.&lt;/span&gt;
&lt;span class="x"&gt;*&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Here is text outside the multi-line comment; it is visible.&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;User can also set &lt;strong&gt;javadoc-style&lt;/strong&gt; annotation in VTL comment block:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="c"&gt;**&lt;/span&gt;
&lt;span class="c"&gt;This is a VTL comment block and&lt;/span&gt;
&lt;span class="c"&gt;may be used to store such information&lt;/span&gt;
&lt;span class="c"&gt;as the document author and versioning&lt;/span&gt;
&lt;span class="c"&gt;information:&lt;/span&gt;
&lt;span class="c"&gt;@author&lt;/span&gt;
&lt;span class="c"&gt;@version 5&lt;/span&gt;
&lt;span class="c"&gt;*&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Java</category><category>Velocity</category><guid>http://pengyin-shan.com/posts/2015/Java/apache-velocity-basics.html</guid><pubDate>Wed, 11 Nov 2015 05:00:00 GMT</pubDate></item><item><title>RequestDispacher and Redirection in Java Web App</title><link>http://pengyin-shan.com/posts/2015/Java/requestdispacher-redirection-in-java.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This post only talks about &lt;code&gt;RequestDispacher&lt;/code&gt; in Java web app. If you want to know more about using servlet in Java, I have another related post: &lt;a href="http://pengyin-shan.com/blog/ajax-and-java-servlet"&gt;Ajax and Java Servlet&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Dispach&lt;/h4&gt;
&lt;p&gt;This &lt;a href="http://www.xyzws.com/servletfaq/what-is-the-defferent-between-getnameddispatcher-and-getrequestdispatcher/3"&gt;article&lt;/a&gt; from www.xyzws.com is very useful.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RequestDispacher&lt;/code&gt; is used to formard a client's request to another 'place', which including another servlet, another JSP, etc.&lt;/p&gt;
&lt;p&gt;In a servlet, there are three ways to get RequestDispacher:&lt;/p&gt;
&lt;h5&gt;RequestDispatcher dispatch = request.getRequestDispatcher(path);&lt;/h5&gt;
&lt;p&gt;Using this, &lt;em&gt;path&lt;/em&gt; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;either a path related to your current request, such as &lt;code&gt;subhome.html&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or a servlet name in your &lt;code&gt;web.xml&lt;/code&gt; file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or a abosute path related to your current contaxt, such as &lt;code&gt;/subpage/subjome.jsp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;RequestDispatcher dispatch = getServletContext.getRequestDispatcher(path)&lt;/h5&gt;
&lt;p&gt;Using this, &lt;em&gt;path&lt;/em&gt; &lt;strong&gt;must&lt;/strong&gt; start with &lt;code&gt;/&lt;/code&gt;, such as &lt;code&gt;/subpage/subjome.jsp&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;RequestDispatcher dispatch = getServletContext.getNamedDispatcher("string")&lt;/h5&gt;
&lt;p&gt;This method must take the servlet name as its parameter. The servlet name is definded in &lt;code&gt;web.xml&lt;/code&gt; as  &lt;servlet-name&gt; sub-element of the &lt;servlet&gt; element. The request is dispatched to that corresponding servlet.&lt;/servlet&gt;&lt;/servlet-name&gt;&lt;/p&gt;
&lt;p&gt;Example in &lt;code&gt;web.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Use testProctor for getting RequestDispatcher --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;testProctor&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.test.proctortest&lt;span class="nt"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;testProctor&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/test_proctor&lt;span class="nt"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Before/After get your RequestDispacher, you can use &lt;code&gt;request.addAttribute(something)&lt;/code&gt; or other functions to add stuff to your request.&lt;/p&gt;
&lt;h4&gt;Go to another place&lt;/h4&gt;
&lt;p&gt;After you finish process HttpRequest or HttpResponse, there are three ways to 'leave' for another place:&lt;/p&gt;
&lt;h5&gt;RequestDispatcher.forward(request, response) | RequestDispatcher.include(request, response)&lt;/h5&gt;
&lt;p&gt;There is a greate &lt;a href="http://way2java.com/servlets/difference-between-include-and-forward-in-requestdispatcher/"&gt;article&lt;/a&gt; from way2java.com to explain the difference between &lt;code&gt;RequestDispatcher.forward()&lt;/code&gt; and &lt;code&gt;RequestDispatcher.include()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are main differences bewtween these two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;include()&lt;/code&gt; will &lt;strong&gt;include&lt;/strong&gt; another file in your current file, the send back to client. This is like &lt;code&gt;&amp;lt;include /footer.jsp/&amp;gt;&lt;/code&gt; but on server side. &lt;code&gt;forward()&lt;/code&gt; will &lt;strong&gt;forward&lt;/strong&gt; the client to another page/servlet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;include()&lt;/code&gt; will return back to original servlet, but &lt;code&gt;forward()&lt;/code&gt; will go directly to client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, if you need response from &lt;em&gt;two&lt;/em&gt; servlet, use &lt;code&gt;include()&lt;/code&gt;. If you only need reponse from last servlet, use &lt;code&gt;forward()&lt;/code&gt;. &lt;em&gt;Note include() does have limitation for second servlet accessing information from first servlet&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;include()&lt;/code&gt; will give client the response from the &lt;strong&gt;same&lt;/strong&gt; servlet which he requested. &lt;code&gt;forward()&lt;/code&gt; will give client the response from a different servlet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally, you want to use &lt;code&gt;include()&lt;/code&gt; when &lt;strong&gt;static&lt;/strong&gt; information needs to be included, such as Banner Content or Copyright Information. &lt;code&gt;forward()&lt;/code&gt; should be used to include &lt;strong&gt;dynamic&lt;/strong&gt; information, or when you want to use servlet as a Controller.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;HttpResponse.sendRedirect(String)&lt;/h5&gt;
&lt;p&gt;The differnce between &lt;code&gt;forward()/include()&lt;/code&gt; and &lt;code&gt;HttpResponse.sendRedirect()&lt;/code&gt; is very obvious:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SendRedirect&lt;/code&gt; is just for re-direction. If you have any data, it has to be transferred by &lt;strong&gt;session&lt;/strong&gt; or being included in &lt;strong&gt;URL&lt;/strong&gt;. This request is &lt;strong&gt;visible&lt;/strong&gt; in browser as a new request. i.e. it is a &lt;strong&gt;client side redirect&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;forward()/include()&lt;/code&gt; is server side operation, which is not visible to browser. You can use &lt;code&gt;request.getAttribute()&lt;/code&gt; to get data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Ajax</category><category>Java</category><category>Servlet</category><guid>http://pengyin-shan.com/posts/2015/Java/requestdispacher-redirection-in-java.html</guid><pubDate>Wed, 05 Aug 2015 04:00:00 GMT</pubDate></item><item><title>Ajax and Java Servlet</title><link>http://pengyin-shan.com/posts/2015/Java/ajax-and-java-servlet.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;I was working on an old Java web application today. This java web app used to pass data by using URL parameter, and I wanted to change it to passing data by using AJAX with JSON object, since there will be more data being passed in the future.&lt;/p&gt;
&lt;p&gt;After working a while I realized I need to write this post becasue:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pure JSP/Servlet java app is a little bit different from Spring MVC Java web app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm digging into Spring MVS so much that it's a little bit tough to change back to old way :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, if you have a JSP/Servlet Java web app and you want to use AJAX with JSON object, you have to write code in three places:&lt;/p&gt;
&lt;h4&gt;1. JSP with jQuery&lt;/h4&gt;
&lt;p&gt;You want to have &lt;code&gt;jQuery&lt;/code&gt; library in your JSP file to make sure you can use AJAX.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'your &amp;lt;url-pattern&amp;gt; in web.xml'&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json_object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;//mimeType: 'application/json'&lt;/span&gt;
        &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//Process your data that is being passed back...&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorThrown&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//Deal with error occation&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//New Version:&lt;/span&gt;
 &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'your &amp;lt;url-pattern&amp;gt; in web.xml'&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json_object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//Process your data that is being passed back...&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fuction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="c1"&gt;//Deal with error occation&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="c1"&gt;//Same as 'complete' in old version, operate after done/fail&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//You can also use $.post(url, data, success, dataType) as a new way&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;In the code above, &lt;code&gt;contentType&lt;/code&gt; and &lt;code&gt;dataType&lt;/code&gt; (and &lt;code&gt;mimeType&lt;/code&gt; if exists) is very important because wrong value of these attributes can give you a &lt;code&gt;404&lt;/code&gt; or &lt;code&gt;500&lt;/code&gt; error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;contentType&lt;/h5&gt;
&lt;p&gt;Default value: &lt;code&gt;application/x-www-form-urlencoded; charset=UTF-8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the data type &lt;strong&gt;when you send data to server&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;dataType&lt;/h5&gt;
&lt;p&gt;Default value: Guess(&lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This is the data type &lt;strong&gt;when server pass data back to you&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;mimeType&lt;/h5&gt;
&lt;p&gt;A mime type to override the XHR mime type. This is the data type &lt;strong&gt;when server pass data back to you&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Form Mozilla, MIME types describe the media type of content either in email or served by web servers or web applications.&lt;/p&gt;
&lt;p&gt;MIME types are intended to help guide a web browser in &lt;em&gt;how the content is to be processed and displayed&lt;/em&gt;. Examples of MIME types are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text/html&lt;/code&gt; for normal web pages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt; for plain text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/octet-stream&lt;/code&gt; meaning "download this file"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/x-java-applet&lt;/code&gt; for Java™ applets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application/pdf&lt;/code&gt; for Adobe® PDF documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you want you browser to access data like &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;dataType&lt;/code&gt; is good enough. However, if you want to let your browser detect PDF file or other data types, you need to set &lt;code&gt;mimeType&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;2. web.xml&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;After working with Spring MVC for a while, I realizae I can forget web.xml easily. Make sure you register your servlet in web.xml.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to regiseter your servlet in &lt;code&gt;web.xml&lt;/code&gt; file in your project. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Give a servlet name for using in web.xml --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;proctorprocess&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- This is the class of your servlet --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;edu.fsu.odl.cat.cber2.ProctorProcessServlet&lt;span class="nt"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Same servlet name as above --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;proctorprocess&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- This is the url you want to put as url --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/ProctorProcess&lt;span class="nt"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;3. Servlet&lt;/h4&gt;
&lt;p&gt;If you pass JSON object to your servlet, you may want to use &lt;code&gt;org.json&lt;/code&gt;, &lt;code&gt;com.fasterxml.jackson&lt;/code&gt; or &lt;code&gt;gson&lt;/code&gt; external library to help you dealing with JSON object in Java.&lt;/p&gt;
&lt;p&gt;Example code for post operation:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//You want your class extends HttpServlet&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProctorProcessServlet&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HttpServlet&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;BufferedReader&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInputStream&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//json should be the string of your JSON object&lt;/span&gt;
                &lt;span class="c1"&gt;//Process your JSON object&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;//Assume you want to pass JSON object back&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContentType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;PrintWriter&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWriter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;JSONObject&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//Process sample&lt;/span&gt;
             &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
             &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
             &lt;span class="c1"&gt;//Now you finish your post operation and come back to JSP&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//...&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This post will be udpated when I learned more about AJAX in my work experience.&lt;/p&gt;
&lt;h4&gt;Tips&lt;/h4&gt;
&lt;h5&gt;org.apache.catalina.LifecycleException: Failed to start component&lt;/h5&gt;
&lt;p&gt;If you include &lt;code&gt;org.json&lt;/code&gt; jar file in your project, and you encourter &lt;code&gt;org.apache.catalina.LifecycleException: Failed to start component&lt;/code&gt; exception when you try to deploy to Tomcat:&lt;/p&gt;
&lt;p&gt;Make sure you add your jar files to &lt;code&gt;Web Deployment Assebly&lt;/code&gt; in your project properies. Following &lt;a href="http://stackoverflow.com/questions/16362302/java-servlet-error-with-jsonobject"&gt;this post&lt;/a&gt; and you will be fine.&lt;/p&gt;&lt;/div&gt;</description><category>Ajax</category><category>Java</category><category>jQuery</category><category>Servlet</category><guid>http://pengyin-shan.com/posts/2015/Java/ajax-and-java-servlet.html</guid><pubDate>Mon, 03 Aug 2015 04:00:00 GMT</pubDate></item><item><title>JUnit Basics</title><link>http://pengyin-shan.com/posts/2015/Java/junit-basics.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tutorialspoint.com//junit/index.htm"&gt;JUnit Tutorial from Tutorialspoint.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;Unit Test Case&lt;/code&gt; is a part of code which ensures that the another part of code (method) works as expected. To achieve those desired results quickly, test framework is required.&lt;/p&gt;
&lt;p&gt;JUnit is perfect unit test framework for java programming language.&lt;/p&gt;
&lt;h3&gt;Test Framework&lt;/h3&gt;
&lt;h4&gt;Features&lt;/h4&gt;
&lt;p&gt;JUnit test framework provides following important features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Fixtures&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Test suites&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Test runners&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JUnit classes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Fixtures&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Fixtures&lt;/code&gt; is a fixed state of a set of &lt;strong&gt;objects&lt;/strong&gt; used as a baseline for running tests.&lt;/p&gt;
&lt;p&gt;The purpose of a test fixture is to ensure that there is a well known and &lt;strong&gt;fixed environment&lt;/strong&gt; in which tests are run so that results are repeatable. It includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setUp()&lt;/code&gt; method which runs before every test invocation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tearDown()&lt;/code&gt; method which runs after every test method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example Code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;junit.framework.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JavaTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;// setUp() method: assigning the values&lt;/span&gt;
   &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// test method to add two values&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testAdd&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//No tearDown() in this example&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Test Suite&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Test suite&lt;/code&gt; means &lt;strong&gt;bundle&lt;/strong&gt; a few unit test cases and run it together.&lt;/p&gt;
&lt;p&gt;In JUnit, both &lt;code&gt;@RunWith&lt;/code&gt; and &lt;code&gt;@Suite&lt;/code&gt; annotation are used to run the suite test.&lt;/p&gt;
&lt;p&gt;Here is an example which uses TestJunit1 &amp;amp; TestJunit2 test classes from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Suite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//JUnit Suite Test with @Runwith and @Suite annotation&lt;/span&gt;
&lt;span class="nd"&gt;@RunWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Suite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Suite.SuiteClasses&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="n"&gt;TestJunit1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TestJunit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JunitTestSuite&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//@Test Annotation&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Test Runner&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Test runner&lt;/code&gt; is used for &lt;strong&gt;executing&lt;/strong&gt; the test cases.&lt;/p&gt;
&lt;p&gt;Here is an example which assumes TestJunit test class already exists, from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.JUnitCore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.Result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.notification.Failure&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//Note this line of using exiting TestJunit.class&lt;/span&gt;
      &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JUnitCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runClasses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestJunit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFailures&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wasSuccessful&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;JUnit Classes&lt;/h5&gt;
&lt;p&gt;JUnit classes are important classes which is used in writing and testing JUnits.&lt;/p&gt;
&lt;p&gt;Some of the important classes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Assert&lt;/code&gt; which contain a set of assert methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TestCase&lt;/code&gt; which contain a test case defines the fixture to run multiple tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TestResult&lt;/code&gt; which contain methods to collect the results of executing a test case.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;JUnit Basic Usage&lt;/h4&gt;
&lt;h5&gt;1. Create a Message Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;* This class prints the given message on console.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageUtil&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;//Constructor&lt;/span&gt;
   &lt;span class="c1"&gt;//@param message to be printed&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// prints the message&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;2. Create a Test Case Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;//Use the message class above&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//Use assestion for printing out message&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;3. Create a Test Runner Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.JUnitCore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.Result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.notification.Failure&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//User the test class created above&lt;/span&gt;
      &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JUnitCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runClasses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestJunit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//Print failure and successful messages&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFailures&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wasSuccessful&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Writing Test with POJOs&lt;/h4&gt;
&lt;p&gt;To write a test for a POJO class, we need following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;POJO&lt;/strong&gt; class which defines a object in your business login&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Business Logic&lt;/strong&gt; class which includes: a. methods for testing, using the POJO class mentioned above b. test class using business login&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Test Runner&lt;/strong&gt; class which is similar as what we have above for testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;p&gt;POJO class example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmployeeDetails&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monthlySalary&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   - @return the name&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   - @param name the name to set&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//Following parts are skipped&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Business Logic class example:&lt;/p&gt;
&lt;p&gt;First, Set up a method which needs to be tested:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmpBusinessLogic&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Calculate the yearly salary of employee&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateYearlySalary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EmployeeDetails&lt;/span&gt; &lt;span class="n"&gt;employeeDetails&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;yearlySalary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;yearlySalary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employeeDetails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonthlySalary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;yearlySalary&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, created a test business logic class with &lt;strong&gt;assestion&lt;/strong&gt; and &lt;strong&gt;@Test&lt;/strong&gt; annotation:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestEmployeeDetails&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;EmpBusinessLogic&lt;/span&gt; &lt;span class="n"&gt;empBusinessLogic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EmpBusinessLogic&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;EmployeeDetails&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EmployeeDetails&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;// test to check yearly salary&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testCalculateYearlySalary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rajeev"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMonthlySalary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empBusinessLogic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateYearlySalary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;96000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Test Runner class example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.JUnitCore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.Result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.notification.Failure&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JUnitCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runClasses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestEmployeeDetails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFailures&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wasSuccessful&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Assertion and Annotation&lt;/h4&gt;
&lt;h5&gt;Assertion&lt;/h5&gt;
&lt;p&gt;This class provides a set of assertion methods useful for writing tests. &lt;em&gt;Only failed assertions are recorded.&lt;/em&gt;&lt;/p&gt;
&lt;h6&gt;List of Assertion Methods&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assertEquals&lt;/code&gt;: Check that two primitives/Objectes are equal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assertTrue&lt;/code&gt; or &lt;code&gt;assertFalse&lt;/code&gt;: Check that a condition is true/false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertNull&lt;/strong&gt; or &lt;strong&gt;assertNotNull&lt;/strong&gt;: Check that a condition is null/not null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertSame&lt;/strong&gt; or &lt;strong&gt;assertNotSame&lt;/strong&gt;: Check that if two object references &lt;em&gt;point&lt;/em&gt; to the same/not same object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertArrayEquals&lt;/strong&gt;: Check whether two arrays are equal to each other&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Annotation&lt;/h5&gt;
&lt;p&gt;The annotation in JUnit gives us information about test methods, include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;which methods are going to run before &amp;amp; after test methods,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;which methods run before &amp;amp; after all the methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;which methods or class will be ignore during execution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;List of Annotations&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Test&lt;/code&gt;: The Test annotation tells JUnit that the &lt;strong&gt;public void method&lt;/strong&gt; to which it is attached can be run as a test case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Before&lt;/code&gt;: Several tests need similar objects created before they can run. Annotating a public void method with @Before causes that method to be &lt;strong&gt;run before each Test method&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@After&lt;/code&gt;: If you allocate external resources in a Before method &lt;em&gt;you need to release them after the test runs&lt;/em&gt;. Annotating a public void method with @After causes that method to be run after the Test method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@BeforeClass&lt;/code&gt;: Annotating a public static void method with @BeforeClass causes it to be &lt;strong&gt;run once&lt;/strong&gt; before any of the test methods in the class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@AfterClass&lt;/code&gt;: This will perform the method after all tests have finished. This can be used to perform &lt;strong&gt;clean-up activities&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Ignore&lt;/code&gt;: The Ignore annotation is used to ignore the test and that &lt;strong&gt;test will not be executed&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Suite Test&lt;/h4&gt;
&lt;p&gt;Test suites means bundle a few unit test cases and run it together. In JUnit, both &lt;code&gt;@RunWith&lt;/code&gt; and &lt;code&gt;@Suite&lt;/code&gt; annotation are used to run the suite test.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;* This class prints the given message on console.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageUtil&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;//Constructor&lt;/span&gt;
   &lt;span class="c1"&gt;//@param message to be printed&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// prints the message&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// add "Hi!" to the message&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 2: Create Business Login Class with Business Login Test Class&lt;/h5&gt;
&lt;p&gt;Business Logic class with Methods for testing:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Business Logic Test Class with Assertions:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit2&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step3: Create Test Suite Class using @RunWith and @Suite annotation&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Suite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//@RunWith takes Suite.class parameter&lt;/span&gt;
&lt;span class="nd"&gt;@RunWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Suite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Suite.SuiteClasses&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="c1"&gt;//A list of unit tests included in this test suite&lt;/span&gt;
   &lt;span class="n"&gt;TestJunit1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;TestJunit2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JunitTestSuite&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Create Test Runner Classes&lt;/h5&gt;
&lt;p&gt;Same code as examples above&lt;/p&gt;
&lt;h4&gt;Ignore Test&lt;/h4&gt;
&lt;p&gt;Sometimes it happens that our code is not ready and test case written to test that method/code will fail if run. The &lt;code&gt;@Ignore&lt;/code&gt; annotation helps in this regards.&lt;/p&gt;
&lt;p&gt;A test method annotated with @Ignore &lt;strong&gt;will not be executed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If a test class is annotated with @Ignore then none of its test methods will be executed.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 2: Create Business Login Class with Business Login Test Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 3: Create Test Runner Class with @Ignore Annotation&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Note @Ignore is the annotation for test runner class&lt;/span&gt;
&lt;span class="nd"&gt;@Ignore&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you run the code above, you will always pass all test because none of test with @Test annotation above is excuted.&lt;/p&gt;
&lt;h4&gt;Time Test&lt;/h4&gt;
&lt;p&gt;If a test case takes more time than specified number of milliseconds then JUnit will automatically mark it as failed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;timeout&lt;/code&gt; parameter is used along with @Test annotation.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 2: Create Test Class with Timeout Setting&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//Add timeout parameter for @Test annotation&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 3: Create Test Runner Class&lt;/h5&gt;
&lt;p&gt;Same regular Test Runner class as examples above&lt;/p&gt;
&lt;h4&gt;Exceptions Test&lt;/h4&gt;
&lt;p&gt;You can test the code &lt;em&gt;whether code throws desired exception or not&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;expected&lt;/strong&gt; parameter is used along with @Test annotation.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Message Class&lt;/h5&gt;
&lt;p&gt;Same as example above.&lt;/p&gt;
&lt;h5&gt;Step 2: Create Test Class with Exception Setting&lt;/h5&gt;
&lt;p&gt;Example code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Ignore&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestJunit&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;MessageUtil&lt;/span&gt; &lt;span class="n"&gt;messageUtil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//Put specific exception class as parameter&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArithmeticException&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrintMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testPrintMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printMessage&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSalutationMessage&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside testSalutationMessage()"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi!"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Robert"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;messageUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salutationMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 3: Create Test Runner Class&lt;/h5&gt;
&lt;p&gt;Same regular Test Runner class as examples above&lt;/p&gt;
&lt;h4&gt;Parameterized Test&lt;/h4&gt;
&lt;p&gt;Parameterized tests allow developer to &lt;em&gt;run the same test over and over again using different values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Five steps to follow for parameterized test:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Annotate test class with `@RunWith(Parameterized.class)``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a public static method annotated with &lt;code&gt;@Parameters&lt;/code&gt; that returns a &lt;strong&gt;Collection of Objects&lt;/strong&gt; (as Array) as test data set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a public constructor that takes in what is equivalent to one "row" of test data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an instance variable for each "column" of test data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your tests case(s) using the instance variables as the source of the test data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The test case will be invoked once per each row of data.&lt;/p&gt;
&lt;h5&gt;Step 1: Create a Business Logic class with Methods for Testing&lt;/h5&gt;
&lt;p&gt;Exmaple code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrimeNumberChecker&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;primeNumber&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primeNumber&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primeNumber&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
         &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 2: Create a Business Logic Parameterized Test Class&lt;/h5&gt;
&lt;p&gt;Exmaple code from Tutorialspoint.com:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Arrays&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Collection&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Before&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Parameterized&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runners.Parameterized.Parameters&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Parameterized.class works as parameter of @RunWith&lt;/span&gt;
&lt;span class="nd"&gt;@RunWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parameterized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrimeNumberCheckerTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;PrimeNumberChecker&lt;/span&gt; &lt;span class="n"&gt;primeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="nd"&gt;@Before&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;primeNumberChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PrimeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// Each parameter should be placed as an argument here&lt;/span&gt;
   &lt;span class="c1"&gt;// Every time runner triggers, it will pass the arguments&lt;/span&gt;
   &lt;span class="c1"&gt;// from parameters we defined in primeNumbers() method&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PrimeNumberCheckerTest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inputNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;expectedResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;//Use @Parameterized.Parameters for defining collection of test data&lt;/span&gt;
   &lt;span class="nd"&gt;@Parameterized.Parameters&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt; &lt;span class="nf"&gt;primeNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//Note it returns an Array as collection&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;},&lt;/span&gt;
         &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;});&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="c1"&gt;// This test will run 4 times since we have 5 parameters defined&lt;/span&gt;
   &lt;span class="nd"&gt;@Test&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testPrimeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Parameterized Number is : "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expectedResult&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primeNumberChecker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;Step 3: Create Test Runner Class&lt;/h5&gt;
&lt;p&gt;Same regular Test Runner class as examples above&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JUnit</category><category>Software Testing</category><guid>http://pengyin-shan.com/posts/2015/Java/junit-basics.html</guid><pubDate>Fri, 24 Jul 2015 04:00:00 GMT</pubDate></item><item><title>Spring Tips</title><link>http://pengyin-shan.com/posts/2015/Java/spring-tips.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;hr&gt;
&lt;p&gt;In Spring MVC, if AJAX pass back a &lt;code&gt;String&lt;/code&gt;, use &lt;code&gt;JSON.parse()&lt;/code&gt; to transfer it to JSON object first.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Use Session Object in Controller&lt;/h4&gt;
&lt;p&gt;Way1:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="o"&gt;...(...&lt;/span&gt;&lt;span class="na"&gt;HttpSession&lt;/span&gt; &lt;span class="n"&gt;sessionObj&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;sessionobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;name_of_attribute&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attribute_object&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"redirect:/..."&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Way2:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="o"&gt;...(...&lt;/span&gt;&lt;span class="na"&gt;HttpSevletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;HttpSession&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Object_Type&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object_Type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name_of_attribute"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//Object_Type: int, String, float, etc&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Different from &lt;code&gt;flash attribute&lt;/code&gt;, if we use session, attribute in front-end will not be erased after reloading.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Spring MVC Form Tips&lt;/h3&gt;
&lt;h4&gt;Spring Form Validation:&lt;/h4&gt;
&lt;p&gt;Way 1:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form:form&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="na"&gt;onsubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'return valid()'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--. Code... --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form:form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//...return true;&lt;/span&gt;
    &lt;span class="c1"&gt;//...return false;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Way 2:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form:form&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--. Code... --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"valid(event)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();;&lt;/span&gt;

    &lt;span class="c1"&gt;//...Add Validation JavaScript&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#form_id'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Submit Spring Form in jQuery:&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#Form_ID'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;all_inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//value of &amp;lt;form:input&amp;gt;&lt;/span&gt;
                &lt;span class="c1"&gt;//The is a way of get Spring form input value in JavaScript&lt;/span&gt;
                &lt;span class="c1"&gt;//i is index, v is value. You can use this method to iterate JSON object&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;If you add &lt;code&gt;value&lt;/code&gt; attribute for &lt;code&gt;&amp;lt;form:input&amp;gt;&lt;/code&gt;, you may got &lt;code&gt;No Such Element&lt;/code&gt; error&lt;/p&gt;
&lt;p&gt;If you are using Eclipse, comment your unwanted Spring code will not work! You should remove unwanted Spring code instead of commenting them, because Eclipse will compile Spring code anyway, and you may get error because of that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3&gt;Spring and AJAX&lt;/h3&gt;
&lt;p&gt;I wrote any post about Spring and AJAX &lt;a href="http://pengyin-shan.com/ajax-and-spring-mvc-controller.html"&gt;here&lt;/a&gt;.
Post Method in jQuery:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"application/json; charset = urf-8;"&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'...'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json_obj&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//...;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//...;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Post Method in Spring Controller:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@RequestMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/your_mapping_url"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;&lt;span class="n"&gt;RequestMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nd"&gt;@ResponseBody&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ModelAndView&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBoday&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;json_obj&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//...You may want to parse json_obj to JSONObject&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;In Java, a &lt;code&gt;Gson&lt;/code&gt; library from &lt;a href="https://code.google.com/p/google-gson/"&gt;Google&lt;/a&gt; can transfer Java &lt;code&gt;Object&lt;/code&gt; to &lt;code&gt;JSONObject&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Gson&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object_Instance&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Java</category><category>Spring</category><guid>http://pengyin-shan.com/posts/2015/Java/spring-tips.html</guid><pubDate>Tue, 16 Jun 2015 04:00:00 GMT</pubDate></item><item><title>JSTL Reference Sheet</title><link>http://pengyin-shan.com/posts/2015/Java/jstl-reference-sheet.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;There are five types of JSTL tag Library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Core Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formatting Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSTL Functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML Tags (I skip this part)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you use JSTL library, you need to download it and put it to &lt;code&gt;webapps\ROOT\WEB-INF\lib&lt;/code&gt; directoy.&lt;/p&gt;
&lt;h3&gt;Core Tages&lt;/h3&gt;
&lt;p&gt;Make sure you include core tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Following tags are common core tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:out&amp;gt;&lt;/code&gt;: Display the result of an expression. Similar to &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; exception you use a &lt;code&gt;.&lt;/code&gt; notation to access property now.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:out value="person.age"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:set&amp;gt;&lt;/code&gt;: Evaluates an expression and uses the result to set a value of a &lt;strong&gt;JavaBean&lt;/strong&gt; or a &lt;strong&gt;java.util.Map&lt;/strong&gt; object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:set var="var_name" value="${person.age}"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:remove&amp;gt;&lt;/code&gt;: Remove a variable from either a specified scope or the first scope where the variable is found.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:remove var="var_name"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:catch&amp;gt;&lt;/code&gt;: Catches any throwable error and optionally expost it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can combine it with &lt;if&gt;&lt;/if&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:catch&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"exception"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;${person.age}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:catch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${exception!=null}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The exception is: ${exception}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt;:Display content only if &lt;code&gt;test&lt;/code&gt; is passed. &lt;code&gt;&amp;lt;c:choose&amp;gt;&lt;/code&gt; ,&lt;code&gt;&amp;lt;c:when&amp;gt;&lt;/code&gt; ,&lt;code&gt;c:otherwise&amp;gt;&lt;/code&gt; ususally are used together to create (nested) if-else loop&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:if test="${person.age&amp;gt;20}"&amp;gt;Hello World!&amp;lt;/c:if&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:choose&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${person.age&amp;gt;18}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Adult
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${12&amp;lt;person.age&amp;lt;18}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Junior
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:when&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:otherwise&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Child
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:otherwise&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:choose&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;c:import&amp;gt;&lt;/code&gt;: Work like &lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;, takes an url and allows for inclusion of content from a differenet website or an FTP server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:import var="var_name" url="http://pengyin-shan.com"/&amp;gt;&lt;/code&gt; fetches complete content from this website and would store in variable data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt;: Iterates over a collection of objects. Work like &lt;strong&gt;for&lt;/strong&gt;, &lt;strong&gt;while&lt;/strong&gt; or &lt;strong&gt;do-while&lt;/strong&gt; in Java. Possiable Parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;begin&lt;/code&gt;: Element to start with. 0 means the first item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;end&lt;/code&gt;: Element to end with. 0 means the first item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step&lt;/code&gt;: Process every step items. Default is 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt;: Name of variable for current item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;varStatus&lt;/code&gt;: Name of variable for current loop status. Works like &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; in java.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:forEach&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${people}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt; &lt;span class="na"&gt;varStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"theCount"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
${theCount.index}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:forEach&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note: &lt;code&gt;{varStatus.index}&lt;/code&gt; starts from &lt;strong&gt;0&lt;/strong&gt;. &lt;code&gt;{varStatus.count}&lt;/code&gt; starts from &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:forTokens&amp;gt;&lt;/code&gt;: Similar as &lt;code&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt;. It is used to break a string into tokens and iterate through each of the tokens. Requested Parameter: &lt;strong&gt;delims&lt;/strong&gt;, define character that is used for division.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:url&amp;gt;&lt;/code&gt; formats a URL string and optionally put to a variable and print to page&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:param&amp;gt;&lt;/code&gt; allows proper URL request parameter to be specified with URL. Usually work with &lt;code&gt;&amp;lt;c:url&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;c:redirect&amp;gt;&lt;/code&gt; automatically re-direct page to another URL&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;c:forTokens items="a,b,c" delims="," var="charName"&amp;gt;${charName}&amp;lt;/c:forTokens&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:url&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"testUrl"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/index.jsp"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:param&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1234"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
#now testUrl is: /index.jsp?id=1234
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;c:url value=${testUrl}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:redirect&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${testUrl}"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Formatting Tags&lt;/h3&gt;
&lt;p&gt;Make sure you include formatting tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Following tags are common formatting tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:formatNumber&amp;gt;&lt;/code&gt;: format numbers, percentages and currencies. It has lots of parameters for configuration. You can view &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_formatnumber_tag.htm"&gt;here&lt;/a&gt; for detail.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;p&amp;gt;Number is: &amp;lt;fmt:formatNumber value="${balance}" maxIntegerDigits="3" maxFactionDigits="3" pattern="###.###E0"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:formatDate&amp;gt;&lt;/code&gt;: Similarly but just for date. For example, you can set timezone using this tag. You can view detail &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_formatdate_tag.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:parseNumber&amp;gt;&lt;/code&gt;: parse numbers, percentages and currencies. You are given a number and this tag can parse number to certain format. You can view &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_parsenumber_tag.htm"&gt;here&lt;/a&gt; for useful parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;&amp;lt;fmt:parseNumber var="i" type="number" value="${balance}" integerOnly="true"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:parseDate&amp;gt;&lt;/code&gt;:Similary, but just for Date. For example, you can set date as "YYYY-MM-DD" format. You can view detail &lt;a href="http://www.tutorialspoint.com/jsp/jstl_format_parsedate_tag.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:message&amp;gt;&lt;/code&gt; tag maps key to localized message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:bundle&amp;gt;&lt;/code&gt; often being used with &lt;code&gt;&amp;lt;fmt:message&amp;gt;&lt;/code&gt;. It will find a java class which extend ListResourceBunder, and use it for message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fmt:setBundle&amp;gt;&lt;/code&gt; is similar to &lt;code&gt;&amp;lt;fmt:bundle&amp;gt;&lt;/code&gt; except it not wraps &lt;code&gt;&amp;lt;fmt:message&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ListResouceBundle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="nf"&gt;getContents&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"count.one"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"One"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"count.two"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Two"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;basedname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"com.pengyinshan.Example"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count.one"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count.two"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setBundle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;outside&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fmt:setLocale&amp;gt;&lt;/code&gt; is similar as &lt;code&gt;&amp;lt;fmt:setBundle&amp;gt;&lt;/code&gt;. You need to specify class Name. Tag will find the scale that corresponds to this name
&lt;code&gt;&amp;lt;fmt:requestCoding&amp;gt;&lt;/code&gt; set up encoding. You don't need extra class for it&lt;/p&gt;
&lt;p&gt;Assume we have same example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publc&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Exmple_en_us&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ListResourceBundle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;requestEncoding&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en_us"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setLocale&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en_us"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;basedname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"com.pengyinshan.Example"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fmt:timeZone&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;fmt:setTimeZone&amp;gt;&lt;/code&gt; are used to specify timezone in body.&lt;/p&gt;
&lt;p&gt;They are oftern used above &lt;code&gt;&amp;lt;fmt:formatDate&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fmt:setTimeZone&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"EST"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fmt:formatDate&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${now}"&lt;/span&gt; &lt;span class="na"&gt;timeStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"long"&lt;/span&gt; &lt;span class="na"&gt;dateStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"long"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"both"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fmt:setTimeZone&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;SQL Tags&lt;/h3&gt;
&lt;p&gt;Make sure you include sql tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Following tags are common sql tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;sql:setDateSource&amp;gt;&lt;/code&gt;: Takes several parameters and set data source.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example: &lt;code&gt;&amp;lt;sql:setDataSource var="snapshot" driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost/TEST" user="user_id"password="mypassword"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;sql:query&amp;gt;&lt;/code&gt;: Take several parameters and run a query. You can put result to a variable and use it as &lt;code&gt;var.id&lt;/code&gt;, &lt;code&gt;var.last&lt;/code&gt;, &lt;code&gt;var.name&lt;/code&gt;, etc. You may want to use &lt;code&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt; for result.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:query&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
SELECT * from Employees;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:query&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;sql:udpate&amp;gt;&lt;/code&gt;: Use for sql query that does not return value, such as &lt;strong&gt;insert&lt;/strong&gt;, &lt;strong&gt;update&lt;/strong&gt; or &lt;strong&gt;delete&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   INSERT INTO Employees VALUES (104, 2, 'Nuha', 'Ali');
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;sql:param&amp;gt;&lt;/code&gt;: Use for fill parameter to &lt;code&gt;&amp;lt;sql:update&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;sql:query&amp;gt;&lt;/code&gt; if need.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;sql:dateParam&amp;gt;&lt;/code&gt;: Similaly but specailly used to modify date/timestamp.&lt;/p&gt;
&lt;p&gt;The sequence of tags corresponding to sequnce of &lt;em&gt;?&lt;/em&gt; in query.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Update Employees Set Dob = ? WHERE Id = ?
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:dateParam&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%=DoB%&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DATE"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:param&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${empId}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;sql:transaction&amp;gt;&lt;/code&gt;: Wrap some &lt;code&gt;&amp;lt;sql:update&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;sql:query&amp;gt;&lt;/code&gt; to create transaction.&lt;/p&gt;
&lt;p&gt;For Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:transaction&lt;/span&gt; &lt;span class="na"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${snapshot}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
#&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sql:update&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;....
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;sql:transaction&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;JSTL Functions&lt;/h3&gt;
&lt;p&gt;Make sure you include function tag library in your JSP file: &lt;code&gt;&amp;lt;%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Normally JSTL functions are used within &lt;strong&gt;${}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Following tags are common function tags with an explaination of their usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:contains&amp;gt;&lt;/code&gt;: Equals to &lt;code&gt;boolean contains(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:containsIgnoreCase&amp;gt;&lt;/code&gt;: Similar but just ignore case problem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:contains(var_name,'test')}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Found "test" in variable&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fn:endsWith&amp;gt;&lt;/code&gt;: Determines whether an input string ends with a specified suffix. Equals to &lt;code&gt;boolean endsWith(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:startWith&amp;gt;&lt;/code&gt;: Similar but it work with prefix.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:endsWith(var_name, '123')}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;String ends with 123&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;c:if&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fn:indexOf&amp;gt;&lt;/code&gt;: Returns the index within a string of a specified substring. Equals to &lt;code&gt;int indexOf(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:length&amp;gt;&lt;/code&gt;: Returns the length of a string. Equals to &lt;code&gt;int length(java.lang.Object)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:split&amp;gt;&lt;/code&gt;: splits a string into an array of substrings. Equals to &lt;code&gt;java.lang.String[] split(java.lang.String, java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:join&amp;gt;&lt;/code&gt;: Concatenates all the elements of an array into a string with a specified separator. Equals to &lt;code&gt;String join (java.lang.String[], java.lang.String)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:replace&amp;gt;&lt;/code&gt;: replace &lt;strong&gt;all occurrences&lt;/strong&gt; of a string with another string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string1"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"This is first String."&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string2"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:split(string1, ' ')}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string3"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:join(string2, '-')}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;c:set&lt;/span&gt; &lt;span class="na"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"string4"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"${fn:replace(string3, '-' , '+')}"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;fn:substring&amp;gt;&lt;/code&gt;: Returns a subset of a string specified by start and end index. Equals to &lt;code&gt;java.lang.String substring(java.lang.String, int, int)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:substringAfter&amp;gt;&lt;/code&gt;: Returns the part of a string after a specified substring. Example: &lt;code&gt;&amp;lt;c:set var="string2" value="${fn:substringAfter(string1, 'is')}" /&amp;gt;&lt;/code&gt;. Note &lt;code&gt;is&lt;/code&gt; here is &lt;strong&gt;included&lt;/strong&gt; in result.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:substringBefore&amp;gt;&lt;/code&gt;: Returns the part of a string before a specified substring. Example is similar as above. Note &lt;code&gt;is&lt;/code&gt; here is &lt;strong&gt;excluded&lt;/strong&gt; in result.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:toLowerCase&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;fn:toUpperCase&amp;gt;&lt;/code&gt;:take a string and transfer its case. For example: &lt;code&gt;&amp;lt;c:set var="string2" value="${fn:toLowerCase(string1)}" /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fn:trim&amp;gt;&lt;/code&gt;: Removes white space from &lt;strong&gt;both ends&lt;/strong&gt; of a string. Example: &lt;code&gt;&amp;lt;c:set var="string1" value="This is first String         "/&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/jstl-reference-sheet.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Java Knowledge: HashCode</title><link>http://pengyin-shan.com/posts/2015/Java/java-knowledge-hashcode.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;I touched re-write &lt;code&gt;equal()&lt;/code&gt; when I was doing work in Java Developement, then I learned these exists a &lt;code&gt;hashCode()&lt;/code&gt; method that I must implement if I re-write &lt;code&gt;equal()&lt;/code&gt; for objects.&lt;/p&gt;
&lt;p&gt;I found very useful posts: &lt;a href="http://tutorials.jenkov.com/java-collections/hashcode-equals.html"&gt;Java Collections - hasCode() and equals()&lt;/a&gt;, and &lt;a href="http://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/"&gt;The 3 things you should know about hashCode()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also refer to &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()"&gt;Oracle API&lt;/a&gt; for &lt;code&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try to avoid change hashCode() unless you are writing hash-related application.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Basic Usage&lt;/h4&gt;
&lt;p&gt;When you insert &lt;strong&gt;objects&lt;/strong&gt; to &lt;code&gt;HashTable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; or &lt;code&gt;HashSet&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; is called, together with &lt;code&gt;equal()&lt;/code&gt;. For example, in &lt;code&gt;hashMap.put("A",a);&lt;/code&gt;, both &lt;code&gt;equal()&lt;/code&gt; and &lt;code&gt;hasCode()&lt;/code&gt; are called.&lt;/p&gt;
&lt;p&gt;To insert stuff to hash table, you need a hascode to calculate the key for this object. Later you will need hashCode to search the object: hash code &lt;strong&gt;pointing to some area, where you may found the key.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From Oracle API, &lt;code&gt;hashCode&lt;/code&gt; returns a hash code, which is a &lt;code&gt;int&lt;/code&gt; value for the object.&lt;/p&gt;
&lt;p&gt;You can use same way you add &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt; in &lt;code&gt;Eclipse&lt;/code&gt; to auto-generate &lt;code&gt;hashCode()&lt;/code&gt;: &lt;em&gt;RightClick -&amp;gt; Source -&amp;gt; Generate hashCode() and equals()&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;   &lt;span class="n"&gt;employeeId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;employeeId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Edit hashCode&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/***OR**/&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;employeeId&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                &lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Important Notes&lt;/h4&gt;
&lt;p&gt;If two objects are equal, based on &lt;code&gt;equal()&lt;/code&gt;, they must also have the &lt;strong&gt;same hash code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If two objects have the same hash code, they &lt;strong&gt;may not be equal&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Above means two different objects can pointing to the same grid in a hash code grid table.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You must implement &lt;code&gt;hashCode()&lt;/code&gt; when you implement &lt;code&gt;equal()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you don't implement both, original &lt;code&gt;hashCode()&lt;/code&gt; will treat your new two objects unequal, which you have re-defined &lt;code&gt;equal()&lt;/code&gt; to make them equal. I.E. Now we have two objects are equal but with different hash code. This violate first rule.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since &lt;code&gt;hashCode()&lt;/code&gt; can change &lt;strong&gt;from one java class library (e.x.String v.s. StringBuilder) to another, or from one version to another&lt;/strong&gt;,be careful and you cannot use them in &lt;code&gt;distributed&lt;/code&gt; applications.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/java-knowledge-hashcode.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Manning OCA Java SE 7 Reading Note: Chapter 4</title><link>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-4.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a post that I moved from my &lt;a href="http://pengyin-shan.com/posts/2015/Java/blogpengyin.herokuapp.com"&gt;old blog site&lt;/a&gt;. This is the reading note for &lt;strong&gt;OCA Java SE 7 Certification Guide&lt;/strong&gt; from &lt;strong&gt;Manning&lt;/strong&gt;. &lt;em&gt;Please note that all definations and examples in this post are taken from the book.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Chapter 4. String, StringBuilder, Arrays and ArrayList&lt;/h2&gt;
&lt;p&gt;This chapter mainly covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating and manipulating &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;StringBuilder&lt;/code&gt; objects&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using common methods from class String and StringBuilder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating and using one-dimensional and multidimensional &lt;code&gt;arrays&lt;/code&gt; in single and multiple steps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessing elements in asymmetric multidimensional arrays
Declaring, creating, and using an &lt;code&gt;ArrayList&lt;/code&gt; and understanding the advantages of an ArrayList over arrays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using methods that add, modify, and delete elements of an ArrayList&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4.1 String&lt;/h3&gt;
&lt;h4&gt;Create a String&lt;/h4&gt;
&lt;p&gt;You can create objects of the class &lt;code&gt;String&lt;/code&gt; by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using the &lt;code&gt;new&lt;/code&gt; operator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by using the assignment operator ( &lt;code&gt;=&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by enclosing a value within double quotes ( &lt;code&gt;"&lt;/code&gt; ).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; &lt;code&gt;String&lt;/code&gt; objects created using the operator &lt;code&gt;new&lt;/code&gt; always refer to &lt;strong&gt;seperate objects&lt;/strong&gt; and storing in &lt;strong&gt;seperate locations&lt;/strong&gt;, even if they store the same sequence of characters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e. Following code will print &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Paul"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Paul"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Important: &lt;/strong&gt; &lt;code&gt;String&lt;/code&gt; object is created using &lt;code&gt;=&lt;/code&gt; always refer to &lt;strong&gt;same objects&lt;/strong&gt;.  The objects are created and stored in a &lt;strong&gt;pool of String objects&lt;/strong&gt;. Before creating a new object in the pool, Java first &lt;strong&gt;searches for an object with similar contents&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So when the following line of code executes, no String object with the value "Harry" is found in the pool of String objects:&lt;code&gt;String str3 = "Harry";&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a result, Java &lt;strong&gt;creates&lt;/strong&gt; a String object with the value "Harry" in the pool of String objects referred to by variable &lt;code&gt;str3&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;When the following line of code executes, Java &lt;strong&gt;is able to find&lt;/strong&gt; a String object with the value "Harry" in the pool of String objects:&lt;code&gt;String str4 = "Harry";&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now &lt;code&gt;System.out.println(str3 == str4);&lt;/code&gt; should be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important: &lt;/strong&gt; &lt;code&gt;String&lt;/code&gt; object is created using &lt;code&gt;"string_value"&lt;/code&gt; (without &lt;code&gt;new&lt;/code&gt;) are &lt;strong&gt;reused from the String constant pool&lt;/strong&gt; if a matching value is found.&lt;/p&gt;
&lt;p&gt;If a matching value isn’t found, the JVM &lt;strong&gt;creates&lt;/strong&gt; a String object with the specified value and &lt;strong&gt;places it in the String constant pool&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;morning1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Morning"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Morning"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;morning1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//True&lt;/span&gt;

&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;morning2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Morning"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Morning"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;morning2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//False since it use "new"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a String object is created using the keyword &lt;code&gt;new&lt;/code&gt; , it always results in the creation of a new String object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new String object gets created using the assignment operator ( &lt;code&gt;=&lt;/code&gt; ) or double quotes (&lt;code&gt;""&lt;/code&gt;) only if a matching String object with the same value isn’t found in the String constant pool.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String constructor can accept a &lt;code&gt;char array&lt;/code&gt; and create new String:
    :::java
    String girl = new String("Shreya");
    char[] name = new char[]{'P','a','u','l'};
    String boy = new String(name);&lt;/p&gt;
&lt;p&gt;&lt;code&gt;StringBuilder&lt;/code&gt; and &lt;code&gt;StringBuffer&lt;/code&gt; can be used to create new String:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sd1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"String Builder"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;StringBuffer&lt;/span&gt; &lt;span class="n"&gt;sb2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuffer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"String Buffer"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The literal value for String is null .&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;The Class String is Immutable&lt;/h4&gt;
&lt;p&gt;The concept that the class &lt;strong&gt;String is immutable&lt;/strong&gt; is an important point to remember. &lt;strong&gt;Once created, the contents of an object of the class String can never be modified&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;the JVM creates a &lt;strong&gt;pool&lt;/strong&gt; of String objects that can be referenced by multiple variables across the JVM . The JVM can make this optimiza-
tion only because String is immutable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;String objects can be shared across multiple reference variables without any fear of changes in their values&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If the reference variables &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt; refer to the same String object value "Java" , &lt;code&gt;str1&lt;/code&gt; need not worry for its lifetime that the value "Java" might be changed by variable &lt;code&gt;str2&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;class &lt;code&gt;String&lt;/code&gt; is &lt;strong&gt;implemented&lt;/strong&gt; by the authors of this class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The class String &lt;strong&gt;stores its values&lt;/strong&gt; in a &lt;strong&gt;private&lt;/strong&gt; variable of the type &lt;strong&gt;char array&lt;/strong&gt; ( &lt;code&gt;char value[]&lt;/code&gt; ). &lt;em&gt;Arrays are fixed in size and don’t grow once initialized&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This value variable is marked as &lt;code&gt;final&lt;/code&gt; in the class String . Note that final is a nonaccess modifier, and &lt;strong&gt;a final variable can be initialized only once&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;None of the methods defined in the class String manipulate the individual elements of the array value .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the methods defined in the class String , such as &lt;code&gt;substring()&lt;/code&gt; , &lt;code&gt;concat()&lt;/code&gt;, &lt;code&gt;toLowerCase()&lt;/code&gt;, &lt;code&gt;toUpperCase()&lt;/code&gt;, &lt;code&gt;trim()&lt;/code&gt;, and so on, which &lt;strong&gt;seem&lt;/strong&gt; to modify the contents of the String object on
which they’re called, &lt;strong&gt;create and return a new String object&lt;/strong&gt;, rather than modifying the existing value.&lt;/p&gt;
&lt;h4&gt;Methods of the class String&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;charAt(int index)&lt;/code&gt; can be used to retrieve a &lt;strong&gt;character&lt;/strong&gt; at a specified &lt;strong&gt;index&lt;/strong&gt; of a String&lt;/p&gt;
&lt;p&gt;&lt;code&gt;indexOf(char c)&lt;/code&gt; is used to search a String for the &lt;strong&gt;occurrence&lt;/strong&gt; of a char or a String.&lt;/p&gt;
&lt;p&gt;If the specified char or String is found in the target String, this method returns the first matching position; otherwise, it returns -1&lt;/p&gt;
&lt;p&gt;If you wish, you can also set the starting position: &lt;code&gt;System.out.println(letters.indexOf('B', 2));&lt;/code&gt; starts from position 2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;substring(int start, int end)&lt;/code&gt; is shipped in two flavors. The first returns a substring of a String from the position you specify to the end of the String (&lt;strong&gt;end position exclusive&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trim()&lt;/code&gt; returns a new String by &lt;strong&gt;removing all the leading and trailing white space&lt;/strong&gt; in a String . White spaces are blanks (new lines, spaces, or tabs).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;this method doesn’t remove the space &lt;strong&gt;within&lt;/strong&gt; a String .&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;replace(char,char)&lt;/code&gt; or &lt;code&gt;replace(string, string)&lt;/code&gt; return a new String by &lt;strong&gt;replacing&lt;/strong&gt; all the occurrences of a &lt;code&gt;char&lt;/code&gt; with another &lt;code&gt;char&lt;/code&gt;. - - Instead of specifying a char to be replaced by another char , you can also specify a sequence of characters—a &lt;code&gt;String&lt;/code&gt; to be replaced by another String.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Notice the type of the method parameters passed on this method: either char or String.You can’t mix these parameter types&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;length()&lt;/code&gt; is used to retrieve the length of a String.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;startsWith(String)&lt;/code&gt; and &lt;code&gt;endWith(String)&lt;/code&gt; determines whether a String starts/ends with a specified prefix/suffix, specified as a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also specify whether you wish to search from the start of
a String or from a particular position. This method returns &lt;code&gt;true&lt;/code&gt; if a match is found and &lt;code&gt;false&lt;/code&gt; otherwise&lt;/p&gt;
&lt;p&gt;&lt;em&gt;These two methods are case-sensitive!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;These two methods only accept string parameter!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When chained, the methods are evaluated &lt;strong&gt;from left to right&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SunDday"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'Z'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//prints Sunday. String is immutable&lt;/span&gt;

&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'Z'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//prints ZDay because We hava an re-assignment here.&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;String Objects and Operators&lt;/h4&gt;
&lt;p&gt;Of all the operators that are on this exam, you can use just a handful with the String objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;: &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;+=&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Equality&lt;/strong&gt;: &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use the operators &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;+=&lt;/code&gt; to concatenate two String values. Behind the scenes, string concatenation is implemented by using the &lt;code&gt;StringBuilder&lt;/code&gt; (covered in the next section) or &lt;code&gt;StringBuffer&lt;/code&gt; (similar to StringBuilder ) classes.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator enables you to create a new object of class
String with a value equal to the concatenated values of multiple Strings .&lt;/p&gt;
&lt;p&gt;The + operator can be used with the primitive values, &lt;strong&gt;Which means if you do num + num + string, first two numbers will be added together, then transfer to string!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"" + num + num + aStr;&lt;/code&gt; can be used to transfer all nums to string to concatenate&lt;/p&gt;
&lt;p&gt;When you use += to concatenate String values, ensure that the variable you’re using has been &lt;strong&gt;initialized&lt;/strong&gt; (and doesn’t contain &lt;code&gt;null&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;no compile or runtime error will appear. Just null value will be print out.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Determining Equality of String&lt;/h4&gt;
&lt;p&gt;The correct way to compare two String values for equality is to use the &lt;code&gt;equals()&lt;/code&gt; method defined in the String class.&lt;/p&gt;
&lt;p&gt;This method returns a &lt;code&gt;true&lt;/code&gt; value if the object being compared to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It isn’t &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a &lt;code&gt;String&lt;/code&gt; object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Represents the same sequence of characters as the object to which it’s being compared.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The operator &lt;code&gt;==&lt;/code&gt; won’t always return the value true , even if the two objects store the same String values. &lt;strong&gt;The operator &lt;code&gt;==&lt;/code&gt; compares whether the reference variables refer to the same objects&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can use the operator &lt;code&gt;!=&lt;/code&gt; to compare the &lt;strong&gt;inequality of objects referred to by the String variables&lt;/strong&gt;. It’s the &lt;strong&gt;inverse&lt;/strong&gt; of the operator &lt;code&gt;==&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Java"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Java"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;

&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;var4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var4&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;var4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;var4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Mutable Strings: StringBuilder&lt;/h3&gt;
&lt;p&gt;You must use class &lt;code&gt;StringBuilder&lt;/code&gt; when you’re dealing with larger strings or modifying the contents of a string &lt;strong&gt;often&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;StringBuilder is Mutable&lt;/h4&gt;
&lt;p&gt;In contrast to the class &lt;code&gt;String&lt;/code&gt; , the class &lt;code&gt;StringBuilder&lt;/code&gt; uses a &lt;strong&gt;non– final char array&lt;/strong&gt; to store its value.&lt;/p&gt;
&lt;h4&gt;Creating StringBuilder Objects&lt;/h4&gt;
&lt;p&gt;You can create objects of class &lt;code&gt;StringBuilder&lt;/code&gt; using multiple overloaded constructors &lt;code&gt;new StringBuilder()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateStringBuilderObjects&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//No arguments&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//Take a StringBuilder&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//Take a int&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//Take a String&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Shreya Gupta"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you create a StringBuilder object using its &lt;strong&gt;default constructor&lt;/strong&gt;, the following code executes behind the scenes to &lt;strong&gt;initialize&lt;/strong&gt; the array value defined in the class &lt;code&gt;StringBuilder&lt;/code&gt; itself:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//When initialize a StringBuilder, create an array of length 16&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you create a StringBuilder object by &lt;strong&gt;passing it a String&lt;/strong&gt; , the following code executes behind the scenes to &lt;strong&gt;initialize&lt;/strong&gt;the array value:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This means you can extend StringBuilder size when you initialize it*&lt;/p&gt;
&lt;h4&gt;Methods of StringBuilder&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;append()&lt;/code&gt; method adds the specified value &lt;strong&gt;at the end of the existing value&lt;/strong&gt; of a &lt;code&gt;StringBuilder&lt;/code&gt; object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This method &lt;strong&gt;accepts all the primitives&lt;/strong&gt;, &lt;code&gt;String&lt;/code&gt; , &lt;code&gt;char array&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt; as method parameters&lt;/p&gt;
&lt;p&gt;You can append a complete &lt;code&gt;char array&lt;/code&gt;, &lt;code&gt;StringBuffer&lt;/code&gt; , or &lt;code&gt;String&lt;/code&gt; or its subset as follows:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'J'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'v'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'7'&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;sb1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//ava&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you append an &lt;strong&gt;object&lt;/strong&gt;’s value to a StringBuilder , the method append calls the target class’s &lt;code&gt;toString()&lt;/code&gt; method to retrieve the object’s String representation.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;insert()&lt;/code&gt; method is as powerful as the &lt;code&gt;append()&lt;/code&gt; method. It also exists in multiple flavors (read: overloaded methods) that &lt;strong&gt;accept any data type&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The main difference between the &lt;code&gt;append()&lt;/code&gt; and &lt;code&gt;insert()&lt;/code&gt; methods is that the &lt;code&gt;insert()&lt;/code&gt; method enables you to insert the requested data at &lt;strong&gt;a particular position&lt;/strong&gt;, but the &lt;code&gt;append()&lt;/code&gt; method only allows you to add the requested data &lt;strong&gt;at the end of&lt;/strong&gt; the &lt;code&gt;StringBuilder&lt;/code&gt; object&lt;/p&gt;
&lt;p&gt;Usage of &lt;code&gt;insert()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"123"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'J'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'v'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;sb1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Note 1 and 3 are all inclusive!&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//1ava23&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The method &lt;code&gt;delete(int start, int end)&lt;/code&gt; removes the characters in a substring of the specified StringBuilder. &lt;em&gt;End Position is exclusive!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;deleteCharAt(int position)&lt;/code&gt; removes the char &lt;strong&gt;at the specified position&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;the &lt;code&gt;reverse()&lt;/code&gt; method &lt;strong&gt;reverses the sequence of characters&lt;/strong&gt; of a
StringBuilder&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can’t use the method &lt;code&gt;reverse()&lt;/code&gt; to reverse a substring of
StringBuilder.**&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;the &lt;code&gt;replace(int start, int end, String str)&lt;/code&gt; method in the class StringBuilder &lt;strong&gt;replace&lt;/strong&gt;s a sequence of characters, identified by their positions, with another String
- &lt;strong&gt;start int and end int are all inclusive!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you can also use the method &lt;code&gt;subSequence(int start, int end)&lt;/code&gt; to retrieve a subsequence of a StringBuilder object. This method returns objects of type &lt;code&gt;CharSequence&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;end int is exclusive!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;StringBuffer&lt;/h4&gt;
&lt;p&gt;The classes &lt;code&gt;StringBuffer&lt;/code&gt; and &lt;code&gt;StringBuilder&lt;/code&gt; offer the same functionality, with one difference: &lt;strong&gt;the methods of the class &lt;code&gt;StringBuffer&lt;/code&gt; are synchronized where necessary, whereas the methods of the class &lt;code&gt;StringBuilder&lt;/code&gt; aren’t&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So when you work with the class &lt;code&gt;StringBuffer&lt;/code&gt; , &lt;strong&gt;only one thread out of multiple threads can execute your method.&lt;/strong&gt; Working with synchronized methods and the &lt;code&gt;StringBuffer&lt;/code&gt; class affects the performance of your code.&lt;/p&gt;
&lt;p&gt;If you need to access your code &lt;strong&gt;from multiple threads&lt;/strong&gt;, use &lt;code&gt;StringBuffer&lt;/code&gt; ; otherwise use &lt;code&gt;StringBuilder&lt;/code&gt; .&lt;/p&gt;
&lt;h3&gt;Arrays&lt;/h3&gt;
&lt;p&gt;an &lt;code&gt;array&lt;/code&gt; is an object itself, which implies that it stores references to the data it stores. Arrays can store two types of data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A collection of &lt;code&gt;primitive data type&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A collection of &lt;code&gt;object&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An &lt;code&gt;array&lt;/code&gt; of &lt;code&gt;primitive&lt;/code&gt;s stores a collection of values that constitute the primitive values themselves. (&lt;strong&gt;With primitives, there are no objects to reference.&lt;/strong&gt;) An array of objects stores a collection of values, which are in fact &lt;strong&gt;heap-memory addresses or pointers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;object array&lt;/code&gt;s store references (to objects) and &lt;code&gt;primitive array&lt;/code&gt;s store primitive values.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The members of an array are defined in &lt;strong&gt;contiguous (continuous) memory locations&lt;/strong&gt; and hence offer improved access speed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;one-dimensional&lt;/code&gt; array is an object that refers to a collection of scalar values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;two-dimensional&lt;/code&gt; (or more) array is referred to as a multidimensional array. A two-dimensional array refers to a collection of objects in which &lt;strong&gt;each of the objects is a one-dimensional array&lt;/strong&gt;. - Similarly, a &lt;code&gt;three-dimensional&lt;/code&gt; array refers to a collection of two-dimensional arrays, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that multidimensional arrays &lt;strong&gt;may or may not contain the same number of elements in each row or column&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Creating an array involves three steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Declaring&lt;/strong&gt; the array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allocating&lt;/strong&gt; the array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initializing&lt;/strong&gt; the array elements&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Array Declaration&lt;/h4&gt;
&lt;p&gt;An &lt;strong&gt;array declaration&lt;/strong&gt; includes the &lt;strong&gt;array type&lt;/strong&gt; and &lt;strong&gt;array variable&lt;/strong&gt;. Ezample:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;//One dimentional&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;strArray&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//One dimentional&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;multiArray&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;//Muti dimentional&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The square bracket (&lt;code&gt;[]&lt;/code&gt;)s can follow the array type or its name:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;multiArr&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;multiArr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;multiArr&lt;/span&gt;&lt;span class="o"&gt;[][];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;anArr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;anArr&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;The array declaration only creates a variable that refers to &lt;code&gt;null&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;it’s invalid to define the size of an array with its declaration&lt;/strong&gt;: i.e. &lt;code&gt;int[2] nums&lt;/code&gt; is invalid.&lt;/p&gt;
&lt;h4&gt;Array Allocation&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;array allocation&lt;/strong&gt; will allocate memory for the elements of an
array. &lt;strong&gt;When you allocate memory for an array, you should specify its dimensions, such as the number of elements the array should store.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The size of an array can’t expand or reduce once it is allocated.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because an array is an object, it’s allocated using the keyword &lt;code&gt;new&lt;/code&gt; , followed by the type of value that it stores, and then its size.&lt;/p&gt;
&lt;p&gt;The code won’t compile if you don’t specify the size of the array or if you place the array size on the left of the &lt;code&gt;=&lt;/code&gt; sign:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;intArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;//won't compile&lt;/span&gt;
&lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//won't compile&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Once allocated, all the array elements &lt;strong&gt;store their default values&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Elements in an array that store &lt;strong&gt;object&lt;/strong&gt;s default to &lt;code&gt;null&lt;/code&gt; . -&lt;/p&gt;
&lt;p&gt;Elements of an array that store &lt;strong&gt;primitive data type&lt;/strong&gt;s store &lt;code&gt;0&lt;/code&gt; for &lt;strong&gt;integer types ( byte , short , int , long )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Store &lt;code&gt;0.0&lt;/code&gt; for &lt;strong&gt;decimal types ( float and double )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Store &lt;code&gt;false&lt;/code&gt; for &lt;strong&gt;boolean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Store &lt;code&gt;/u0000&lt;/code&gt; for &lt;strong&gt;char data&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Array Initialization&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//Initialize array in a loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Initialize array by assigning value to sepcific element in array&lt;/span&gt;
&lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1870&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you initialize a &lt;code&gt;two-dimensional array&lt;/code&gt;, you can use nested for loops to initialize its array elements.&lt;/p&gt;
&lt;p&gt;Also notice that to access an element in a two-dimensional array, you should use &lt;strong&gt;two array position values&lt;/strong&gt;. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;multiArr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;multiArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;multiArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you try to access a &lt;strong&gt;nonexistence array index position&lt;/strong&gt;, &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; will be throwed out, buy complie is fine:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//Compile fine even though it access negative position&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Code to access an array element will &lt;strong&gt;fail to compile&lt;/strong&gt; if you &lt;strong&gt;don’t pass&lt;/strong&gt; it a &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, or &lt;code&gt;int&lt;/code&gt; data type.&lt;/p&gt;
&lt;p&gt;you can’t remove array positions. For an array of objects, you can set a position to value &lt;code&gt;null&lt;/code&gt; , but &lt;strong&gt;it doesn’t remove the array position&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These code will work:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//If you add new() on code below, code will still work&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;strArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Summer"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Winter"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;multiArray&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;However, if you try to specify the size of an array with the following approach, the code won’t compile because &lt;strong&gt;the size of the array is calculated by the number of values that are assigned to the array.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;intArray2&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;strArray2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt;&lt;span class="s"&gt;"Summer"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Winter"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;multiArray2&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;][]{&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;}};&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you declare and initialize an array using &lt;strong&gt;two separate lines of code&lt;/strong&gt;, you’ll use the keyword &lt;code&gt;new&lt;/code&gt; to initialize the values. For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt;
&lt;span class="n"&gt;intArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;//it is fine if there is new()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Without the keyword &lt;code&gt;new&lt;/code&gt; code will fail to compile:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;intArray&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt;
&lt;span class="n"&gt;intArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;//Will fail to compile&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Asymmetrical Multidimensional Arrays&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;multidimensional array&lt;/code&gt; can be &lt;strong&gt;asymmetrical&lt;/strong&gt; (i.e. two parts are not corresponding each other in shape).&lt;/p&gt;
&lt;p&gt;Arrays can define a &lt;strong&gt;different number of columns&lt;/strong&gt; for each of its rows.&lt;/p&gt;
&lt;p&gt;For example, for code below:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;multiStrArr&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[][]{&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"B"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Jan"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Feb"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mar"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;An attempt to access any element of this array, such as &lt;code&gt;multiStrArr[1][0]&lt;/code&gt;, will throw an exception, since second postion is &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Arrays of type interface, abstract class, and class Object&lt;/h4&gt;
&lt;p&gt;If the type of an array is an &lt;code&gt;interface&lt;/code&gt;, its elements are &lt;strong&gt;either &lt;code&gt;null&lt;/code&gt; or objects that implement the relevant interface type&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyInterface&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass1&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MyInterface&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass2&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MyInterface&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MyInterface&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;interfaceArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyInterface&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass1&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;//Note you use new() here&lt;/span&gt;
        &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If the type of an array is an &lt;code&gt;abstract class&lt;/code&gt;, its elements are &lt;strong&gt;either &lt;code&gt;null&lt;/code&gt; or objects of concrete classes that extend the relevant abstract class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicle&lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bus&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Vehicle&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;vehicleArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;  &lt;span class="c1"&gt;//Note you use new() here&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Bus&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Because all classes &lt;strong&gt;extend&lt;/strong&gt; the class &lt;code&gt;java.lang.Object&lt;/code&gt; , elements of an array whose type is &lt;code&gt;java.lang.Object&lt;/code&gt; can &lt;strong&gt;refer to any object&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, below is a &lt;code&gt;object array&lt;/code&gt;, with a &lt;strong&gt;combination&lt;/strong&gt; of &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;abs class&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyInterface&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass1&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MyInterface&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicle&lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;objArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass1&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//Array element of type Object can refer to another array&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Members of an array&lt;/h4&gt;
&lt;p&gt;Array objects have the following &lt;strong&gt;public members&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;length&lt;/code&gt; : &lt;em&gt;not a method&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clone()&lt;/code&gt;: The &lt;code&gt;return&lt;/code&gt; type of this method is the same as the array’s type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods &lt;strong&gt;inherited&lt;/strong&gt; from the class &lt;code&gt;Object&lt;/code&gt; , except the method &lt;code&gt;clone()&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The way to accept length&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt; — Retrieve length using the &lt;strong&gt;method&lt;/strong&gt; &lt;code&gt;length()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Array&lt;/code&gt; — Determine element count using the &lt;strong&gt;variable&lt;/strong&gt; &lt;code&gt;length&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ArrayList&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Important Notes about &lt;code&gt;ArrayList&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It implements the &lt;strong&gt;interface&lt;/strong&gt; &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It &lt;strong&gt;allow&lt;/strong&gt;s &lt;code&gt;null&lt;/code&gt; values to be added to it.&lt;/p&gt;
&lt;p&gt;It implements all list operations ( &lt;code&gt;add()&lt;/code&gt; , &lt;code&gt;modify()&lt;/code&gt; , and &lt;code&gt;delete()&lt;/code&gt; values).&lt;/p&gt;
&lt;p&gt;It allows &lt;code&gt;duplicate values&lt;/code&gt; to be added to it.&lt;/p&gt;
&lt;p&gt;It maintains its &lt;strong&gt;insertion order&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can use either &lt;code&gt;Iterator&lt;/code&gt; or &lt;code&gt;ListIterator&lt;/code&gt; (an implementation of the Iterator interface) to &lt;strong&gt;iterate&lt;/strong&gt; over the items of an ArrayList .&lt;/p&gt;
&lt;p&gt;It supports &lt;code&gt;generics&lt;/code&gt;, making it type safe. (&lt;strong&gt;You have to declare the type of the elements that should be added to an ArrayList with its declaration&lt;/strong&gt;.)&lt;/p&gt;
&lt;h4&gt;Create ArrayList&lt;/h4&gt;
&lt;p&gt;Starting with Java version 7, you &lt;strong&gt;can omit the object type on the right side&lt;/strong&gt; of the equal sign and create an ArrayList as follows: &lt;code&gt;ArrayList&amp;lt;String&amp;gt; myArrList = new ArrayList&amp;lt;&amp;gt;();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An ArrayList &lt;strong&gt;uses an array&lt;/strong&gt; to store its elements. It provides you with the functionality of a dynamic array.&lt;/p&gt;
&lt;h4&gt;Add Element to ArrayList&lt;/h4&gt;
&lt;p&gt;When you add an element to the &lt;strong&gt;end&lt;/strong&gt; of the list, the ArrayList first checks whether its instance variable elementData &lt;strong&gt;has an empty slot&lt;/strong&gt; at the end.&lt;/p&gt;
&lt;p&gt;If no empty slots exist, the method &lt;code&gt;ensureCapacity()&lt;/code&gt; &lt;strong&gt;creates another array with a higher capacity&lt;/strong&gt; and &lt;strong&gt;copies&lt;/strong&gt; the existing values to this newly created array. It then copies the newly added
value at the first available empty slot in the array.&lt;/p&gt;
&lt;p&gt;When you add an element at a particular position, an ArrayList creates a new array and &lt;strong&gt;inserts all its elements at positions other than the position you specified&lt;/strong&gt;. If there are any subsequent elements to the right of the position that you specified, it &lt;strong&gt;shifts them by one position. Then it adds the new element at the requested position&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Accessing Elements of an ArrayList&lt;/h4&gt;
&lt;p&gt;To access the elements of an ArrayList, you can either use Java’s enhanced &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;Iterator&lt;/code&gt; , or &lt;code&gt;ListIterator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ListIterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;listIterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;An ArrayList &lt;strong&gt;preserves the order of insertion&lt;/strong&gt; of its elements.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Iterator&lt;/code&gt; , &lt;code&gt;ListIterator&lt;/code&gt; , and the enhanced &lt;code&gt;for&lt;/code&gt; loop will return the elements in the order in which they were added to the ArrayList . - - An &lt;strong&gt;iterator&lt;/strong&gt; ( &lt;code&gt;Iterator&lt;/code&gt; or &lt;code&gt;ListIterator&lt;/code&gt; ) lets you &lt;strong&gt;remove&lt;/strong&gt; elements as you iterate an ArrayList.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s not possible to remove elements from an ArrayList while iterating it using a &lt;code&gt;for&lt;/code&gt; loop&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Modify Elements of an ArrayList&lt;/h4&gt;
&lt;p&gt;You can modify an ArrayList by either &lt;strong&gt;replacing an existing element&lt;/strong&gt; in ArrayList or &lt;strong&gt;modifying all of its existing values&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"One and Half"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Deleting the Elements of an ArrayList&lt;/h4&gt;
&lt;p&gt;ArrayList defines two methods to remove its elements, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;remove(int index)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;remove(Object o)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::java
//Assume we have 'One'...'Four' in myArrList
myArrList.remove(1);
for (StringBuilder element:myArrList)
{
System.out.println(element);
}
myArrList.remove(sb3);
myArrList.remove(new StringBuilder("Four")); //This line will note remove "Four"
for (StringBuilder element : myArrList)
{
System.out.println(element);
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are not deleting in &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;
&lt;p&gt;The removal of the specified element fails because of &lt;strong&gt;the manner in which the object references are compared for equality.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Two objects are equal if their object references (the variables that store them) point to the same object.&lt;/p&gt;
&lt;p&gt;When elements of an ArrayList are removed, the remaining elements are re-arranged at their correct positions.&lt;/p&gt;
&lt;h4&gt;Other methods of ArrayList&lt;/h4&gt;
&lt;p&gt;You can &lt;strong&gt;add multiple elements to an ArrayList from another ArrayList or any other class that is a subclass of Collection&lt;/strong&gt; by using the following overloaded versions of method &lt;code&gt;addAll()&lt;/code&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;addAll(Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt; : &lt;strong&gt;appends&lt;/strong&gt; all of the elements in the specified collection to &lt;strong&gt;the end of this list&lt;/strong&gt; in the order in which they’re returned by the specified collection’s Iterator .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;addAll(int index, Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt;: inserts all of the elements in the specified collection into this list, starting at the specified position.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;myArrList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"One"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Two"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;yourArrList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;yourArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Three"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;yourArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Four"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yourArrList&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//One Three Four two&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;What happens if you modify the common object references in these lists, &lt;code&gt;myArrList&lt;/code&gt; and &lt;code&gt;yourArrList&lt;/code&gt;?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, **objects are considered &lt;code&gt;equal&lt;/code&gt; if they are referred to by the same variable (the &lt;code&gt;String&lt;/code&gt; class is an exception&lt;/p&gt;
&lt;p&gt;We have two cases here: In the first one, you &lt;strong&gt;reassign&lt;/strong&gt; the object reference using either of the lists. In this case, the value in the second list will remain &lt;strong&gt;unchanged&lt;/strong&gt;.
In the second case, you &lt;strong&gt;modify the internals&lt;/strong&gt; of any of the common list elements—in this case, the change &lt;strong&gt;will be reflected&lt;/strong&gt; in both of the lists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can &lt;strong&gt;remove all&lt;/strong&gt; the &lt;code&gt;ArrayList&lt;/code&gt; elements by calling &lt;code&gt;clear()&lt;/code&gt; on it&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get(int index)&lt;/code&gt; —This method returns the &lt;strong&gt;element at the specified position&lt;/strong&gt; in this list. &lt;strong&gt;If the requested element isn’t within the range, the get method throws a &lt;code&gt;java.lang.IndexOutOfBoundsException&lt;/code&gt; error at runtime.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;size()&lt;/code&gt; —This method returns the number of elements in this list.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;contains(Object o)&lt;/code&gt; —This method returns &lt;code&gt;true&lt;/code&gt; if this list contains the specified element.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;indexOf(Object o)&lt;/code&gt; —This method returns the &lt;strong&gt;index&lt;/strong&gt; of the &lt;strong&gt;first occurrence&lt;/strong&gt; of the specified element in this list, or &lt;code&gt;–1&lt;/code&gt; if this list doesn’t contain the element.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lastIndexOf(Object o)&lt;/code&gt; —This method returns the &lt;strong&gt;index&lt;/strong&gt; of the &lt;strong&gt;last occurrence&lt;/strong&gt; of the specified element in this list, or &lt;code&gt;–1&lt;/code&gt; if this list doesn’t contain the element.&lt;/p&gt;
&lt;p&gt;An ArrayList can accept &lt;strong&gt;duplicate&lt;/strong&gt; object values.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;clone()&lt;/code&gt; defined in the class &lt;code&gt;ArrayList&lt;/code&gt; returns a &lt;strong&gt;shallow copy&lt;/strong&gt; of this ArrayList instance. &lt;strong&gt;Shallow copy&lt;/strong&gt; means that this method creates a &lt;strong&gt;new instance&lt;/strong&gt; of the ArrayList object to be cloned. &lt;strong&gt;Its &lt;code&gt;element references&lt;/code&gt; are copied, but the &lt;code&gt;object&lt;/code&gt;s
themselves are not.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MiscMethodsArrayList5&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;myArrList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jan"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feb"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;****************************&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assignedArrList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;clonedArrList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myArrList&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;assignedArrList&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myArrList&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;clonedArrList&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;********************************&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;myArrVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;assignedArrVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;assignedArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;clonedArrVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clonedArrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myArrVal&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;assignedArrVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true. Refer to same object as below&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myArrVal&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;clonedArrVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Create an Array from ArrayList&lt;/h4&gt;
&lt;p&gt;You can use the method &lt;code&gt;toArray()&lt;/code&gt; to return an array containing all of the elements in an ArrayList in sequence from the first to the last element.&lt;/p&gt;
&lt;p&gt;Method &lt;code&gt;toArray()&lt;/code&gt; doesn’t return a reference to this array. It &lt;strong&gt;ceates a new array, copies the elements of the ArrayList
to it and then returns it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;references to the individual ArrayList&lt;/strong&gt; elements are copied to the returned array and are &lt;strong&gt;still referred to by the ArrayList&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;So if you &lt;strong&gt;modify the returned array&lt;/strong&gt; by, say, swapping the position of its elements or by assigning new objects to its elements, the elements of &lt;strong&gt;ArrayList won’t be affected&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But, if you &lt;strong&gt;modify the state of (mutable) elements of the returned
array&lt;/strong&gt;, then the modified state of elements &lt;strong&gt;will be reflected&lt;/strong&gt; in the ArrayList .&lt;/p&gt;
&lt;h3&gt;Comparing Objects for Equality&lt;/h3&gt;
&lt;p&gt;The default implementation of the &lt;code&gt;quals()&lt;/code&gt; method &lt;strong&gt;only compares
whether two object variables refer to the same object&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;instance variable&lt;/code&gt;s are used to store the &lt;strong&gt;state&lt;/strong&gt; of an object, &lt;strong&gt;it’s common to compare the values of the instance variables&lt;/strong&gt; to determine whether two objects should be considered &lt;code&gt;equal()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;equals()&lt;/code&gt; method in the class &lt;code&gt;String&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; only if the object that’s being compared to is &lt;strong&gt;a String with the same sequence of characters&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;equals()&lt;/code&gt; defines &lt;strong&gt;a method parameter&lt;/strong&gt; of type Object ,
and its return type is &lt;code&gt;boolean&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Don’t change the &lt;strong&gt;name&lt;/strong&gt; of the method, its &lt;strong&gt;return type&lt;/strong&gt;, or the &lt;strong&gt;type of method parameter&lt;/strong&gt; when you define (&lt;strong&gt;override&lt;/strong&gt;) this method in your class to compare two objects.&lt;/p&gt;
&lt;p&gt;The Java API defines a &lt;strong&gt;contract for the &lt;code&gt;equals()&lt;/code&gt; method&lt;/strong&gt;, which should be taken care of when you implement it in any of your classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is &lt;strong&gt;reflexive&lt;/strong&gt;: for any &lt;code&gt;non-null&lt;/code&gt; reference value x , &lt;code&gt;x.equals(x)&lt;/code&gt; should return true .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is &lt;strong&gt;symmetric&lt;/strong&gt;: for any &lt;code&gt;non-null&lt;/code&gt; reference values x and y , &lt;code&gt;x.equals(y)&lt;/code&gt; should return true if and only if &lt;code&gt;y.equals(x)&lt;/code&gt; returns true .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is &lt;strong&gt;transitive&lt;/strong&gt;: for any &lt;code&gt;non-null&lt;/code&gt; reference values x , y , and z , if &lt;code&gt;x.equals(y)&lt;/code&gt; returns true and &lt;code&gt;y.equals(z)&lt;/code&gt; returns true , then &lt;code&gt;.equals(z)&lt;/code&gt; should return true .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is &lt;strong&gt;consistent&lt;/strong&gt;: for any &lt;code&gt;non-null&lt;/code&gt; reference values x and y , multiple invocations of &lt;code&gt;x.equals(y)&lt;/code&gt; consistently return &lt;code&gt;true&lt;/code&gt; or consistently return &lt;code&gt;false&lt;/code&gt; , provided no information used in &lt;code&gt;equals()&lt;/code&gt; comparisons on the objects is modified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For any non- null reference value x , &lt;code&gt;x.equals(null)&lt;/code&gt; should return &lt;code&gt;false&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;hasCode()&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;hashCode()&lt;/code&gt; is &lt;strong&gt;not called&lt;/strong&gt; by the &lt;code&gt;equals()&lt;/code&gt; method to determine the equality of two objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;hashCode&lt;/code&gt; of the &lt;code&gt;key&lt;/code&gt; (an &lt;code&gt;object&lt;/code&gt;) is used to specify a &lt;code&gt;bucket number&lt;/code&gt;, which should store its corresponding value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The hashCode values of two objects can be the same. When these
collection classes &lt;strong&gt;find the right bucket, they call the equals method to select the correct value object (that shares the same key values)&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;According to the Java documentation, when you override the &lt;code&gt;equals()&lt;/code&gt; method in your class, you should also override the &lt;code&gt;hashCode()&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-4.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Manning OCA Java SE 7 Reading Note: Chapter 7</title><link>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-7.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a post that I moved from &lt;a href="http://pengyin-shan.com/posts/2015/Java/blogpengyin.herokuapp.com"&gt; my old blog site&lt;/a&gt;. This is the reading note for &lt;strong&gt;OCA Java SE 7 Certification Guide&lt;/strong&gt; from &lt;strong&gt;Manning&lt;/strong&gt;. &lt;em&gt;Please note that all definations and examples in this post are taken from the book.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Chapter 7: Exception Handling&lt;/h2&gt;
&lt;p&gt;This chapter mainly covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Understanding and identifying exceptions arising in code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determining how exceptions alter the normal program flow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding the need to handle exceptions separately in your code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;try-catch-finally&lt;/code&gt; blocks to handle exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Differentiating among &lt;code&gt;checked exception&lt;/code&gt;s, &lt;code&gt;unchecked exception&lt;/code&gt;s, and &lt;code&gt;error&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoking methods that may throw exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recognizing common exception categories and classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When JVM reposts exceptions, Stack traces are read &lt;strong&gt;from the bottom&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;7.2 What happens when an exception is thrown?&lt;/h3&gt;
&lt;p&gt;As with all other Java objects, &lt;strong&gt;an exception is an object&lt;/strong&gt;. All types of exceptions subclass &lt;code&gt;java.lang.Throwable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An operating system (OS) keeps track of the code that it needs to execute using a &lt;code&gt;stack&lt;/code&gt;. A stack is a type of list in which the items that are added last to it are the first ones to be taken off it—&lt;strong&gt;Last In First Out&lt;/strong&gt;. This stack uses a &lt;code&gt;stack pointer&lt;/code&gt; to point to the instructions that the OS should execute.&lt;/p&gt;
&lt;p&gt;When a stack pointer finds an exception should be throwed out in one method, it will check if this methos has a &lt;strong&gt;error handler&lt;/strong&gt;. If not, go and find upper level.&lt;/p&gt;
&lt;p&gt;For example, if method call a method1 then call a method2, And a &lt;code&gt;IndexOutOfBounds&lt;/code&gt; error should be throwed out in method2, but method2 doesn't have a error handler, stack pointer will find method1 -&amp;gt; main.&lt;/p&gt;
&lt;p&gt;If there are no further methods that handle &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;, execution stops.&lt;/p&gt;
&lt;h4&gt;Creating try-catch-finally blocks&lt;/h4&gt;
&lt;p&gt;Try what?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First you try to execute your code. If it doesn’t execute as planned, you handle the exceptional conditions using a catch block.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Catch what?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You catch the &lt;strong&gt;exceptional event&lt;/strong&gt; arising from the code enclosed within the try block and handle the event by defining appropriate exception handlers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does finally do?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Finally, you execute a set of code, in all conditions, &lt;strong&gt;regardless of whether the code in the try block throws any exceptions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can create an exception of your own—a &lt;strong&gt;custom exception&lt;/strong&gt;—by extending the class &lt;code&gt;Exception&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For a try block, you can define &lt;strong&gt;multiple catch blocks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;only a single finally block&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Multiple catch blocks are used to handle different types of exceptions. - A finally block is used to define cleanup code—code that closes and releases resources, such as file handlers and database or network connections.&lt;/p&gt;
&lt;h4&gt;Will a finally block execute even if the catch block defines a return statement?&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;. The &lt;code&gt;return&lt;/code&gt; statement does not return the control to the main method before execution of the finally block completes.&lt;/p&gt;
&lt;h4&gt;What happens if both a catch and a finally block define return statements?&lt;/h4&gt;
&lt;p&gt;If both catch and finally blocks define return statements, the calling method will receive a value from the &lt;code&gt;finally&lt;/code&gt; block.&lt;/p&gt;
&lt;h4&gt;What happens if a finally block modifies the value returned from a catch block?&lt;/h4&gt;
&lt;p&gt;If a catch block returns a &lt;strong&gt;primitive data type&lt;/strong&gt;, the finally block &lt;strong&gt;can’t modify the value&lt;/strong&gt; being returned by it. &lt;em&gt;Note: in this case, finally block does not return anything&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultipleReturn&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;returnVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Harry"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Paul"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
                 &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="err"&gt;￼￼￼￼&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"About to return :"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;returnVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returnVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;returnVal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;￼￼￼￼&lt;/span&gt;    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Return value is now :"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;returnVal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returnVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;MultipleReturn&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MultipleReturn&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"In Main:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//- Output will be:&lt;/span&gt;
&lt;span class="c1"&gt;//About to return :10&lt;/span&gt;
&lt;span class="c1"&gt;//Return value is now :20&lt;/span&gt;
&lt;span class="c1"&gt;//In Main:10&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Even though the &lt;strong&gt;finally&lt;/strong&gt; block adds &lt;code&gt;10&lt;/code&gt; to variable &lt;code&gt;returnVal&lt;/code&gt;, &lt;strong&gt;this modified value is not returned to the method main&lt;/strong&gt; . Control in the catch block &lt;strong&gt;copies&lt;/strong&gt; the value of &lt;code&gt;returnVal&lt;/code&gt; to be returned before it executes the finally block, so &lt;strong&gt;the returned value is not modified when finally executes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; the value &lt;strong&gt;inside finally block changed&lt;/strong&gt;. So if you return &lt;strong&gt;inside&lt;/strong&gt; finally block, the value passed to &lt;code&gt;main&lt;/code&gt; will be changed&lt;/p&gt;
&lt;p&gt;If a catch block returns a &lt;strong&gt;object&lt;/strong&gt;, When the finally block executes, it &lt;strong&gt;can access&lt;/strong&gt; the value of the object referred to by the variable and &lt;strong&gt;can modify&lt;/strong&gt; it. &lt;strong&gt;The modified value is returned to the method main&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Remember that &lt;strong&gt;primitives are passed by value and objects are passed by reference&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Does the order of the exceptions caught in the catch blocks matter?&lt;/h4&gt;
&lt;p&gt;Order doesn’t matter for unrelated classes. But it does matter for related classes sharing an &lt;code&gt;IS-A&lt;/code&gt; relationship.&lt;/p&gt;
&lt;p&gt;If you try to catch an exception of the &lt;strong&gt;base class before an excep- tion of the derived class&lt;/strong&gt; , the exception handler for the derived class can never be reached, so your code will &lt;strong&gt;fail to compile&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.txt"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;ioe&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"IOException"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileNotFoundException&lt;/span&gt; &lt;span class="n"&gt;fnfe&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file not found"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In the code above, since &lt;code&gt;FileNoteFoundException&lt;/code&gt; is a derived class from &lt;code&gt;IOException&lt;/code&gt;, &lt;code&gt;FileNoteFoundException&lt;/code&gt; should be catched &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;IOException&lt;/code&gt;, otherwise code will not compile.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules to Remember&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;try&lt;/code&gt; block may be followed by &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;catch&lt;/code&gt; blocks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;catch&lt;/code&gt; blocks may be followed by a &lt;strong&gt;single&lt;/strong&gt; &lt;code&gt;finally&lt;/code&gt; block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;try&lt;/code&gt; block may be followed by &lt;strong&gt;either&lt;/strong&gt; a &lt;code&gt;catch&lt;/code&gt; or a &lt;code&gt;finally&lt;/code&gt; block or &lt;strong&gt;both&lt;/strong&gt;. But a &lt;code&gt;finally&lt;/code&gt; block alone wouldn’t &lt;strong&gt;suffice&lt;/strong&gt; if code in the try block throws a checked exception. In this case, you need to catch the checked exception or declare it to be thrown by your method. Otherwise &lt;strong&gt;your code won’t compile&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;finally&lt;/code&gt; blocks can’t exist &lt;strong&gt;independently&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;finally&lt;/code&gt; block &lt;strong&gt;can’t appear &lt;code&gt;before&lt;/code&gt; a catch block&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;finally&lt;/code&gt; block &lt;strong&gt;always executes&lt;/strong&gt;, regardless of whether the code throws an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Can I rethrow an exception or the error I catch&lt;/h4&gt;
&lt;p&gt;You can do whatever you want with an exception.&lt;/p&gt;
&lt;p&gt;Rethrow example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;soccer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"soccer.txt"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileNotFoundException&lt;/span&gt; &lt;span class="n"&gt;fnfe&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;fnfe&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//re-throw error without handler. Will not compile&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you rethrow a checked exception, it’s treated like a regular thrown checked exception, meaning that all the rules of handling a checked exception apply to it. &lt;strong&gt;So after you re-throw, you still need a error handler or a &lt;code&gt;throw&lt;/code&gt; argument to handle error, otherwise your code will not compile.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;However, You can rethrow a &lt;code&gt;runtime exception&lt;/code&gt;, but &lt;strong&gt;you’re not required to catch it&lt;/strong&gt;, nor must you modify your method signature to include the throws clause&lt;/p&gt;
&lt;h4&gt;Can I declare my methods to throw a checked exception, instead of handling it?&lt;/h4&gt;
&lt;p&gt;If a method doesn’t wish to handle the checked exceptions thrown by a method it calls, it can &lt;strong&gt;throw&lt;/strong&gt; these exceptions using the &lt;code&gt;throws&lt;/code&gt; clause in its own method signature.&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;public void myMethod() throws IOException{...}&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;I can create nested loops, so can I create nested try-catch blocks too?&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;. you can define a &lt;code&gt;try-catch-finally&lt;/code&gt; block within another &lt;code&gt;try-catch-finally&lt;/code&gt; block.&lt;/p&gt;
&lt;h3&gt;7.3 Categories of Exceptions&lt;/h3&gt;
&lt;p&gt;There are &lt;strong&gt;three&lt;/strong&gt; categories of Exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Checked exceptions&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Runtime exceptions&lt;/code&gt; (&lt;code&gt;unchecked exceptions&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Errors&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;you shouldn’t try to catch runtime exceptions&lt;/strong&gt;, and there are few options you can use for the &lt;strong&gt;errors&lt;/strong&gt;, because &lt;strong&gt;they’re thrown by the JVM&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Checked exceptions&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;checked exception&lt;/code&gt; is an unacceptable condition &lt;strong&gt;foreseen&lt;/strong&gt; by the author of a method but outside the immediate control of the code.&lt;/p&gt;
&lt;p&gt;A&lt;code&gt;checked exception&lt;/code&gt; is a &lt;strong&gt;subclass&lt;/strong&gt; of class &lt;code&gt;java.lang.Exception&lt;/code&gt;, but it’s &lt;strong&gt;not a subclass&lt;/strong&gt; of &lt;code&gt;java.lang.RuntimeException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If a method uses another method that may throw a checked exception, one of the two following things should be true:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The method should be enclosed within a &lt;code&gt;try-catch&lt;/code&gt; block or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method should specify this exception to be thrown in its &lt;strong&gt;method signature&lt;/strong&gt;, i.e. &lt;code&gt;throws XXXException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Runtime Exception/Unchecked Exception&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;runtime exception&lt;/code&gt; is a representation of a &lt;strong&gt;programming error&lt;/strong&gt;. These occur from &lt;strong&gt;inappropriate use&lt;/strong&gt; of another piece of code.&lt;/p&gt;
&lt;p&gt;A runtime exception is a &lt;strong&gt;subclass&lt;/strong&gt; of &lt;code&gt;java.lang.RuntimeException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A runtime exception &lt;strong&gt;may not be a part of the method signature&lt;/strong&gt;, even if a method may throw it. i.e. You may not need a &lt;code&gt;throws&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, you &lt;strong&gt;can&lt;/strong&gt; create a error handler for runtime exception.&lt;/p&gt;
&lt;h4&gt;Errors&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;error&lt;/code&gt;s are considered to be &lt;strong&gt;serious exceptional condition&lt;/strong&gt;s and they &lt;strong&gt;can’t be directly controlled by your code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;error&lt;/code&gt; is a serious exception thrown by the &lt;strong&gt;JVM&lt;/strong&gt; as a result of an error in the &lt;strong&gt;environment state&lt;/strong&gt; that processes your code.&lt;/p&gt;
&lt;p&gt;An error is a &lt;strong&gt;subclass&lt;/strong&gt; of class &lt;code&gt;java.lang.Error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An error &lt;strong&gt;need not&lt;/strong&gt; be a part of a method signature.&lt;/p&gt;
&lt;p&gt;An error &lt;strong&gt;can be&lt;/strong&gt; caught by an &lt;code&gt;exception handler&lt;/code&gt;, but it &lt;strong&gt;shouldn’t&lt;/strong&gt; be.&lt;/p&gt;
&lt;h3&gt;7.4 Common Exception Classes and Categories&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Common Runtime Exceptions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ClassCastException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IllegalStateException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NumberFormatException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Common Errors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ExceptionInInitializerError&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;StackOverflowError&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NoClassDefFoundError&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OutOfMemoryError&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ArrayIndexOutOfBoundsException and IndexOutOfBoundsException&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; and &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; are &lt;strong&gt;runtime exceptions&lt;/strong&gt;, which share an &lt;code&gt;IS-A&lt;/code&gt; relationship. &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is &lt;strong&gt;subclassed&lt;/strong&gt; by &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown when a piece of code &lt;strong&gt;tries to access an &lt;code&gt;array&lt;/code&gt; out of its bounds&lt;/strong&gt; (either an array is &lt;strong&gt;accessed at a position less than 0 or at a position greater than or equal to its length&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is thrown when a piece of code tries to &lt;strong&gt;access a &lt;code&gt;list&lt;/code&gt;&lt;/strong&gt;, like an ArrayList, using an &lt;strong&gt;illegal index&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Reason for these two runtime exception is: a variable is used to specify this array or list position, and &lt;strong&gt;its value may not be known until runtime&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;ClassCastException&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ClassCastException&lt;/code&gt; is thrown when an object fails an &lt;code&gt;IS-A&lt;/code&gt; test with the class type to which it’s being cast.&lt;/p&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ColorInk&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ColorInk&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;inks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorInk&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;Ink&lt;/span&gt; &lt;span class="n"&gt;ink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlackInk&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;inks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Can throw ClassCastException error if BlackInk has no relation with ColorInk&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;You can use the &lt;code&gt;instanceof&lt;/code&gt; operator to &lt;strong&gt;verify&lt;/strong&gt; whether an object can be cast to another class before casting it: &lt;code&gt;inks.get(0) instanceof BlackInk&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;IllegalArgumentException&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown to specify that a method has &lt;strong&gt;passed illegal or inappropriate arguments&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;IllegalStateException&lt;/h4&gt;
&lt;p&gt;an &lt;code&gt;IllegalStateException&lt;/code&gt; happens if the Java environment or Java application is &lt;strong&gt;not in an appropriate state for the requested operation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can throw &lt;code&gt;IllegalStateException&lt;/code&gt; to signal to the calling method that the method being requested for execution &lt;strong&gt;can’t be called&lt;/strong&gt; for the current state of an object.&lt;/p&gt;
&lt;p&gt;For example, you can set if &lt;code&gt;int a !=0&lt;/code&gt;, then throw &lt;code&gt;IllegalStateException&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;NullPointerException&lt;/h4&gt;
&lt;p&gt;This exception is thrown by the &lt;strong&gt;JVM&lt;/strong&gt; if you try to access a method or a variable with &lt;strong&gt;a null value&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cases can be the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Accessing members of a reference variable that is &lt;strong&gt;explicitly assigned a &lt;code&gt;null&lt;/code&gt; value&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accessing members of an &lt;strong&gt;uninitialized&lt;/strong&gt; &lt;code&gt;instance&lt;/code&gt; or &lt;code&gt;static&lt;/code&gt; reference variable. These are &lt;strong&gt;implicitly assigned a &lt;code&gt;null&lt;/code&gt; value&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using an &lt;strong&gt;uninitialized&lt;/strong&gt; &lt;code&gt;local variable&lt;/code&gt;, which may seem to throw a &lt;code&gt;NullPointerException&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attempting to access &lt;strong&gt;nonexistent array positions&lt;/strong&gt;. Note the difference between &lt;code&gt;ArrayOutOfBoundException&lt;/code&gt; and &lt;code&gt;NullPointerException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using members of an &lt;code&gt;array&lt;/code&gt; element that are &lt;strong&gt;assigned a &lt;code&gt;null&lt;/code&gt; value&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//No initialization&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//NullPointerException&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;By default, the &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;instance&lt;/code&gt; variables of a class are assigned a &lt;code&gt;null&lt;/code&gt; value.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can prevent a &lt;code&gt;NullPointerException&lt;/code&gt; from being thrown by checking &lt;strong&gt;whether an object is null&lt;/strong&gt; before trying to access its member.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; If you attempt to use an &lt;strong&gt;uninitialized&lt;/strong&gt; &lt;code&gt;local variable&lt;/code&gt;, your code will fail to compile.&lt;/p&gt;
&lt;p&gt;For example, following code will not compile:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: for &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;NullPointerException&lt;/code&gt; only throws if you want to &lt;strong&gt;do something&lt;/strong&gt; with a null array space or &lt;strong&gt;access&lt;/strong&gt; a non-exisit positon (For example, a &lt;strong&gt;non-initialized&lt;/strong&gt; &lt;code&gt;static/instance&lt;/code&gt; array).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThrowAnotherNullPointerException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;oldLaptops&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldLaptops&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//NullPointerException&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;newLaptops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//Note if there is no initialization, code will not compile&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newLaptops&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//Print null&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newLaptops&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="c1"&gt;//NullPointerException&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;NumberFormatException&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;NumberFormatException&lt;/code&gt; is a runtime exception. It’s thrown to indicate that the application has tried to &lt;strong&gt;convert a string (with an inappropriate format) to one of the numeric types&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example: Starting in Java 7, you can use underscores&lt;code&gt;_&lt;/code&gt; in numeric literal values. But you can’t use them in String values passed to the method &lt;code&gt;parseInt()&lt;/code&gt;. So if you do &lt;code&gt;Integer.parseInt("123_45")&lt;/code&gt;, you will get &lt;code&gt;NumberFormatException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;Integer.parseInt("123ABCD", 16)&lt;/code&gt; is valid, since this is the way to parse hex number. If you remove &lt;code&gt;16&lt;/code&gt;, a &lt;code&gt;NumberFormatException&lt;/code&gt; will throw since you cannot covert it to &lt;strong&gt;base 10&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;ExceptionInInitializerError&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ExceptionInInitializerError&lt;/code&gt; error is typically thrown by the &lt;strong&gt;JVM&lt;/strong&gt; when a &lt;code&gt;static initializer&lt;/code&gt; in your code throws any type of &lt;code&gt;RuntimeException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This error always goes with &lt;code&gt;runtime exception&lt;/code&gt;. It can’t occur as the result of an &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;checked exception&lt;/code&gt; thrown by the &lt;code&gt;static&lt;/code&gt; initialization block.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Runtime exception&lt;/code&gt;s arising from any of the following will throw this error:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Execution of an &lt;strong&gt;anonymous &lt;code&gt;static&lt;/code&gt; block&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initialization&lt;/strong&gt; of a &lt;code&gt;static&lt;/code&gt; variable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execution of a &lt;code&gt;static&lt;/code&gt; method (called from either of the previous two items)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, following code will throw this error, with &lt;code&gt;NumberFormatInitializerError&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DemoExceptionInInitializerError&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sd"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//anoymous static block with runtime exception&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DemoExceptionInInitializerError1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nameLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
           &lt;span class="c1"&gt;//Initialization of a static variable with NullPointerException&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;StackOverflowError&lt;/h4&gt;
&lt;p&gt;This error is thrown by the &lt;strong&gt;JVM&lt;/strong&gt; when a Java program &lt;strong&gt;calls itself&lt;/strong&gt; so many times that the memory stack allocated to execute the Java program “overflows.”&lt;/p&gt;
&lt;p&gt;For example, a infinate loop can cause this error&lt;/p&gt;
&lt;h4&gt;NoClassDefFoundError&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;NoClassDefFoundError&lt;/code&gt; can throw if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you &lt;strong&gt;failed to set your classpath&lt;/strong&gt; and, as a result, the JVM was unable to load the class that you wanted to access or execute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you try to run your application before compiling it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note, &lt;code&gt;Class.forName()&lt;/code&gt; methods, which is used to load class, throws &lt;code&gt;ClassNotFoundException&lt;/code&gt; instead of this error.&lt;/p&gt;
&lt;h5&gt;OutOfMemoryError&lt;/h5&gt;
&lt;p&gt;the JVM may &lt;strong&gt;run out of memory on the heap&lt;/strong&gt;, and the garbage collector may &lt;strong&gt;not be able to free more memory for the JVM&lt;/strong&gt;. In this case, the JVM is unable to create any more objects on the heap. An &lt;code&gt;OutOfMemoryError&lt;/code&gt; will be thrown.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-7.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Manning OCA Java SE 7 Reading Note: Chapter 6</title><link>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-6.html</link><dc:creator>Pengyin Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a post that I moved from &lt;a href="http://pengyin-shan.com/posts/2015/Java/blogpengyin.herokuapp.com"&gt;my old blog site&lt;/a&gt;. This is the reading note for &lt;strong&gt;OCA Java SE 7 Certification Guide&lt;/strong&gt; from &lt;strong&gt;Manning&lt;/strong&gt;. &lt;em&gt;Please note that all definations and examples in this post are taken from the book.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Chapter 6 Working with Inheritance&lt;/h2&gt;
&lt;p&gt;This chapter main talks about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Understanding and implementing &lt;code&gt;inheritance&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developing code that demonstrates the use of &lt;code&gt;polymorphism&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Differentiating between the type of a &lt;code&gt;reference&lt;/code&gt; and an &lt;code&gt;object&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determining when &lt;code&gt;casting&lt;/code&gt; is required&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;super&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt; to access objects and constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;abstract classe&lt;/code&gt;s and &lt;code&gt;interface&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inheritance with Classes&lt;/h3&gt;
&lt;p&gt;a class can &lt;strong&gt;inherit&lt;/strong&gt; the &lt;code&gt;propertie&lt;/code&gt;s and &lt;code&gt;behavior&lt;/code&gt; of another class. The class that inherits from another class can also define additional properties and behaviors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A class uses the keyword &lt;code&gt;extends&lt;/code&gt; to inherit a class&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;programmingLanguages&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Manager&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;teamSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reportProjectStatus&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Inheriting a class is also referred to as &lt;strong&gt;subclassing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inherited class &lt;code&gt;Employee&lt;/code&gt; is also referred to as the &lt;strong&gt;superclass&lt;/strong&gt;, &lt;strong&gt;base class&lt;/strong&gt;, or &lt;strong&gt;parent class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The classes &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Manager&lt;/code&gt; that inherit the class &lt;code&gt;Employee&lt;/code&gt; are called &lt;strong&gt;subclasses&lt;/strong&gt;, &lt;strong&gt;derived classes&lt;/strong&gt;, &lt;strong&gt;extended classes&lt;/strong&gt;, or &lt;strong&gt;child classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Code that works with the base class in a &lt;strong&gt;hierarchy tree&lt;/strong&gt; can work with all classes that are added using inheritance later.&lt;/p&gt;
&lt;p&gt;When multiple classes inherit a base class, it creates a &lt;strong&gt;logical group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inheritance enables you to &lt;strong&gt;reuse&lt;/strong&gt; code that has already been
defined by a class. Inheritance can be implemented by extending a class.&lt;/p&gt;
&lt;h4&gt;Derived Class&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Manager&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;teamSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reportProjectStatus&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;programmingLanguages&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accessBaseClassMembers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Programmer"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//Derived class Programmer can directly access members of its base class.&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When a class inherits another class, it encloses within it an object of the inherited class.&lt;/p&gt;
&lt;p&gt;For example, for the code above, the &lt;code&gt;Programer&lt;/code&gt; is a large circle, enclosing a small circle of &lt;code&gt;Employee&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;A derived class can't inherit all the members of its base class&lt;/h4&gt;
&lt;p&gt;Based on &lt;strong&gt;access modifiers&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt;— Members with &lt;code&gt;default&lt;/code&gt; access can be accessed in a derived class only if base and derived classes reside &lt;strong&gt;in the same package&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; — Members with protected access are accessible to &lt;strong&gt;all the derived classes, regardless of the packages&lt;/strong&gt; in which the base and derived classes are defined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;public&lt;/code&gt; — Members with public access are &lt;strong&gt;visible to all&lt;/strong&gt; the other classes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A derived class &lt;strong&gt;can't inherite&lt;/strong&gt; following members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;private&lt;/code&gt; members of the base class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Base class members with &lt;code&gt;default access&lt;/code&gt;, if the base class and derived classes exist in &lt;strong&gt;separate packages&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Constructor&lt;/code&gt;s of the base class&lt;/strong&gt;. A derived class &lt;strong&gt;can call a base class’s constructors, but it doesn’t inherit them&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Derived classes &lt;strong&gt;can define&lt;/strong&gt; additional properties and behaviors.&lt;/p&gt;
&lt;p&gt;Derived classes can also &lt;strong&gt;define their own &lt;code&gt;constructor&lt;/code&gt;s and &lt;code&gt;static&lt;/code&gt; methods and variables&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A derived class can also &lt;strong&gt;hide or override its &lt;code&gt;base&lt;/code&gt; class’s members&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When a derived class defines an &lt;code&gt;instance&lt;/code&gt; or &lt;code&gt;class variable&lt;/code&gt; with &lt;strong&gt;the same name&lt;/strong&gt; as one defined from its base class, &lt;strong&gt;only these new variables and methods are visible to code using the derived class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When a derived class defines different code for a &lt;code&gt;method&lt;/code&gt; inherited from a base class by defining the method again, &lt;strong&gt;this method is treated as a special method—an &lt;code&gt;overridden&lt;/code&gt; method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can implement inheritance by using either a &lt;code&gt;concrete&lt;/code&gt; class or an &lt;code&gt;abstract&lt;/code&gt; class as a &lt;code&gt;base&lt;/code&gt; class&lt;/p&gt;
&lt;h4&gt;Abstract Base Class v.s Concreate Base Class&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Abstract Class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It groups the common properties and behavior of its derived classes, but it &lt;strong&gt;prevents itself from being instantiated&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can &lt;strong&gt;force&lt;/strong&gt; all its derived classes to &lt;strong&gt;define their own implementations&lt;/strong&gt; for a behavior by defining it as an &lt;code&gt;abstract method&lt;/code&gt; (&lt;strong&gt;a method without a body&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;abstract class&lt;/code&gt; &lt;strong&gt;may or may not define any &lt;code&gt;abstract methods&lt;/code&gt;&lt;/strong&gt;. - If an abstract base class &lt;strong&gt;defines one or more &lt;code&gt;abstract method&lt;/code&gt;s, the class must be marked as &lt;code&gt;abstract&lt;/code&gt; and the abstract methods must be implemented in all its derived classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;derived class&lt;/code&gt; &lt;strong&gt;doesn’t implement&lt;/strong&gt; all the abstract methods defined by its base class, then &lt;strong&gt;it also needs to be an &lt;code&gt;abstract class&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important Notes about Abstract Class&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can &lt;strong&gt;never create objects&lt;/strong&gt; of an &lt;code&gt;abstract class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A base class can be defined as an abstract class, even if it doesn’t define any abstract methods&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A derived class should &lt;strong&gt;implement all the abstract methods of its base class. If it doesn’t, it must be defined as an abstract derived class&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use variables of an abstract base class to refer to objects of its derived class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Important Term and Defination&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Base class&lt;/code&gt;— A class inherited by another class. The class &lt;code&gt;Employee&lt;/code&gt; is a base class for the classes &lt;code&gt;Programmer&lt;/code&gt; and &lt;code&gt;Manager&lt;/code&gt; in the previous examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Superclass&lt;/code&gt; — A base class is also known as a superclass.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Parent class&lt;/code&gt; — A base class is also known as a parent class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Derived class&lt;/code&gt; — A class that inherits from another class. The classes Programmer and Manager are derived classes in the previous example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Subclass&lt;/code&gt; — A derived class is also known as a subclass.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Extended class&lt;/code&gt; — A derived class is also known as an extended class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inteface&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; can define &lt;strong&gt;only &lt;code&gt;abstract methods&lt;/code&gt; and &lt;code&gt;constants&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;All the members of an interface are &lt;strong&gt;implicitly &lt;code&gt;public&lt;/code&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;interface&lt;/code&gt; &lt;strong&gt;can't have &lt;code&gt;constructor&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java doesn't allow a class to inherit multiple classes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, it &lt;strong&gt;allows a class to implement multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A class uses the keyword &lt;code&gt;implements&lt;/code&gt; to implement an interface.&lt;/p&gt;
&lt;p&gt;Each class can implement these methods in &lt;strong&gt;its own particular manner&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If the &lt;strong&gt;signature&lt;/strong&gt; of a method is changed in an interface, all classes that implement the interface will fail to compile.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An interface can only define &lt;code&gt;constant&lt;/code&gt;s.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once it’s assigned, you can’t change the value of a constant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The variables of an interface are implicitly &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;final&lt;/code&gt; , and &lt;code&gt;static&lt;/code&gt; .&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e.:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyInterface&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//equal to int AGE = 10; No compile error here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you implement an interface, you &lt;strong&gt;must implement all its methods&lt;/strong&gt; by using the access modifier &lt;code&gt;public&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;A class that implements an interface &lt;strong&gt;can’t make the interface’s methods more restrictive&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i.e.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//implicitly public&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CEO&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;//Won't compile&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*********************/&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CEO&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Relocatable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;//Compile fine&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;A class can’t inherit multiple classes, but a class &lt;strong&gt;can implement multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An interface can extend multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POINTS TO NOTE ABOUT CLASS AND INTERFACE INHERITANCE&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; can inherit &lt;strong&gt;zero or one class&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; uses the keyword &lt;code&gt;extends&lt;/code&gt; to inherit a class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; can implement &lt;strong&gt;multiple interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; uses the keyword &lt;code&gt;implements&lt;/code&gt; to implement an interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; can’t implement any class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; can inherit &lt;strong&gt;zero or more interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; uses the keyword &lt;code&gt;extends&lt;/code&gt; to inherit interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can extend a concrete class and vice versa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can implement interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;abstract class&lt;/code&gt; can extend another abstract class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; &lt;code&gt;concrete class&lt;/code&gt; in the hierarchy must &lt;strong&gt;supply actual method implementations for all abstract methods&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reference Variable and Object Type&lt;/h3&gt;
&lt;p&gt;objects of derived classes can be referred to using a &lt;strong&gt;reference
variable of either of the following types&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Its own type&lt;/strong&gt; — An object of a class &lt;code&gt;HRExecutive&lt;/code&gt; can be referred to using an object reference variable of type &lt;code&gt;HRExecutive&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Its base class&lt;/strong&gt; — If the class &lt;code&gt;HRExecutive&lt;/code&gt; &lt;strong&gt;inherits&lt;/strong&gt; the class &lt;code&gt;Employee&lt;/code&gt;, an object of the class &lt;code&gt;HRExecutive&lt;/code&gt; can be referred to using a variable of type &lt;code&gt;Employee&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implemented interfaces&lt;/strong&gt; — If the class &lt;code&gt;HRExecutive&lt;/code&gt; implements the interface &lt;code&gt;Interviewer&lt;/code&gt; , an object of the class &lt;code&gt;HRExecutive&lt;/code&gt; can be referred using a variable of type &lt;code&gt;Interviewer&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Imporant&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a reference type is &lt;code&gt;based class&lt;/code&gt;, it &lt;strong&gt;cannot&lt;/strong&gt; access member in &lt;code&gt;derviced class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a reference type is &lt;code&gt;base class&lt;/code&gt;, it &lt;strong&gt;cannot&lt;/strong&gt; access memeber in &lt;code&gt;interface&lt;/code&gt; if derived class also implement interface. Same idea, if a reference type is &lt;code&gt;interface&lt;/code&gt;, it &lt;strong&gt;cannot&lt;/strong&gt; access memeber is &lt;code&gt;base class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a reference tyope is &lt;code&gt;own type&lt;/code&gt;, it can access everything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Interviewer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HRExecutive&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Interviewer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;specialization&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HRExecutive - conducting interview"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/************/&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Office&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HRExecutive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//not compile. Cannot access&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;specialization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Staffing"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;specialization&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="c1"&gt;//Works fine&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Pavni Gupta"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//not compile. Cannot access&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The reason we want to do above is &lt;strong&gt;you might not be interested in all the members of a derived class&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OfficeInheritanceList&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Interviewer&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;interviewers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Interviewer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
      &lt;span class="c1"&gt;//Following compile fine. Manager/HRExectuive implements interviewers&lt;/span&gt;
        &lt;span class="n"&gt;interviewers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;interviewers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HRExecutive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interviewer&lt;/span&gt; &lt;span class="n"&gt;interviewer&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;interviewers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;interviewer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conductInterview&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;//Won't compile. You cannot initiate interface&lt;/span&gt;
        &lt;span class="n"&gt;HRExecutive&lt;/span&gt; &lt;span class="n"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Interviewer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Casting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Casting&lt;/code&gt; is the process of forcefully making a variable behave as a variable of another type.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;class&lt;/code&gt; shares an &lt;code&gt;IS-A&lt;/code&gt; or &lt;code&gt;inheritance&lt;/code&gt; relationship with another &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt;, their variables can be cast to each other’s type.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;((HRExecutive)interviewer).specialization = new String[] {"Staffing"};&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Use this and super to access objects and constructors&lt;/h3&gt;
&lt;h4&gt;this&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; reference always points to an &lt;strong&gt;object’s own instance&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Any object can use the this reference to refer to its own instance.&lt;/p&gt;
&lt;p&gt;You can use the keyword &lt;code&gt;this&lt;/code&gt; to refer to all methods and variables that are &lt;strong&gt;accessible to a class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is often being used to differentiate between &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;nstance variable&lt;/code&gt;s name:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is often being used to &lt;strong&gt;access &lt;code&gt;onstructor&lt;/code&gt;s&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Call contructor that only accept name&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;this()&lt;/code&gt; is used to call &lt;strong&gt;default &lt;code&gt;contructor&lt;/code&gt;&lt;/strong&gt; :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"NoName"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"NoAddress"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Must be first statement in this method!&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;If present, a call to a constructorfrom another constructor must be done on the first line of code of the calling constructor&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;super&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;super&lt;/code&gt; is also an object reference, but &lt;code&gt;super&lt;/code&gt; refers to the &lt;strong&gt;parent or base class of a class&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printNames&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Can print difference value if two class have different setting&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The reference variable &lt;code&gt;super&lt;/code&gt; can also be used to refer to the &lt;strong&gt;constructors of the base class&lt;/strong&gt; in a&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;progLanguage&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Programmer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;progLang&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Contructor in base class which accepts two parameter&lt;/span&gt;
        &lt;span class="c1"&gt;//First statement in dervied class constructor&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;progLanguage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;progLang&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;If present, a call to a superclass’s constructor must be the &lt;em&gt;first
statement in a derived class’s constructor&lt;/em&gt;. Otherwise, a call to &lt;code&gt;super();&lt;/code&gt; (the no-arg constructor) is inserted automatically by the compiler.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;static method&lt;/code&gt;s belong to a class, not to objects of a class, &lt;strong&gt;you can’t use &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt; in &lt;code&gt;static method&lt;/code&gt;s.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Polymorphism&lt;/h3&gt;
&lt;h4&gt;Polymorphism with classes&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Polymorphism&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a class &lt;strong&gt;inherit&lt;/strong&gt;s another class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;both the base and the derived classes define methods with the &lt;strong&gt;same method signature&lt;/strong&gt; (the same method &lt;code&gt;name&lt;/code&gt; and method &lt;code&gt;parameters&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Polymorphic method&lt;/code&gt;s are also called &lt;code&gt;overridden method&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important Note about Overriden Method&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overridden methods are defined by &lt;code&gt;classe&lt;/code&gt;s and &lt;code&gt;interface&lt;/code&gt;s that share inheritance relationships.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;name&lt;/strong&gt; of the overridden method must be the &lt;strong&gt;same&lt;/strong&gt; in both the &lt;code&gt;base class&lt;/code&gt; and the &lt;code&gt;derived class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;argument list&lt;/strong&gt; passed to the overridden method must be the &lt;strong&gt;same&lt;/strong&gt; in both the &lt;code&gt;base class&lt;/code&gt; and &lt;code&gt;derived class&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;return type&lt;/strong&gt; of an overriding method in the derived class &lt;strong&gt;can be the &lt;code&gt;same&lt;/code&gt;, or a &lt;code&gt;subclass&lt;/code&gt; of the return type of the overridden method in the &lt;code&gt;base class&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the overriding method returns a &lt;code&gt;subclass&lt;/code&gt; of the return type of the overridden method, it is known as a &lt;code&gt;covariant return type&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An overridden method defined in the &lt;code&gt;base class&lt;/code&gt; can be an &lt;code&gt;abstract method&lt;/code&gt; or a &lt;code&gt;non-abstract method&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access modifier&lt;/strong&gt;s for an overriding method can be the &lt;strong&gt;same or less restrictive&lt;/strong&gt; than the method being overridden, but they &lt;strong&gt;can’t be more restrictive&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Polymorphic methods &lt;strong&gt;don’t always have to be &lt;code&gt;abstract&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Polymorphism works only with &lt;code&gt;overridden method&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;Polymorphism cannot work with &lt;code&gt;overload method&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;Review: &lt;code&gt;overloaded method&lt;/code&gt;s define a method argument list with &lt;strong&gt;either a different number or type of method parameters&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Overloaded method&lt;/code&gt;s only share the same name&lt;/strong&gt;; the &lt;code&gt;JRE&lt;/code&gt; treats them like &lt;strong&gt;different methods&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the case of &lt;code&gt;overridden method&lt;/code&gt;s, &lt;strong&gt;the &lt;code&gt;JRE&lt;/code&gt; decides at &lt;code&gt;runtime&lt;/code&gt; which method should be called based on &lt;em&gt;the exact type of the object on which it’s called&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Binding of variables and methods at compile time and runtime&lt;/h4&gt;
&lt;p&gt;With inheritance, the &lt;code&gt;instance variable&lt;/code&gt;s bind at &lt;strong&gt;compile time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Method&lt;/code&gt;s bind at &lt;strong&gt;runtime&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Employee"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Programmer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Programmer"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Office1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;emp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Employee&lt;/span&gt; &lt;span class="n"&gt;programmer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Programmer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Type is Programmer&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Employee. Instance Variable&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;programmer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Employee&lt;/span&gt;
        &lt;span class="n"&gt;emp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Employee. Method&lt;/span&gt;
        &lt;span class="n"&gt;programmer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Programmer. Decide at run time&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Polymorphism with Interfaces&lt;/h4&gt;
&lt;p&gt;Polymorphism can also be implemented using &lt;code&gt;interfaces&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Polymorphism with interfaces requires a &lt;code&gt;class&lt;/code&gt; to &lt;strong&gt;implement&lt;/strong&gt; an interface.&lt;/p&gt;
&lt;p&gt;Polymorphism with interfaces &lt;strong&gt;always involves &lt;code&gt;abstract method&lt;/code&gt;s from the implemented interface&lt;/strong&gt; because interfaces can define only abstract methods.&lt;/p&gt;
&lt;p&gt;Review: all the methods defined in an &lt;code&gt;interface&lt;/code&gt; are implicitly &lt;code&gt;abstract&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;base class&lt;/code&gt; implement an &lt;code&gt;interface&lt;/code&gt;, its &lt;code&gt;derviced class&lt;/code&gt; don't need to implement again. They can just &lt;code&gt;extend&lt;/code&gt; base class.&lt;/p&gt;
&lt;p&gt;Only &lt;code&gt;overridden method&lt;/code&gt;s — methods with the same method &lt;code&gt;signatures&lt;/code&gt; participate in &lt;code&gt;polymorphism&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://pengyin-shan.com/posts/2015/Java/manning-oca-java-se7-reading-note-chapter-6.html</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item></channel></rss>